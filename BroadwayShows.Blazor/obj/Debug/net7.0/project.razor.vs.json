{"SerializedFilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\obj\\Debug\\net7.0\\project.razor.vs.json","FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\BroadwayShows.Blazor.csproj","Configuration":{"ConfigurationName":"MVC-3.0","LanguageVersion":"7.0","Extensions":[{"ExtensionName":"MVC-3.0"}]},"ProjectWorkspaceState":{"TagHelpers":[{"HashCode":-15497409,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Search","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Search"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Search","Common.TypeNamespace":"BroadwayShows.Blazor.Pages","Common.TypeNameIdentifier":"Search"}},{"HashCode":-1531987812,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Search","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.Search"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Search","Common.TypeNamespace":"BroadwayShows.Blazor.Pages","Common.TypeNameIdentifier":"Search","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1948740679,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.RemoveAttributes","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RemoveAttributes"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.RemoveAttributes","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin","Common.TypeNameIdentifier":"RemoveAttributes"}},{"HashCode":528281918,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.RemoveAttributes","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.Admin.RemoveAttributes"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.RemoveAttributes","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin","Common.TypeNameIdentifier":"RemoveAttributes","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1897770644,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.Search.SearchCastCrew","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SearchCastCrew"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.Search.SearchCastCrew","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin.Search","Common.TypeNameIdentifier":"SearchCastCrew"}},{"HashCode":424847706,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.Search.SearchCastCrew","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.Admin.Search.SearchCastCrew"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.Search.SearchCastCrew","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin.Search","Common.TypeNameIdentifier":"SearchCastCrew","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":764999485,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.Admin","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Admin"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.Admin","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin","Common.TypeNameIdentifier":"Admin"}},{"HashCode":-1213453243,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.Admin","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.Admin.Admin"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.Admin","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin","Common.TypeNameIdentifier":"Admin","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-872736530,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.UpdateAttributes","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UpdateAttributes"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.UpdateAttributes","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin","Common.TypeNameIdentifier":"UpdateAttributes"}},{"HashCode":1471889592,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.UpdateAttributes","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.Admin.UpdateAttributes"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.UpdateAttributes","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin","Common.TypeNameIdentifier":"UpdateAttributes","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-455278769,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.Remove.RemoveTicketSales","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RemoveTicketSales"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.Remove.RemoveTicketSales","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin.Remove","Common.TypeNameIdentifier":"RemoveTicketSales"}},{"HashCode":1338539225,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.Remove.RemoveTicketSales","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.Admin.Remove.RemoveTicketSales"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.Remove.RemoveTicketSales","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin.Remove","Common.TypeNameIdentifier":"RemoveTicketSales","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1208353110,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.AddAttributes","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AddAttributes"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.AddAttributes","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin","Common.TypeNameIdentifier":"AddAttributes"}},{"HashCode":-1354377118,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.AddAttributes","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.Admin.AddAttributes"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.AddAttributes","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin","Common.TypeNameIdentifier":"AddAttributes","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2074138506,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.Update.UpdateTicketSales","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UpdateTicketSales"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.Update.UpdateTicketSales","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin.Update","Common.TypeNameIdentifier":"UpdateTicketSales"}},{"HashCode":1359351336,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.Update.UpdateTicketSales","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.Admin.Update.UpdateTicketSales"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.Update.UpdateTicketSales","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin.Update","Common.TypeNameIdentifier":"UpdateTicketSales","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":751939659,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.SearchAttributes","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SearchAttributes"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.SearchAttributes","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin","Common.TypeNameIdentifier":"SearchAttributes"}},{"HashCode":752087718,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Admin.SearchAttributes","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.Admin.SearchAttributes"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Admin.SearchAttributes","Common.TypeNamespace":"BroadwayShows.Blazor.Pages.Admin","Common.TypeNameIdentifier":"SearchAttributes","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1792642474,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.SearchResults","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SearchResults"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.SearchResults","Common.TypeNamespace":"BroadwayShows.Blazor.Pages","Common.TypeNameIdentifier":"SearchResults"}},{"HashCode":-739285612,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.SearchResults","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.SearchResults"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.SearchResults","Common.TypeNamespace":"BroadwayShows.Blazor.Pages","Common.TypeNameIdentifier":"SearchResults","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-570377167,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Ticket","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Ticket"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Ticket","Common.TypeNamespace":"BroadwayShows.Blazor.Pages","Common.TypeNameIdentifier":"Ticket"}},{"HashCode":-1761225860,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Ticket","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.Ticket"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Ticket","Common.TypeNamespace":"BroadwayShows.Blazor.Pages","Common.TypeNameIdentifier":"Ticket","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":741846629,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.SearchShows","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SearchShows"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.SearchShows","Common.TypeNamespace":"BroadwayShows.Blazor.Pages","Common.TypeNameIdentifier":"SearchShows"}},{"HashCode":-37617576,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.SearchShows","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.SearchShows"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.SearchShows","Common.TypeNamespace":"BroadwayShows.Blazor.Pages","Common.TypeNameIdentifier":"SearchShows","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-195946484,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.ProcessPayment","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ProcessPayment"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.ProcessPayment","Common.TypeNamespace":"BroadwayShows.Blazor.Pages","Common.TypeNameIdentifier":"ProcessPayment"}},{"HashCode":-195560865,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.ProcessPayment","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.ProcessPayment"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.ProcessPayment","Common.TypeNamespace":"BroadwayShows.Blazor.Pages","Common.TypeNameIdentifier":"ProcessPayment","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1330859847,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Index","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Index"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Index","Common.TypeNamespace":"BroadwayShows.Blazor.Pages","Common.TypeNameIdentifier":"Index"}},{"HashCode":-570963738,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.Index","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.Index"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.Index","Common.TypeNamespace":"BroadwayShows.Blazor.Pages","Common.TypeNameIdentifier":"Index","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":432548105,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.About","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"About"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.About","Common.TypeNamespace":"BroadwayShows.Blazor.Pages","Common.TypeNameIdentifier":"About"}},{"HashCode":858265655,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Pages.About","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Pages.About"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Pages.About","Common.TypeNamespace":"BroadwayShows.Blazor.Pages","Common.TypeNameIdentifier":"About","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-802495206,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Shared.NavMenu","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NavMenu"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Shared.NavMenu","Common.TypeNamespace":"BroadwayShows.Blazor.Shared","Common.TypeNameIdentifier":"NavMenu"}},{"HashCode":620011355,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Shared.NavMenu","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Shared.NavMenu"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Shared.NavMenu","Common.TypeNamespace":"BroadwayShows.Blazor.Shared","Common.TypeNameIdentifier":"NavMenu","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-298487554,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Shared.AccessControl","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccessControl"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Shared.AccessControl","Common.TypeNamespace":"BroadwayShows.Blazor.Shared","Common.TypeNameIdentifier":"AccessControl"}},{"HashCode":1621945008,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Shared.AccessControl","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Shared.AccessControl"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Shared.AccessControl","Common.TypeNamespace":"BroadwayShows.Blazor.Shared","Common.TypeNameIdentifier":"AccessControl","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1706513144,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Shared.MainLayout","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MainLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Body","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Body","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Shared.MainLayout","Common.TypeNamespace":"BroadwayShows.Blazor.Shared","Common.TypeNameIdentifier":"MainLayout"}},{"HashCode":-360103366,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.Shared.MainLayout","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.Shared.MainLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Body","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Body","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.Shared.MainLayout","Common.TypeNamespace":"BroadwayShows.Blazor.Shared","Common.TypeNameIdentifier":"MainLayout","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":918395466,"Kind":"Components.ChildContent","Name":"BroadwayShows.Blazor.Shared.MainLayout.Body","AssemblyName":"BroadwayShows.Blazor","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Body","ParentTag":"MainLayout"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"BroadwayShows.Blazor.Shared.MainLayout.Body","Common.TypeNamespace":"BroadwayShows.Blazor.Shared","Common.TypeNameIdentifier":"MainLayout","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-373449300,"Kind":"Components.ChildContent","Name":"BroadwayShows.Blazor.Shared.MainLayout.Body","AssemblyName":"BroadwayShows.Blazor","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Body","ParentTag":"BroadwayShows.Blazor.Shared.MainLayout"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"BroadwayShows.Blazor.Shared.MainLayout.Body","Common.TypeNamespace":"BroadwayShows.Blazor.Shared","Common.TypeNameIdentifier":"MainLayout","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":231483008,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.App","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"App"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.App","Common.TypeNamespace":"BroadwayShows.Blazor","Common.TypeNameIdentifier":"App"}},{"HashCode":1626832874,"Kind":"Components.Component","Name":"BroadwayShows.Blazor.App","AssemblyName":"BroadwayShows.Blazor","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BroadwayShows.Blazor.App"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BroadwayShows.Blazor.App","Common.TypeNamespace":"BroadwayShows.Blazor","Common.TypeNameIdentifier":"App","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-277934104,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            ColorPicker component is a user interface to select and adjust color values. \n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes. \n            </summary> \n            <example> \n            In the below code example, showcases a basic ColorPicker component. \n            <code><![CDATA[ \n            <SfColorPicker> \n            </SfColorPicker> \n            ]]></code> \n            </example>\n            <summary>\n            ColorPicker component is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary>\n            ColorPicker is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary>\n            ColorPicker is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfColorPicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the color picker container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the columns to be rendered in palette mode. \n            </summary> \n            <value> \n            Accepts a double value. The default value is <c>10</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of color picker. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of color picker. The default value is <c>String.Empty</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the color picker. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableOpacity","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the opacity slider. \n            </summary> \n            <value> \n            <c>true</c>, if the opacity slider is enabled. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableOpacity","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.Value\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.Value\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Inline","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable to disable the inlide mode color picker. \n            </summary> \n            <value> \n            <c>true</c>, if the color picker component is rendered as inline. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Inline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Inputs.ColorPickerMode","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the mode of color picker to be rendered. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.ColorPickerMode.Picker\" /> \n            </value> \n            <remarks> \n            If the <c>ColorPickerMode</c> is <c>Picker</c>, the color picker is rendered as a picker. \n            If the <c>ColorPickerMode</c> is <c>Palette</c>, the color picker is rendered as a palette. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.ColorPickerMode"}},{"Kind":"Components.Component","Name":"ModeSwitcher","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the mode switcher option. \n            </summary> \n            <value> \n            <c>true</c>, if the mode switcher option is enabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ModeSwitcher","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"NoColor","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the no color option. \n            </summary> \n            <value> \n            <c>true</c>, if the no color option is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            No color option is only available in palette mode. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"NoColor","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PresetColors","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String[]>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the collection of custom color values that will be rendered as color picker element. \n            </summary> \n            <remarks> \n            Preset colors option is only available in palette mode. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PresetColors","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.String[]>"}},{"Kind":"Components.Component","Name":"ShowButtons","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the apply/cancel buttons. \n            </summary> \n            <value> \n            <c>true</c>, if the apply/cancel buttons were enabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowButtons","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the color value for color picker. It should be specified as Hex code. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>#008000ff</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> color value changed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is opening.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            you can access the ColorPicker popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfColorPicker OnOpen=\"@OnOpen\"> \n            </SfColorPicker> \n            @code { \n                private void OnOpen(BeforeOpenCloseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.OpenEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is opened.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            You can access the SplitButton popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.OpenEventArgs\" />. \n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfColorPicker Opened=\"@Opened\"> \n            </SfColorPicker> \n            @code { \n                private void Opened(OpenEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.OpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is closing.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            You can access the color picker popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnModeSwitch","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised before the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> mode switching is performed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"OnModeSwitch","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ModeSwitched","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> mode switch performed.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ModeSwitched","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnTileRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PaletteTileEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> tile rendering is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            You can customize the color picker tile rendering using <see cref=\"T:Syncfusion.Blazor.Inputs.PaletteTileEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnTileRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.PaletteTileEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised  while changing the colors.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            It will be triggered based on the <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.ShowButtons\" /> property.\n            If the property is false, this event will be triggered while selecting the colors.\n            If the property is true, this event will be triggered while apply the selected color.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> palette or picker element is clicked.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> rendering is completed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfColorPicker"}},{"HashCode":-2044769752,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            ColorPicker component is a user interface to select and adjust color values. \n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes. \n            </summary> \n            <example> \n            In the below code example, showcases a basic ColorPicker component. \n            <code><![CDATA[ \n            <SfColorPicker> \n            </SfColorPicker> \n            ]]></code> \n            </example>\n            <summary>\n            ColorPicker component is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary>\n            ColorPicker is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary>\n            ColorPicker is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfColorPicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the color picker container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the columns to be rendered in palette mode. \n            </summary> \n            <value> \n            Accepts a double value. The default value is <c>10</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Columns","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of color picker. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of color picker. The default value is <c>String.Empty</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the color picker. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableOpacity","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the opacity slider. \n            </summary> \n            <value> \n            <c>true</c>, if the opacity slider is enabled. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableOpacity","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.Value\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.Value\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Inline","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable to disable the inlide mode color picker. \n            </summary> \n            <value> \n            <c>true</c>, if the color picker component is rendered as inline. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Inline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Inputs.ColorPickerMode","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the mode of color picker to be rendered. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.ColorPickerMode.Picker\" /> \n            </value> \n            <remarks> \n            If the <c>ColorPickerMode</c> is <c>Picker</c>, the color picker is rendered as a picker. \n            If the <c>ColorPickerMode</c> is <c>Palette</c>, the color picker is rendered as a palette. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.ColorPickerMode"}},{"Kind":"Components.Component","Name":"ModeSwitcher","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the mode switcher option. \n            </summary> \n            <value> \n            <c>true</c>, if the mode switcher option is enabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ModeSwitcher","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"NoColor","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the no color option. \n            </summary> \n            <value> \n            <c>true</c>, if the no color option is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            No color option is only available in palette mode. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"NoColor","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PresetColors","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String[]>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the collection of custom color values that will be rendered as color picker element. \n            </summary> \n            <remarks> \n            Preset colors option is only available in palette mode. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PresetColors","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.String[]>"}},{"Kind":"Components.Component","Name":"ShowButtons","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the apply/cancel buttons. \n            </summary> \n            <value> \n            <c>true</c>, if the apply/cancel buttons were enabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowButtons","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the color value for color picker. It should be specified as Hex code. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>#008000ff</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> color value changed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is opening.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            you can access the ColorPicker popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfColorPicker OnOpen=\"@OnOpen\"> \n            </SfColorPicker> \n            @code { \n                private void OnOpen(BeforeOpenCloseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.OpenEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is opened.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            You can access the SplitButton popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.OpenEventArgs\" />. \n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfColorPicker Opened=\"@Opened\"> \n            </SfColorPicker> \n            @code { \n                private void Opened(OpenEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.OpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is closing.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            You can access the color picker popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnModeSwitch","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised before the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> mode switching is performed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"OnModeSwitch","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ModeSwitched","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> mode switch performed.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ModeSwitched","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnTileRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PaletteTileEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> tile rendering is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            You can customize the color picker tile rendering using <see cref=\"T:Syncfusion.Blazor.Inputs.PaletteTileEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnTileRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.PaletteTileEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised  while changing the colors.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            It will be triggered based on the <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.ShowButtons\" /> property.\n            If the property is false, this event will be triggered while selecting the colors.\n            If the property is true, this event will be triggered while apply the selected color.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> palette or picker element is clicked.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> rendering is completed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfColorPicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1955633156,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfColorPicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfColorPicker","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-79961822,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfColorPicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfColorPicker","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":969227222,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox component allows input based on a specified mask pattern.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMaskedTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskBlurEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.MaskBlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the content of <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> has changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfMaskedTextBox Mask=\"(999) 000-0000\" ValueChange=\"@OnChange\">\n            </SfMaskedTextBox>\n            @code{\n                private void OnChange(MaskChangeEventArgs args)\n                {\n                    var TextValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.MaskChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component is created.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component is destroyed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskFocusEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.MaskFocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled for the component. Otherwise. <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, allow the user to interact with component. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" />. The <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n              <SfMaskedTextBox Placeholder=\"Enter phone number\" FloatLabelType=\"FloatLabelType.Auto\" Mask=\"(999) 000-0000\">\n              </SfMaskedTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMaskedTextBox HtmlAttributes=\"@CustomAttribute\" Mask=\"(999) 000-0000\">\n            </SfMaskedTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Please enter the phone number\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional inputs attributes such as disabled, value, and more that will be applied to the TextBox component.        \n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMaskedTextBox @attributes=\"@CustomAttribute\" Mask=\"(999) 000-0000\">\n            </SfMaskedTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"type\", \"tel\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the MaskedTextBox has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value whether the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the TextBox component cannot be edited. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableLiterals","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value indicating whether literals are enabled in the masked text box.\n             </summary>\n             <value>\n               <c>true</c> if literals are include in the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" />; otherwise, <c>false</c>.\n             </value>\n             <remarks>\n             When literals are enabled, the mask pattern can include literal characters in the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" /> property.\n             You can get the masked value using <see cref=\"M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.GetMaskedValue\" /> method also. \n             </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableLiterals","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PromptPlaceholder","TypeName":"System.Char?","Documentation":"\n             <summary>\n             Gets or set character that is replace the blank spaces in the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" /> property.\n             </summary>\n             <value>\n             Accepts the character value is used to replace the blank space. The default value is a space.\n             </value>\n            <remarks>\n             You can use this option when you enable the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnableLiterals\" /> property: Otherwise, this option will not work.\n            </remarks>\n             <example>\n             <code><![CDATA[\n             <SfMaskedTextBox Mask=\"(999) 000-0000\" EnableLiterals=true @bind-Value=\"@maskValue\" PromptPlaceholder='@PlaceholderChar'>\n             </SfMaskedTextBox>\n             <p>Mask Value - @maskValue</p>\n             @code{\n                 private char PlaceholderChar = '*';\n                 private string maskValue{ get; set; }\n             }\n             ]]></code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"PromptPlaceholder","Common.GloballyQualifiedTypeName":"global::System.Char?"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or sets a value that indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear button should be shown. Otherwise, <c>false</c>.The default is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the current value of the masked text box.\n            </summary>\n            <value>\n            The input value of the masked text box.\n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" /> property holds the current text entered into the masked text box.\n            If <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnableLiterals\" /> is set to <c>true</c>, literal characters included in\n            the mask pattern will also be part of the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" />. Otherwise, only the\n            user-entered characters will be part of the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMaskedTextBox Mask=\"(999) 000-0000\" EnableLiterals=true @bind-Value=\"@maskValue\">\n            </SfMaskedTextBox>\n            <p>Mask Value - @maskValue</p>\n            @code{\n                private string maskValue{ get; set; }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component.\n            </summary>\n            <value>\n            The preferred width in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n              <SfMaskedTextBox @attributes=\"@CustomAttribute\" Mask=\"(999) 000-0000\">\n              </SfMaskedTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the tab order of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component.\n            </summary>\n            <value>\n            An integer value representing the tab index of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Mask","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the mask pattern for the text input.\n            </summary>\n            <value>\n            A string representing the mask pattern.\n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Mask\" /> property defines the pattern that the user's input must follow.\n            It can include various special characters that define the allowed input format. For\n            example, <c>#</c> might represent a digit and <c>_</c> might represent an optional character.\n            Literal characters included in the mask will be displayed as part of the mask.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMaskedTextBox Mask=\"(999) 000-0000\">\n            </SfMaskedTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Mask","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PromptChar","TypeName":"System.Char","Documentation":"\n            <summary>\n            Gets or sets the character used as a placeholder in the masked text box for unfilled positions.\n            </summary>\n            <value>\n            The character that indicates an unfilled position in the mask. The default value is <c>_</c>.\n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.PromptChar\" /> is used to visually indicate the available input positions in\n            the mask that the user can fill.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PromptChar","Common.GloballyQualifiedTypeName":"global::System.Char"}},{"Kind":"Components.Component","Name":"CustomCharacters","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Gets or sets a collection of custom characters that can be used for non-mask elements(literals).\n            </summary>\n            <value>\n            A dictionary value of custom characters.\n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.CustomCharacters\" /> property allows you to define additional special\n            characters that can be used in the mask pattern. For example non-mask elements \"P\" accepts values\n            \"P\" , \"A\" , \"p\" , \"a\" and \"M\" accepts values \"M\", \"m\" mentioned in the custom characters collection.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMaskedTextBox Mask=\"00:00 >PM\" CustomCharacters=\"@customMask\">\n            </SfMaskedTextBox>\n            @code{\n                private Dictionary<string, string> customMask = new Dictionary<string, string>()\n                {\n                    {\"P\" , \"P,p,A,a\" },\n                    {\"M\" , \"m,M\" }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CustomCharacters","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.String>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfMaskedTextBox"}},{"HashCode":1029954335,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox component allows input based on a specified mask pattern.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskBlurEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.MaskBlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the content of <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> has changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfMaskedTextBox Mask=\"(999) 000-0000\" ValueChange=\"@OnChange\">\n            </SfMaskedTextBox>\n            @code{\n                private void OnChange(MaskChangeEventArgs args)\n                {\n                    var TextValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.MaskChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component is created.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component is destroyed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskFocusEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.MaskFocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled for the component. Otherwise. <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, allow the user to interact with component. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" />. The <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n              <SfMaskedTextBox Placeholder=\"Enter phone number\" FloatLabelType=\"FloatLabelType.Auto\" Mask=\"(999) 000-0000\">\n              </SfMaskedTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMaskedTextBox HtmlAttributes=\"@CustomAttribute\" Mask=\"(999) 000-0000\">\n            </SfMaskedTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Please enter the phone number\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional inputs attributes such as disabled, value, and more that will be applied to the TextBox component.        \n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMaskedTextBox @attributes=\"@CustomAttribute\" Mask=\"(999) 000-0000\">\n            </SfMaskedTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"type\", \"tel\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the MaskedTextBox has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value whether the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the TextBox component cannot be edited. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableLiterals","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value indicating whether literals are enabled in the masked text box.\n             </summary>\n             <value>\n               <c>true</c> if literals are include in the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" />; otherwise, <c>false</c>.\n             </value>\n             <remarks>\n             When literals are enabled, the mask pattern can include literal characters in the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" /> property.\n             You can get the masked value using <see cref=\"M:Syncfusion.Blazor.Inputs.SfMaskedTextBox.GetMaskedValue\" /> method also. \n             </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableLiterals","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PromptPlaceholder","TypeName":"System.Char?","Documentation":"\n             <summary>\n             Gets or set character that is replace the blank spaces in the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" /> property.\n             </summary>\n             <value>\n             Accepts the character value is used to replace the blank space. The default value is a space.\n             </value>\n            <remarks>\n             You can use this option when you enable the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnableLiterals\" /> property: Otherwise, this option will not work.\n            </remarks>\n             <example>\n             <code><![CDATA[\n             <SfMaskedTextBox Mask=\"(999) 000-0000\" EnableLiterals=true @bind-Value=\"@maskValue\" PromptPlaceholder='@PlaceholderChar'>\n             </SfMaskedTextBox>\n             <p>Mask Value - @maskValue</p>\n             @code{\n                 private char PlaceholderChar = '*';\n                 private string maskValue{ get; set; }\n             }\n             ]]></code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"PromptPlaceholder","Common.GloballyQualifiedTypeName":"global::System.Char?"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or sets a value that indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear button should be shown. Otherwise, <c>false</c>.The default is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the current value of the masked text box.\n            </summary>\n            <value>\n            The input value of the masked text box.\n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" /> property holds the current text entered into the masked text box.\n            If <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnableLiterals\" /> is set to <c>true</c>, literal characters included in\n            the mask pattern will also be part of the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" />. Otherwise, only the\n            user-entered characters will be part of the <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMaskedTextBox Mask=\"(999) 000-0000\" EnableLiterals=true @bind-Value=\"@maskValue\">\n            </SfMaskedTextBox>\n            <p>Mask Value - @maskValue</p>\n            @code{\n                private string maskValue{ get; set; }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component.\n            </summary>\n            <value>\n            The preferred width in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n              <SfMaskedTextBox @attributes=\"@CustomAttribute\" Mask=\"(999) 000-0000\">\n              </SfMaskedTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the tab order of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfMaskedTextBox\" /> component.\n            </summary>\n            <value>\n            An integer value representing the tab index of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Mask","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the mask pattern for the text input.\n            </summary>\n            <value>\n            A string representing the mask pattern.\n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Mask\" /> property defines the pattern that the user's input must follow.\n            It can include various special characters that define the allowed input format. For\n            example, <c>#</c> might represent a digit and <c>_</c> might represent an optional character.\n            Literal characters included in the mask will be displayed as part of the mask.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMaskedTextBox Mask=\"(999) 000-0000\">\n            </SfMaskedTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Mask","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PromptChar","TypeName":"System.Char","Documentation":"\n            <summary>\n            Gets or sets the character used as a placeholder in the masked text box for unfilled positions.\n            </summary>\n            <value>\n            The character that indicates an unfilled position in the mask. The default value is <c>_</c>.\n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.PromptChar\" /> is used to visually indicate the available input positions in\n            the mask that the user can fill.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PromptChar","Common.GloballyQualifiedTypeName":"global::System.Char"}},{"Kind":"Components.Component","Name":"CustomCharacters","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Gets or sets a collection of custom characters that can be used for non-mask elements(literals).\n            </summary>\n            <value>\n            A dictionary value of custom characters.\n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.CustomCharacters\" /> property allows you to define additional special\n            characters that can be used in the mask pattern. For example non-mask elements \"P\" accepts values\n            \"P\" , \"A\" , \"p\" , \"a\" and \"M\" accepts values \"M\", \"m\" mentioned in the custom characters collection.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMaskedTextBox Mask=\"00:00 >PM\" CustomCharacters=\"@customMask\">\n            </SfMaskedTextBox>\n            @code{\n                private Dictionary<string, string> customMask = new Dictionary<string, string>()\n                {\n                    {\"P\" , \"P,p,A,a\" },\n                    {\"M\" , \"m,M\" }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CustomCharacters","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.String>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfMaskedTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1968662789,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfMaskedTextBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfMaskedTextBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1452595773,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfMaskedTextBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfMaskedTextBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1171822435,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfNumericTextBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NumericTextBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.NumericBlurEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.NumericBlurEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the value of <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> has changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfNumericTextBox TValue=\"int?\" Placeholder=\"Enter the value\" >\n                <NumericTextBoxEvents TValue=\"int?\" ValueChange=\"@OnChange\"/>\n            </SfNumericTextBox>\n            @code{\n                private void OnChange(ChangeEventArgs<int?> args)\n                {\n                    var CurrentValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.NumericFocusEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.NumericFocusEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"NumericTextBoxEvents","Components.GenericTyped":"True"}},{"HashCode":-616760452,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfNumericTextBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.NumericBlurEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.NumericBlurEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the value of <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> has changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfNumericTextBox TValue=\"int?\" Placeholder=\"Enter the value\" >\n                <NumericTextBoxEvents TValue=\"int?\" ValueChange=\"@OnChange\"/>\n            </SfNumericTextBox>\n            @code{\n                private void OnChange(ChangeEventArgs<int?> args)\n                {\n                    var CurrentValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.NumericFocusEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.NumericFocusEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"NumericTextBoxEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1729771056,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfNumericTextBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfNumericTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Currency","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the currency code to use in currency formatting. Possible values are the ISO 4217 currency codes, such as <c>USD</c> for the US dollar and <c>EUR</c> for the euro.\n            </summary>\n            <value>\n            Accepts the string value representing the currency code.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Currency","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" />. The <see cref=\"P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the Numeric TextBox component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the Numeric TextBox component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n              <SfNumericTextBox TValue=\"int?\" Placeholder=\"Enter the value\" FloatLabelType=\"FloatLabelType.Auto\">\n              </SfNumericTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the TextBox has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value whether the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the TextBox component cannot be edited. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or sets a value that indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear button should be shown. Otherwise, <c>false</c>.The default is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> component.\n            </summary>\n            <value>\n            The preferred width in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n              <SfNumericTextBox TValue=\"int?\" Width=\"200px\">\n              </SfNumericTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the tab order of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> component.\n            </summary>\n            <value>\n            An integer value representing the tab index of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> component.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfNumericTextBox TValue=\"int?\" HtmlAttributes=\"@CustomAttribute\">\n            </SfNumericTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Please enter the unit\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional inputs attributes such as disabled, value, and more that will be applied to the TextBox component.        \n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfNumericTextBox TValue=\"int?\" Placeholder=\"Enter the PIN\" @attributes=\"@CustomAttribute\">\n            </SfNumericTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"maxlength\", \"4\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Decimals","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the number of decimal places to display for numeric values.\n            </summary>\n            <value>\n            An integer value representing the number of decimal places. Use <c>null</c> to display the default number of decimal places.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Decimals","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the format string used to display numeric values.\n            </summary>\n            <value>\n            A string value representing the format pattern. The default value is <c>n2</c> which represents a number with two decimal places.\n            </value>\n            <remarks>\n            You can customize the format string according to your requirements. The format string follows the standard format specifiers used in .NET formatting. For example, <c>n3</c> would display a number with three decimal places.\n            </remarks>\n            <example>\n            <code><![CDATA[\n              <SfNumericTextBox TValue=\"decimal?\" Placeholder=\"Enter the value\" Format=\"n3\" >\n              </SfNumericTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowSpinButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether to display spin buttons for incrementing and decrementing the numeric value.\n            </summary>\n            <value>\n            <c>true</c> if spin buttons should be shown; otherwise, <c>false</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowSpinButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Step","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the increment or decrement value for changing the numeric value.\n            </summary>\n            <value>\n            The step value that determines how much the numeric value changes when interacting with the component.\n            </value>\n            <example>\n            <code><![CDATA[\n              <SfNumericTextBox TValue=\"int?\" Placeholder=\"Enter the value\" Step=5 >\n              </SfNumericTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the component operates in strict mode for value validation.\n            </summary>\n            <value>\n            <c>true</c>, if input value will be restricted between the min and max range. The typed value gets modified to fit the range on a focused out state. \n            Otherwise, <c>false</c> it allows any value even out of range value, at that time of wrong value entered, the error class will be added to the component to highlight the error. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateDecimalOnType","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value indicating whether to perform decimal validation during typing.\n            </summary>\n            <value>\n            <c>true</c> if decimal validation should be performed during typing; otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValidateDecimalOnType","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Max","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable value for the input.\n            </summary>\n            <value>\n            The maximum allowable value for the input. The default value is determined by the maximum possible value for the data type.\n            </value>\n            <example>\n            <code><![CDATA[\n              <SfNumericTextBox TValue=\"int?\" Placeholder=\"Enter the value\" Max=10 >\n              </SfNumericTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Min","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the minimum allowable value for the input.\n            </summary>\n            <value>\n            The minimum allowable value for the input. The default value is determined by the minimum possible value for the data type.\n            </value>\n            <example>\n            <code><![CDATA[\n              <SfNumericTextBox TValue=\"int?\" Placeholder=\"Enter the value\" Min=5 >\n              </SfNumericTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfNumericTextBox","Components.GenericTyped":"True"}},{"HashCode":-1753567642,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfNumericTextBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfNumericTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Currency","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the currency code to use in currency formatting. Possible values are the ISO 4217 currency codes, such as <c>USD</c> for the US dollar and <c>EUR</c> for the euro.\n            </summary>\n            <value>\n            Accepts the string value representing the currency code.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Currency","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" />. The <see cref=\"P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the Numeric TextBox component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the Numeric TextBox component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n              <SfNumericTextBox TValue=\"int?\" Placeholder=\"Enter the value\" FloatLabelType=\"FloatLabelType.Auto\">\n              </SfNumericTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the TextBox has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.Inputs.SfNumericTextBox`1.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value whether the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the TextBox component cannot be edited. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or sets a value that indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear button should be shown. Otherwise, <c>false</c>.The default is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> component.\n            </summary>\n            <value>\n            The preferred width in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n              <SfNumericTextBox TValue=\"int?\" Width=\"200px\">\n              </SfNumericTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the tab order of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> component.\n            </summary>\n            <value>\n            An integer value representing the tab index of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the <see cref=\"T:Syncfusion.Blazor.Inputs.SfNumericTextBox`1\" /> component.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfNumericTextBox TValue=\"int?\" HtmlAttributes=\"@CustomAttribute\">\n            </SfNumericTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Please enter the unit\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional inputs attributes such as disabled, value, and more that will be applied to the TextBox component.        \n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfNumericTextBox TValue=\"int?\" Placeholder=\"Enter the PIN\" @attributes=\"@CustomAttribute\">\n            </SfNumericTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"maxlength\", \"4\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Decimals","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the number of decimal places to display for numeric values.\n            </summary>\n            <value>\n            An integer value representing the number of decimal places. Use <c>null</c> to display the default number of decimal places.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Decimals","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the format string used to display numeric values.\n            </summary>\n            <value>\n            A string value representing the format pattern. The default value is <c>n2</c> which represents a number with two decimal places.\n            </value>\n            <remarks>\n            You can customize the format string according to your requirements. The format string follows the standard format specifiers used in .NET formatting. For example, <c>n3</c> would display a number with three decimal places.\n            </remarks>\n            <example>\n            <code><![CDATA[\n              <SfNumericTextBox TValue=\"decimal?\" Placeholder=\"Enter the value\" Format=\"n3\" >\n              </SfNumericTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowSpinButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether to display spin buttons for incrementing and decrementing the numeric value.\n            </summary>\n            <value>\n            <c>true</c> if spin buttons should be shown; otherwise, <c>false</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowSpinButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Step","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the increment or decrement value for changing the numeric value.\n            </summary>\n            <value>\n            The step value that determines how much the numeric value changes when interacting with the component.\n            </value>\n            <example>\n            <code><![CDATA[\n              <SfNumericTextBox TValue=\"int?\" Placeholder=\"Enter the value\" Step=5 >\n              </SfNumericTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the component operates in strict mode for value validation.\n            </summary>\n            <value>\n            <c>true</c>, if input value will be restricted between the min and max range. The typed value gets modified to fit the range on a focused out state. \n            Otherwise, <c>false</c> it allows any value even out of range value, at that time of wrong value entered, the error class will be added to the component to highlight the error. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateDecimalOnType","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value indicating whether to perform decimal validation during typing.\n            </summary>\n            <value>\n            <c>true</c> if decimal validation should be performed during typing; otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValidateDecimalOnType","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Max","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable value for the input.\n            </summary>\n            <value>\n            The maximum allowable value for the input. The default value is determined by the maximum possible value for the data type.\n            </value>\n            <example>\n            <code><![CDATA[\n              <SfNumericTextBox TValue=\"int?\" Placeholder=\"Enter the value\" Max=10 >\n              </SfNumericTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Min","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the minimum allowable value for the input.\n            </summary>\n            <value>\n            The minimum allowable value for the input. The default value is determined by the minimum possible value for the data type.\n            </value>\n            <example>\n            <code><![CDATA[\n              <SfNumericTextBox TValue=\"int?\" Placeholder=\"Enter the value\" Min=5 >\n              </SfNumericTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfNumericTextBox","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1427624649,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfNumericTextBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfNumericTextBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1481490239,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfNumericTextBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfNumericTextBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-57650317,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfRating","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            The Blazor Rating component allows the user to rate something by clicking on a set of symbols on numeric scale. \n            This allow users to provide feedback or ratings for products, services, or content.\n            </summary> \n            <example> \n            A simple Blazor Rating component with value.\n            <code><![CDATA[ \n            <SfRating Value=3 />\n            ]]></code> \n            A Blazor Rating component with label.\n            <code><![CDATA[ \n            <SfRating ShowLabel=true /> \n            ]]></code>\n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfRating"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AllowReset","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to show or hide the reset button in a rating component.\n            </summary>\n            <value> \n            <c>true</c>, the reset button will be visible to the user and they will be able to click it to reset the rating value to its default. \n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowReset","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes that can be used to customize the appearance of a rating component.\n            </summary> \n            <value> \n            One or more CSS classes to customize the appearance of the rating component, such as by changing its colors, fonts, sizes, or other visual aspects.\n            The default value is <c>String.Empty</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether a rating component is enabled or disabled.\n            A disabled rating component may have a different visual appearance than an enabled one.\n            </summary> \n            <value> \n            <c>true</c>, the rating component will be disabled and the user will not be able to interact with it. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EmptyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.RatingItemContext>","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each un-rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the un-rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with empty template.\n            <code><![CDATA[ \n            <SfRating> \n               <EmptyTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </EmptyTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","Metadata":{"Common.PropertyName":"EmptyTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Inputs.RatingItemContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EnableAnimation","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to add animation (to provide visual feedback to the user) when an item in a rating component is hovered.\n            </summary>\n            <value> \n            <c>true</c>, an animation will be added when the user hovers their cursor over an item in the rating component.\n            The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableAnimation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableSingleSelection","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to select all the items before the selected item should be in selected state in a rating component.\n            </summary>\n            <value> \n            <c>true</c>, only the selected item will be in the selected state, and all other items will be un-selected.\n            <c>false</c>, all items before the selected one will be in the selected state.\n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableSingleSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FullTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.RatingItemContext>","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with full template.\n            <code><![CDATA[ \n            <SfRating> \n               <FullTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </FullTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","Metadata":{"Common.PropertyName":"FullTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Inputs.RatingItemContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the rating element.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets a value that specifies the number of items (symbols) in rating component.\n            The rating component typically consists of a number of items, such as stars or other symbols, that represent the rating value. \n            </summary>\n            <value>\n            An int that specifies the number of items (symbols) displayed in rating component\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Inputs.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the the position of the label in rating component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.LabelPosition\" /> enumeration that specifies the position of the label. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.LabelPosition.Right\" />.\n            </value>\n            <remarks>\n            You can use this property to customize the position of the label within the rating component to suit the needs of your application. \n            For example, you can set the <c>LabelPosition</c> property to ,<c>Top</c> to position the label at the top center of the rating component, \n            or set it to <c>Left</c> to position the label at the left side of the component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"LabelPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.LabelPosition"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Double>","Documentation":"\n            <summary> \n            Gets or sets a template that used as label over default label of the rating. The current value of rating passed as context to build the content.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with label template.\n            <code><![CDATA[ \n            <SfRating> \n               <LabelTemplate>\n                    <span>@context Out Of 5</span>\n               </LabelTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"LabelTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Double>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.Double?","Documentation":"\n            <summary> \n            Gets or sets the value that specifies minimum rating that a user can select.\n            </summary>\n            <value>\n            By default, the <c>Min</c> property is set to 0, which means that the minimum possible rating is 0.\n            </value>\n            <remarks>\n            You can use the <c>Min</c> property to customize the minimum possible rating in the <c>SfRating</c> component. \n            For example, if you want to allow users to provide ratings from 1 to 5, you can set the <c>Min</c> property to 1 and <c>ItemsCount</c> to 5.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"Precision","TypeName":"Syncfusion.Blazor.Inputs.PrecisionType","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the precision type of the rating which used to component the granularity of the rating, allowing users to provide ratings with varying levels of precision.\n            </summary>\n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.PrecisionType\" /> enumeration that specifies the precision type. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.PrecisionType.Full\" />.\n            </value>\n            <remarks>\n            The <c>Precision</c> property can be set to one of the following values:\n            <list type=\"bullet\">\n            <item><description>Full: The rating is increased in whole number increments. For example, if the current rating is 3, the next possible ratings are 4, 5, and so on.</description></item>\n            <item><description>Half: The rating is increased in increments of 0.5 (half). For example, if the current rating is 3.5, the next possible ratings are 4, 4.5, 5, and so on.</description></item>\n            <item><description>Quarter: The rating is increased in increments of 0.25 (quarter). For example, if the current rating is 3.75, the next possible ratings are 4, 4.25, 4.5, and so on.</description></item>\n            <item><description>Exact: The rating is increased in increments of 0.1. For example, if the current rating is 3.9, the next possible ratings are 4, 4.1, 4.2, and so on.</description></item>\n            </list>\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Precision","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.PrecisionType"}},{"Kind":"Components.Component","Name":"ReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a boolean value that specifies whether the read-only mode is enabled for a rating component, \n            which means that the user will be able to interact with it and change the rating value. \n            </summary>\n            <value> \n            <c>true</c>,the rating component will be in read-only mode, which means that the user will not be able to interact with it and change the rating value. \n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ReadOnly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowLabel","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to display a label that shows the current value of a rating.\n            </summary>\n            <value> \n            <c>true</c>, a label will be displayed that shows the current value of the rating; otherwise false. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowLabel","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowTooltip","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that defines whether to show tooltip for the items.\n            </summary>\n            <value> \n            <c>true</c>, show tooltip for the items. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowTooltip","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"TooltipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Double>","Documentation":"\n            <summary> \n            Gets or sets a template that used as tooltip content over default tooltip content of the rating. The current value of rating passed as context to build the content. \n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with tooltip template.\n            <code><![CDATA[ \n            <SfRating> \n               <TooltipTemplate>\n                    <div>@context Star</div>\n               </TooltipTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"TooltipTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Double>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Double?","Documentation":"\n            <summary> \n            Gets or sets the current rating value which used to display and update the rating selected by the user. \n            Based on <see cref=\"T:Syncfusion.Blazor.Inputs.PrecisionType\" />, users can select ratings with varying levels of precision\n            </summary>\n            <value>\n            The <c>Value</c> property is a decimal value that ranges from the <see cref=\"P:Syncfusion.Blazor.Inputs.SfRating.Min\" /> to the <see cref=\"P:Syncfusion.Blazor.Inputs.SfRating.ItemsCount\" />, \n            as specified by the <c>Min</c> and <c>ItemsCount</c> properties of the rating.\n            </value>\n            <remarks>\n            You can use the <c>Value</c> property to initialize the rating component with a specific rating value, or to get the current rating value selected by the user. \n            For example, if you want to initialize the rating component with a rating of 3.5, you can set the <c>Value</c> property to 3.5.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the rating component is visible or hidden\n            </summary> \n            <value> \n            <c>true</c>, if the rating component is visible. The default value is <c>true</c>. \n            </value>          \n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfRating\" /> rendering is completed.  \n            </summary> \n            <value> \n            An event call back function. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemHover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.RatingHoverEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when a user hovers over an item.   \n            </summary> \n            <value> \n            An event call back function. \n            </value>\n        ","Metadata":{"Common.PropertyName":"OnItemHover","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.RatingHoverEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Double>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"P:Syncfusion.Blazor.Inputs.SfRating.Value\" /> property is changed.\n            </summary>\n            <value> \n            An event call back function. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Double>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfRating"}},{"HashCode":-1728342793,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfRating","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            The Blazor Rating component allows the user to rate something by clicking on a set of symbols on numeric scale. \n            This allow users to provide feedback or ratings for products, services, or content.\n            </summary> \n            <example> \n            A simple Blazor Rating component with value.\n            <code><![CDATA[ \n            <SfRating Value=3 />\n            ]]></code> \n            A Blazor Rating component with label.\n            <code><![CDATA[ \n            <SfRating ShowLabel=true /> \n            ]]></code>\n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfRating"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AllowReset","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to show or hide the reset button in a rating component.\n            </summary>\n            <value> \n            <c>true</c>, the reset button will be visible to the user and they will be able to click it to reset the rating value to its default. \n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowReset","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes that can be used to customize the appearance of a rating component.\n            </summary> \n            <value> \n            One or more CSS classes to customize the appearance of the rating component, such as by changing its colors, fonts, sizes, or other visual aspects.\n            The default value is <c>String.Empty</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether a rating component is enabled or disabled.\n            A disabled rating component may have a different visual appearance than an enabled one.\n            </summary> \n            <value> \n            <c>true</c>, the rating component will be disabled and the user will not be able to interact with it. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EmptyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.RatingItemContext>","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each un-rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the un-rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with empty template.\n            <code><![CDATA[ \n            <SfRating> \n               <EmptyTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </EmptyTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","Metadata":{"Common.PropertyName":"EmptyTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Inputs.RatingItemContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EnableAnimation","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to add animation (to provide visual feedback to the user) when an item in a rating component is hovered.\n            </summary>\n            <value> \n            <c>true</c>, an animation will be added when the user hovers their cursor over an item in the rating component.\n            The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableAnimation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableSingleSelection","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to select all the items before the selected item should be in selected state in a rating component.\n            </summary>\n            <value> \n            <c>true</c>, only the selected item will be in the selected state, and all other items will be un-selected.\n            <c>false</c>, all items before the selected one will be in the selected state.\n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableSingleSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FullTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.RatingItemContext>","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with full template.\n            <code><![CDATA[ \n            <SfRating> \n               <FullTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </FullTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","Metadata":{"Common.PropertyName":"FullTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Inputs.RatingItemContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the rating element.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets a value that specifies the number of items (symbols) in rating component.\n            The rating component typically consists of a number of items, such as stars or other symbols, that represent the rating value. \n            </summary>\n            <value>\n            An int that specifies the number of items (symbols) displayed in rating component\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Inputs.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the the position of the label in rating component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.LabelPosition\" /> enumeration that specifies the position of the label. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.LabelPosition.Right\" />.\n            </value>\n            <remarks>\n            You can use this property to customize the position of the label within the rating component to suit the needs of your application. \n            For example, you can set the <c>LabelPosition</c> property to ,<c>Top</c> to position the label at the top center of the rating component, \n            or set it to <c>Left</c> to position the label at the left side of the component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"LabelPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.LabelPosition"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Double>","Documentation":"\n            <summary> \n            Gets or sets a template that used as label over default label of the rating. The current value of rating passed as context to build the content.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with label template.\n            <code><![CDATA[ \n            <SfRating> \n               <LabelTemplate>\n                    <span>@context Out Of 5</span>\n               </LabelTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"LabelTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Double>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.Double?","Documentation":"\n            <summary> \n            Gets or sets the value that specifies minimum rating that a user can select.\n            </summary>\n            <value>\n            By default, the <c>Min</c> property is set to 0, which means that the minimum possible rating is 0.\n            </value>\n            <remarks>\n            You can use the <c>Min</c> property to customize the minimum possible rating in the <c>SfRating</c> component. \n            For example, if you want to allow users to provide ratings from 1 to 5, you can set the <c>Min</c> property to 1 and <c>ItemsCount</c> to 5.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"Precision","TypeName":"Syncfusion.Blazor.Inputs.PrecisionType","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the precision type of the rating which used to component the granularity of the rating, allowing users to provide ratings with varying levels of precision.\n            </summary>\n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.PrecisionType\" /> enumeration that specifies the precision type. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.PrecisionType.Full\" />.\n            </value>\n            <remarks>\n            The <c>Precision</c> property can be set to one of the following values:\n            <list type=\"bullet\">\n            <item><description>Full: The rating is increased in whole number increments. For example, if the current rating is 3, the next possible ratings are 4, 5, and so on.</description></item>\n            <item><description>Half: The rating is increased in increments of 0.5 (half). For example, if the current rating is 3.5, the next possible ratings are 4, 4.5, 5, and so on.</description></item>\n            <item><description>Quarter: The rating is increased in increments of 0.25 (quarter). For example, if the current rating is 3.75, the next possible ratings are 4, 4.25, 4.5, and so on.</description></item>\n            <item><description>Exact: The rating is increased in increments of 0.1. For example, if the current rating is 3.9, the next possible ratings are 4, 4.1, 4.2, and so on.</description></item>\n            </list>\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Precision","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.PrecisionType"}},{"Kind":"Components.Component","Name":"ReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a boolean value that specifies whether the read-only mode is enabled for a rating component, \n            which means that the user will be able to interact with it and change the rating value. \n            </summary>\n            <value> \n            <c>true</c>,the rating component will be in read-only mode, which means that the user will not be able to interact with it and change the rating value. \n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ReadOnly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowLabel","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to display a label that shows the current value of a rating.\n            </summary>\n            <value> \n            <c>true</c>, a label will be displayed that shows the current value of the rating; otherwise false. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowLabel","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowTooltip","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that defines whether to show tooltip for the items.\n            </summary>\n            <value> \n            <c>true</c>, show tooltip for the items. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowTooltip","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"TooltipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Double>","Documentation":"\n            <summary> \n            Gets or sets a template that used as tooltip content over default tooltip content of the rating. The current value of rating passed as context to build the content. \n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with tooltip template.\n            <code><![CDATA[ \n            <SfRating> \n               <TooltipTemplate>\n                    <div>@context Star</div>\n               </TooltipTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"TooltipTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Double>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Double?","Documentation":"\n            <summary> \n            Gets or sets the current rating value which used to display and update the rating selected by the user. \n            Based on <see cref=\"T:Syncfusion.Blazor.Inputs.PrecisionType\" />, users can select ratings with varying levels of precision\n            </summary>\n            <value>\n            The <c>Value</c> property is a decimal value that ranges from the <see cref=\"P:Syncfusion.Blazor.Inputs.SfRating.Min\" /> to the <see cref=\"P:Syncfusion.Blazor.Inputs.SfRating.ItemsCount\" />, \n            as specified by the <c>Min</c> and <c>ItemsCount</c> properties of the rating.\n            </value>\n            <remarks>\n            You can use the <c>Value</c> property to initialize the rating component with a specific rating value, or to get the current rating value selected by the user. \n            For example, if you want to initialize the rating component with a rating of 3.5, you can set the <c>Value</c> property to 3.5.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the rating component is visible or hidden\n            </summary> \n            <value> \n            <c>true</c>, if the rating component is visible. The default value is <c>true</c>. \n            </value>          \n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfRating\" /> rendering is completed.  \n            </summary> \n            <value> \n            An event call back function. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemHover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.RatingHoverEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when a user hovers over an item.   \n            </summary> \n            <value> \n            An event call back function. \n            </value>\n        ","Metadata":{"Common.PropertyName":"OnItemHover","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.RatingHoverEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Double>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"P:Syncfusion.Blazor.Inputs.SfRating.Value\" /> property is changed.\n            </summary>\n            <value> \n            An event call back function. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Double>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfRating","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1048220370,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.EmptyTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each un-rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the un-rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with empty template.\n            <code><![CDATA[ \n            <SfRating> \n               <EmptyTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </EmptyTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyTemplate","ParentTag":"SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EmptyTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.EmptyTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfRating","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":845380459,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.EmptyTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each un-rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the un-rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with empty template.\n            <code><![CDATA[ \n            <SfRating> \n               <EmptyTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </EmptyTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyTemplate","ParentTag":"Syncfusion.Blazor.Inputs.SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EmptyTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.EmptyTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfRating","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-626797338,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.FullTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with full template.\n            <code><![CDATA[ \n            <SfRating> \n               <FullTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </FullTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FullTemplate","ParentTag":"SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FullTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.FullTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfRating","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-682049465,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.FullTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with full template.\n            <code><![CDATA[ \n            <SfRating> \n               <FullTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </FullTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FullTemplate","ParentTag":"Syncfusion.Blazor.Inputs.SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FullTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.FullTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfRating","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":429124143,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.LabelTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that used as label over default label of the rating. The current value of rating passed as context to build the content.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with label template.\n            <code><![CDATA[ \n            <SfRating> \n               <LabelTemplate>\n                    <span>@context Out Of 5</span>\n               </LabelTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'LabelTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.LabelTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfRating","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1923355198,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.LabelTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that used as label over default label of the rating. The current value of rating passed as context to build the content.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with label template.\n            <code><![CDATA[ \n            <SfRating> \n               <LabelTemplate>\n                    <span>@context Out Of 5</span>\n               </LabelTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Syncfusion.Blazor.Inputs.SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'LabelTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.LabelTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfRating","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-760415535,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.TooltipTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that used as tooltip content over default tooltip content of the rating. The current value of rating passed as context to build the content. \n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with tooltip template.\n            <code><![CDATA[ \n            <SfRating> \n               <TooltipTemplate>\n                    <div>@context Star</div>\n               </TooltipTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TooltipTemplate","ParentTag":"SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'TooltipTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.TooltipTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfRating","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":814301572,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.TooltipTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that used as tooltip content over default tooltip content of the rating. The current value of rating passed as context to build the content. \n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with tooltip template.\n            <code><![CDATA[ \n            <SfRating> \n               <TooltipTemplate>\n                    <div>@context Star</div>\n               </TooltipTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TooltipTemplate","ParentTag":"Syncfusion.Blazor.Inputs.SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'TooltipTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.TooltipTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfRating","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1331176949,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfSignature","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Signature allows user to draw smooth signatures as vector outline of strokes using variable width Bézier curve interpolation. \n            It allows to save signature as image.\n            You can use your finger, pen, or mouse on a tablet, touchscreen, etc., to draw your own signature on this Signature component.\n            </summary>\n            <remarks>\n            Signature is a user interface to draw the signature or text.\n            It supports stroke color, background color and image.\n            </remarks>\n            <example>\n            In the below code example, a basic Signature initialized with <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> tag directive.\n            <code><![CDATA[ \n            <SfSignature style=\"height: 100%; width: 100%;\"></SfSignature>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSignature"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <remarks>\n            Additional attributes can be added as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, signature height and width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" />.\n            <code><![CDATA[\n            <SfSignature style=\"height: 100%; width: 100%;\"></SfSignature>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"BackgroundColor","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the background color of the component.\n            </summary>\n            <value>\n            The background color of the component that accepts hex value, rgb and text (like <code>red</code>). The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"BackgroundColor","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"BackgroundImage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the background image for the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <value>\n            An image that used to fill the background of the component. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"BackgroundImage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to disable the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component where the opacity is set to show disabled state. \n            </summary>\n            <value>\n            <c>true</c>, if the signature component is disabled for user interaction. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to prevent the interaction in <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the signature component is read only state where the user interaction is prevented. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IsReadOnly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SaveWithBackground","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to save the signature along with <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundColor\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundImage\" /> while saving. \n            </summary>\n            <value>\n            <c>true</c>, if signature component to save with background. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"SaveWithBackground","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StrokeColor","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the stroke color of the signature.\n            </summary>\n            <value>\n            The color of the signature stroke that accepts hex value, rgb and text (like <code>red</code>). The default value is <c>\"#000000\"</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"StrokeColor","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MinStrokeWidth","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the minimum stroke width for signature. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component calculates stroke width based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The minimum width of stroke. The default value is <c>0.5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MinStrokeWidth","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"MaxStrokeWidth","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the maximum stroke width for signature.\n            The <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component calculates stroke width based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The maximum width of stroke. The default value is <c>2.0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MaxStrokeWidth","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Velocity","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the velocity to calculate the stroke thickness based on the pressure of the contact on the digitizer surface.\n            The Signature component calculates stroke thickness based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The velocity to calculate the stroke thickness based on the pressure of the contact on the digitizer surface. The default value is <c>0.7</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Velocity","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Changed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SignatureChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised for the actions like undo, redo, clear and while user complete signing on <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfSignature Changed=\"@changefunc\"></SfSignature>\n            @code \n            {\n                private void changefunc(SignatureChangeEventArgs args) \n                {\n                    if (args.ActionName == \"Clear\")\n                    {\n                        // validation code goes here\n                    }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Changed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SignatureChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnSave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SignatureSaveEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while saving the signature.\n            </summary>\n            <remarks>\n            The file name and the file type(PNG, JPEG, SVG) can be changed using <see cref=\"T:Syncfusion.Blazor.Inputs.SignatureSaveEventArgs\" /> and <see cref=\"T:Syncfusion.Blazor.Inputs.SignatureFileType\" />.\n            The event callback is raised only for the keyboard action (Ctrl + S).\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfSignature Changed=\"@beforesavefunc\"></SfSignature>\n            @code \n            {\n                private void beforesavefunc(SignatureSaveEventArgs args) \n                {        \n                    args.fileType = \"SignatureFileType.Jpeg\";\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnSave","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SignatureSaveEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when component rendering is completed.\n            </summary>\n            <remarks>\n            You can load the pre-drawn signature when the signature component is created.\n            </remarks>\n            <example>\n            In the below code example, the pre-drawn signature is loaded using <c>Created</c> event.\n            <code><![CDATA[\n            <SfSignature Created=\"@Created\">\n            </SfSignature >\n            @code {\n                private void Created() {\n                    var sign = \"\"; // Base 64 or URL of the pre-drawn signature\n                    signature.LoadAsync(sign);\n                }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            Renders the base 64 string as signature on <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component. \n            </summary>\n            <returns>\n            A Task that completes when the component has finished the loading of base 64 string.\n            </returns>\n            <example>\n            In the below code example, the pre-drawn signature is loaded using <c>Created</c> event.\n            <code><![CDATA[\n            <SfSignature @ref=\"signature\" Created=\"@Created\">\n            </SfSignature >\n            @code {\n                private void Created() {\n                    var sign = \"\"; // Base 64 or URL of the pre-drawn signature\n                    signature.LoadAsync(sign, 400, 400);\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSignature","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSignature"}},{"HashCode":-1447942412,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfSignature","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Signature allows user to draw smooth signatures as vector outline of strokes using variable width Bézier curve interpolation. \n            It allows to save signature as image.\n            You can use your finger, pen, or mouse on a tablet, touchscreen, etc., to draw your own signature on this Signature component.\n            </summary>\n            <remarks>\n            Signature is a user interface to draw the signature or text.\n            It supports stroke color, background color and image.\n            </remarks>\n            <example>\n            In the below code example, a basic Signature initialized with <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> tag directive.\n            <code><![CDATA[ \n            <SfSignature style=\"height: 100%; width: 100%;\"></SfSignature>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfSignature"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <remarks>\n            Additional attributes can be added as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, signature height and width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" />.\n            <code><![CDATA[\n            <SfSignature style=\"height: 100%; width: 100%;\"></SfSignature>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"BackgroundColor","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the background color of the component.\n            </summary>\n            <value>\n            The background color of the component that accepts hex value, rgb and text (like <code>red</code>). The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"BackgroundColor","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"BackgroundImage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the background image for the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <value>\n            An image that used to fill the background of the component. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"BackgroundImage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to disable the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component where the opacity is set to show disabled state. \n            </summary>\n            <value>\n            <c>true</c>, if the signature component is disabled for user interaction. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to prevent the interaction in <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the signature component is read only state where the user interaction is prevented. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IsReadOnly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SaveWithBackground","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to save the signature along with <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundColor\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundImage\" /> while saving. \n            </summary>\n            <value>\n            <c>true</c>, if signature component to save with background. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"SaveWithBackground","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StrokeColor","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the stroke color of the signature.\n            </summary>\n            <value>\n            The color of the signature stroke that accepts hex value, rgb and text (like <code>red</code>). The default value is <c>\"#000000\"</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"StrokeColor","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MinStrokeWidth","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the minimum stroke width for signature. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component calculates stroke width based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The minimum width of stroke. The default value is <c>0.5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MinStrokeWidth","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"MaxStrokeWidth","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the maximum stroke width for signature.\n            The <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component calculates stroke width based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The maximum width of stroke. The default value is <c>2.0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MaxStrokeWidth","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Velocity","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the velocity to calculate the stroke thickness based on the pressure of the contact on the digitizer surface.\n            The Signature component calculates stroke thickness based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The velocity to calculate the stroke thickness based on the pressure of the contact on the digitizer surface. The default value is <c>0.7</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Velocity","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Changed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SignatureChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised for the actions like undo, redo, clear and while user complete signing on <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfSignature Changed=\"@changefunc\"></SfSignature>\n            @code \n            {\n                private void changefunc(SignatureChangeEventArgs args) \n                {\n                    if (args.ActionName == \"Clear\")\n                    {\n                        // validation code goes here\n                    }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Changed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SignatureChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnSave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SignatureSaveEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while saving the signature.\n            </summary>\n            <remarks>\n            The file name and the file type(PNG, JPEG, SVG) can be changed using <see cref=\"T:Syncfusion.Blazor.Inputs.SignatureSaveEventArgs\" /> and <see cref=\"T:Syncfusion.Blazor.Inputs.SignatureFileType\" />.\n            The event callback is raised only for the keyboard action (Ctrl + S).\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfSignature Changed=\"@beforesavefunc\"></SfSignature>\n            @code \n            {\n                private void beforesavefunc(SignatureSaveEventArgs args) \n                {        \n                    args.fileType = \"SignatureFileType.Jpeg\";\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnSave","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SignatureSaveEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when component rendering is completed.\n            </summary>\n            <remarks>\n            You can load the pre-drawn signature when the signature component is created.\n            </remarks>\n            <example>\n            In the below code example, the pre-drawn signature is loaded using <c>Created</c> event.\n            <code><![CDATA[\n            <SfSignature Created=\"@Created\">\n            </SfSignature >\n            @code {\n                private void Created() {\n                    var sign = \"\"; // Base 64 or URL of the pre-drawn signature\n                    signature.LoadAsync(sign);\n                }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            Renders the base 64 string as signature on <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component. \n            </summary>\n            <returns>\n            A Task that completes when the component has finished the loading of base 64 string.\n            </returns>\n            <example>\n            In the below code example, the pre-drawn signature is loaded using <c>Created</c> event.\n            <code><![CDATA[\n            <SfSignature @ref=\"signature\" Created=\"@Created\">\n            </SfSignature >\n            @code {\n                private void Created() {\n                    var sign = \"\"; // Base 64 or URL of the pre-drawn signature\n                    signature.LoadAsync(sign, 400, 400);\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSignature","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSignature","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":580028777,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.ColorRange","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class represent the color, start and end position of slider track.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorRange"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get and set the Slider.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Color","TypeName":"System.String","Documentation":"\n            <summary>\n            Get and set the Color.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Color","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Start","TypeName":"System.Double","Documentation":"\n            <summary>\n            Get and set the start.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"End","TypeName":"System.Double","Documentation":"\n            <summary>\n            Get and set the End.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"End","Common.GloballyQualifiedTypeName":"global::System.Double"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.ColorRange","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"ColorRange"}},{"HashCode":-200358551,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.ColorRange","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class represent the color, start and end position of slider track.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.ColorRange"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get and set the Slider.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Color","TypeName":"System.String","Documentation":"\n            <summary>\n            Get and set the Color.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Color","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Start","TypeName":"System.Double","Documentation":"\n            <summary>\n            Get and set the start.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"End","TypeName":"System.Double","Documentation":"\n            <summary>\n            Get and set the End.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"End","Common.GloballyQualifiedTypeName":"global::System.Double"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.ColorRange","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"ColorRange","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":583099637,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.ColorRange.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Get and set the Slider.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ColorRange"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.ColorRange.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"ColorRange","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1874518156,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.ColorRange.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Get and set the Slider.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.ColorRange"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.ColorRange.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"ColorRange","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-685236614,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderColorRanges","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the collections of colors to the slider track based on start and end value of each color.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderColorRanges"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get and set the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderColorRanges","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderColorRanges"}},{"HashCode":-1222765767,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderColorRanges","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the collections of colors to the slider track based on start and end value of each color.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderColorRanges"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get and set the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderColorRanges","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderColorRanges","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":776308532,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Get and set the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderColorRanges"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderColorRanges","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":447237131,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Get and set the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderColorRanges"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderColorRanges","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1112389586,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Partial class SfSlider.\n            </summary>\n            <typeparam name=\"TValue\">Generic type parameter.</typeparam>.\n            <summary>\n            The Slider component allows the user to select a value or range of values\n            in-between the min and max range, by dragging the handle over the slider bar.\n            </summary>\n            <summary>\n            Partial class SfSlider.\n            </summary>\n            <summary>\n            Specifies the partial class SfSlider.\n            </summary>\n            <summary>\n            Specifies the partial class SfSlider.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSlider"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SfSlider<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the slider element.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the element used to customize the slider.\n            </summary>\n            <value>\n            Accepts the CSS class string separated by space to customize the appearance of component. The default value is empty.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CustomValues","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Specifies an array of slider values in number or string type.\n            The min and max step values are not considered.\n            </summary>\n            <value>\n            Accepts an array of slider values in number or string type.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CustomValues","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"EnableAnimation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables/Disables the animation for slider movement.\n            </summary>\n            <value>\n            <c>true</c>, if the animation can be enabled. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableAnimation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n            <value>\n            <c>true</c>, if the persistence can be enabled. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled. Otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables the slider.\n            </summary>\n            <value>\n            <c>true</c>, Allow the user to interact with the component. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the maximum value of the slider.\n            </summary>\n            <value>\n            Accepts a double value representing that the maximum value of slider. The default value is <c>100</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the minimum value of the slider.\n            </summary>\n            <value>\n            Accepts a double value representing that the minimum value of slider. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Orientation","TypeName":"Syncfusion.Blazor.Inputs.SliderOrientation","IsEnum":true,"Documentation":"\n            <summary>\n             Specifies whether to render the slider in vertical or horizontal orientation.\n            </summary>\n            <value>\n            A value of the <see cref=\"T:Syncfusion.Blazor.Inputs.SliderOrientation\" /> enumeration that specifies the orientation of scale. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.SliderOrientation.Horizontal\" />.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Orientation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.SliderOrientation"}},{"Kind":"Components.Component","Name":"ReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the render the slider in read-only mode to restrict any user interaction.\n            The slider rendered with user defined values and can’t be interacted with user actions.\n            </summary>\n            <value>\n            <c>true</c>, if the slider component cannot be edited. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ReadOnly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowButtons","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show or hide the increase/decrease buttons\n            of Slider to change the slider value.\n            </summary>\n            <value>\n            <c>true</c>, if the increase or decrease buttons should be shown. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowButtons","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the step value for each value change when the increase / decrease\n             button is clicked or on arrow keys press or on dragging the thumb.\n            </summary>\n            <value>\n            Accepts the double value that specifies the step value change when increase or decrease button is clicked or arrow key press or dragging the thumb. The default value is <c>1</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Inputs.SliderType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the type of the Slider. The available options are:\n              Default - Allows to a single value in the Slider.\n              MinRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.\n              Range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.SliderType\" /> enumeration that specifies the type of slider in the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.SliderType"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            It is used to denote the current value of the Slider.\n            The value should be specified in array of number when render Slider type as range.\n            </summary>\n            <value>\n            The current value of the Slider.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Slider.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsImmediateValue","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the value need to be updated at the time of dragging slider handle.\n            </summary>\n            <value>\n            <c>true</c>, the value is updated immediately when the slider handle is dragged. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IsImmediateValue","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSlider","Components.GenericTyped":"True"}},{"HashCode":-1760110757,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Partial class SfSlider.\n            </summary>\n            <typeparam name=\"TValue\">Generic type parameter.</typeparam>.\n            <summary>\n            The Slider component allows the user to select a value or range of values\n            in-between the min and max range, by dragging the handle over the slider bar.\n            </summary>\n            <summary>\n            Partial class SfSlider.\n            </summary>\n            <summary>\n            Specifies the partial class SfSlider.\n            </summary>\n            <summary>\n            Specifies the partial class SfSlider.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfSlider"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SfSlider<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the slider element.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the element used to customize the slider.\n            </summary>\n            <value>\n            Accepts the CSS class string separated by space to customize the appearance of component. The default value is empty.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CustomValues","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Specifies an array of slider values in number or string type.\n            The min and max step values are not considered.\n            </summary>\n            <value>\n            Accepts an array of slider values in number or string type.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CustomValues","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"EnableAnimation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables/Disables the animation for slider movement.\n            </summary>\n            <value>\n            <c>true</c>, if the animation can be enabled. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableAnimation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n            <value>\n            <c>true</c>, if the persistence can be enabled. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled. Otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables the slider.\n            </summary>\n            <value>\n            <c>true</c>, Allow the user to interact with the component. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the maximum value of the slider.\n            </summary>\n            <value>\n            Accepts a double value representing that the maximum value of slider. The default value is <c>100</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the minimum value of the slider.\n            </summary>\n            <value>\n            Accepts a double value representing that the minimum value of slider. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Orientation","TypeName":"Syncfusion.Blazor.Inputs.SliderOrientation","IsEnum":true,"Documentation":"\n            <summary>\n             Specifies whether to render the slider in vertical or horizontal orientation.\n            </summary>\n            <value>\n            A value of the <see cref=\"T:Syncfusion.Blazor.Inputs.SliderOrientation\" /> enumeration that specifies the orientation of scale. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.SliderOrientation.Horizontal\" />.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Orientation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.SliderOrientation"}},{"Kind":"Components.Component","Name":"ReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the render the slider in read-only mode to restrict any user interaction.\n            The slider rendered with user defined values and can’t be interacted with user actions.\n            </summary>\n            <value>\n            <c>true</c>, if the slider component cannot be edited. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ReadOnly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowButtons","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show or hide the increase/decrease buttons\n            of Slider to change the slider value.\n            </summary>\n            <value>\n            <c>true</c>, if the increase or decrease buttons should be shown. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowButtons","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the step value for each value change when the increase / decrease\n             button is clicked or on arrow keys press or on dragging the thumb.\n            </summary>\n            <value>\n            Accepts the double value that specifies the step value change when increase or decrease button is clicked or arrow key press or dragging the thumb. The default value is <c>1</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Inputs.SliderType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the type of the Slider. The available options are:\n              Default - Allows to a single value in the Slider.\n              MinRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.\n              Range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.SliderType\" /> enumeration that specifies the type of slider in the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.SliderType"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            It is used to denote the current value of the Slider.\n            The value should be specified in array of number when render Slider type as range.\n            </summary>\n            <value>\n            The current value of the Slider.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Slider.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsImmediateValue","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the value need to be updated at the time of dragging slider handle.\n            </summary>\n            <value>\n            <c>true</c>, the value is updated immediately when the slider handle is dragged. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IsImmediateValue","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSlider","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1452403400,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSlider"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSlider","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-171365941,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfSlider"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSlider","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1653477883,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Configure handlers to handle the events of the Slider component.\n            </summary>\n            <typeparam name=\"TValue\">\"TValue\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SliderEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            We can trigger change event whenever Slider value is changed.\n             In other term, this event will be triggered while drag the slider thumb.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Fires whenever the Slider value is changed.\n            In other term, this event will be triggered, while drag the slider thumb completed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the Slider is successfully created.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TicksRendered","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the ticks are rendered on the Slider.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TicksRendered","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TicksRendering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTickEventArgs>","Documentation":"\n            <summary>\n            Triggers on rendering the ticks element in the Slider,\n            which is used to customize the ticks labels dynamically.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TicksRendering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderTickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnTooltipChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTooltipEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Sider tooltip value is changed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnTooltipChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderTooltipEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderEvents","Components.GenericTyped":"True"}},{"HashCode":1870874129,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Configure handlers to handle the events of the Slider component.\n            </summary>\n            <typeparam name=\"TValue\">\"TValue\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SliderEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            We can trigger change event whenever Slider value is changed.\n             In other term, this event will be triggered while drag the slider thumb.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Fires whenever the Slider value is changed.\n            In other term, this event will be triggered, while drag the slider thumb completed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the Slider is successfully created.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TicksRendered","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the ticks are rendered on the Slider.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TicksRendered","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TicksRendering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTickEventArgs>","Documentation":"\n            <summary>\n            Triggers on rendering the ticks element in the Slider,\n            which is used to customize the ticks labels dynamically.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TicksRendering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderTickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnTooltipChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTooltipEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Sider tooltip value is changed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnTooltipChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SliderTooltipEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":905474441,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderLimits","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set limit bar to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderLimits"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to enable the limit in the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EndHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the second handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndHandleFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaxEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxEnd","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MaxStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxStart","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MinEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinEnd","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MinStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinStart","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"StartHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the first handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartHandleFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimits","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderLimits"}},{"HashCode":-1102583093,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderLimits","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set limit bar to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderLimits"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to enable the limit in the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EndHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the second handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndHandleFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MaxEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxEnd","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MaxStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxStart","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MinEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinEnd","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"MinStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinStart","Common.GloballyQualifiedTypeName":"global::System.Double?"}},{"Kind":"Components.Component","Name":"StartHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the first handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartHandleFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimits","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderLimits","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1327823946,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderLimits.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderLimits"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimits.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderLimits","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1793454811,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderLimits.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderLimits"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimits.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderLimits","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-833283225,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTicks","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to render ticks to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderTicks"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Slider scale value to the desired format using Internationalization or events(custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LargeStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two major (large) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LargeStep","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.Placement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position of the ticks in the Slider. The available options are:.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.Placement"}},{"Kind":"Components.Component","Name":"ShowSmallTicks","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            We can show or hide the small ticks in the Slider, which will be appeared in between the largeTicks.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSmallTicks","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SmallStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two minor (small) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SmallStep","Common.GloballyQualifiedTypeName":"global::System.Double"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicks","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTicks"}},{"HashCode":122538354,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTicks","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to render ticks to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderTicks"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Slider scale value to the desired format using Internationalization or events(custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LargeStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two major (large) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LargeStep","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.Placement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position of the ticks in the Slider. The available options are:.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.Placement"}},{"Kind":"Components.Component","Name":"ShowSmallTicks","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            We can show or hide the small ticks in the Slider, which will be appeared in between the largeTicks.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSmallTicks","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SmallStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two minor (small) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SmallStep","Common.GloballyQualifiedTypeName":"global::System.Double"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicks","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTicks","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1778181871,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTicks.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderTicks"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicks.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTicks","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2050218481,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTicks.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderTicks"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicks.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTicks","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1927368190,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTooltip","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set a tooltip for slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip which accepts custom CSS class names that define\n             specific user-defined styles and themes to be applied on the Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip content to the desired format\n             using internationalization or events (custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to show or hide the Tooltip of Slider Component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsVisible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.TooltipPlacement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position for the tooltip element in the Slider. The available options are:\n              Before - Tooltip is shown in the top of the horizontal slider bar or at the left of the vertical slider bar.\n              After - Tooltip is shown in the bottom of the horizontal slider bar or at the right of the vertical slider bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.TooltipPlacement"}},{"Kind":"Components.Component","Name":"ShowOn","TypeName":"Syncfusion.Blazor.Inputs.TooltipShowOn","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to determine the device mode to show the Tooltip.\n            If it is in desktop, it will show the Tooltip content when hovering on the target element.\n            If it is in touch device. It will show the Tooltip content when tap and holding on the target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowOn","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.TooltipShowOn"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltip","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTooltip"}},{"HashCode":-914177080,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTooltip","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set a tooltip for slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip which accepts custom CSS class names that define\n             specific user-defined styles and themes to be applied on the Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip content to the desired format\n             using internationalization or events (custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to show or hide the Tooltip of Slider Component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsVisible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.TooltipPlacement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position for the tooltip element in the Slider. The available options are:\n              Before - Tooltip is shown in the top of the horizontal slider bar or at the left of the vertical slider bar.\n              After - Tooltip is shown in the bottom of the horizontal slider bar or at the right of the vertical slider bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.TooltipPlacement"}},{"Kind":"Components.Component","Name":"ShowOn","TypeName":"Syncfusion.Blazor.Inputs.TooltipShowOn","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to determine the device mode to show the Tooltip.\n            If it is in desktop, it will show the Tooltip content when hovering on the target element.\n            If it is in touch device. It will show the Tooltip content when tap and holding on the target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowOn","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.TooltipShowOn"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltip","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTooltip","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-670886270,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderTooltip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTooltip","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":513176307,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderTooltip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SliderTooltip","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1194401179,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FocusOutEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the TextBox loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FocusOutEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ChangedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the content of TextBox has changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfTextBox Placeholder=\"Enter a value\" ValueChange=\"@OnChange\">\n            </SfTextBox>\n            @code{\n                private void OnChange(ChangedEventArgs args)\n                {\n                    var TextValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ChangedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the TextBox component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the TextBox component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FocusInEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the TextBox gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FocusInEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Input","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.InputEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the user types or pastes text into the TextBox.\n            </summary>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Inputs.SfTextBox.Input\" /> event is triggered whenever the user interacts with the TextBox by typing, pasting, or\n            using any input method to modify the content. It provides real-time updates as the user enters text,\n            allowing you to perform actions or validation based on the changing input.\n            \n            It is important to note that the <see cref=\"P:Syncfusion.Blazor.Inputs.SfTextBox.Input\" /> event may fire frequently during user input, potentially with\n            each keystroke, so it is generally suitable for handling real-time updates or feedback rather than more\n            intensive processing.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfTextBox Placeholder=\"Enter a value\" Input=\"@OnInput\">\n            </SfTextBox>\n            @code{\n                private void OnInput(InputEventArgs args)\n                {\n                    var TextValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Input","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.InputEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Autocomplete","TypeName":"Syncfusion.Blazor.Inputs.AutoComplete","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the browser should automatically enter or suggest a value for the TextBox.\n            </summary>\n            <value>One of the <see cref=\"T:Syncfusion.Blazor.Inputs.AutoComplete\" /> enumeration.The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.AutoComplete.On\" /> for TextBox.\n            Possible values are:\n            <list type=\"bullet\">\n            <item>\n            <term>On</term>\n            <description>Specifies that autocomplete is enabled</description>\n            </item>\n            <item>\n            <term>Off</term>\n            <description>Specifies that autocomplete is disabled.</description>\n            </item>\n            </list>\n            </value>\n        ","Metadata":{"Common.PropertyName":"Autocomplete","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.AutoComplete"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" />. The <see cref=\"P:Syncfusion.Blazor.Inputs.SfTextBox.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the TextBox component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the TextBox component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n              <SfTextBox FloatLabelType=\"FloatLabelType.Auto\" Placeholder=\"Enter a value\"></SfTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" /> has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the TextBox has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.Inputs.SfTextBox.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value whether the <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the TextBox component cannot be edited. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or sets a value that indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear button should be shown. Otherwise, <c>false</c>.The default is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" /> component.\n            </summary>\n            <value>\n            The preferred width in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n              <SfTextBox Width=\"300px\"></SfTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the tab order of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" /> component.\n            </summary>\n            <value>\n            An integer value representing the tab index of <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" /> component.\n            </value>\n            <example>\n            <code><![CDATA[\n              <SfTextBox TabIndex=1></SfTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Multiline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value that enables or disables the multiline(textarea) on the TextBox.\n            The TextBox changes from a single line to multiline when enabling this multiline mode.\n            </summary>\n            <value>\n            <c>true</c> to enable multiline mode (textarea); <c>false</c> to keep it as a single line TextBox.\n            </value>\n            <remarks>\n            Enabling multiline mode for the TextBox allows users to enter and display text across multiple lines,\n            effectively converting it into a textarea component. This can be useful when you need to capture longer\n            or formatted text, such as in comments, descriptions, or any scenario that requires multiple lines of input.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Multiline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the TextBox component.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfTextBox HtmlAttributes=\"@CustomAttribute\">\n            </SfTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Enter your name\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional inputs attributes such as disabled, value, and more that will be applied to the TextBox component.        \n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfTextBox Placeholder=\"Enter the PIN\" @attributes=\"@CustomAttribute\">\n            </SfTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"maxlength\", \"4\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Inputs.InputType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the behavior of the TextBox such as text, password, email, and more.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.InputType\" /> enumeration that specifies the type of input in the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.InputType"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfTextBox"}},{"HashCode":-808869631,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FocusOutEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the TextBox loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FocusOutEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ChangedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the content of TextBox has changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfTextBox Placeholder=\"Enter a value\" ValueChange=\"@OnChange\">\n            </SfTextBox>\n            @code{\n                private void OnChange(ChangedEventArgs args)\n                {\n                    var TextValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ChangedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the TextBox component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the TextBox component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FocusInEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the TextBox gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FocusInEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Input","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.InputEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the user types or pastes text into the TextBox.\n            </summary>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Inputs.SfTextBox.Input\" /> event is triggered whenever the user interacts with the TextBox by typing, pasting, or\n            using any input method to modify the content. It provides real-time updates as the user enters text,\n            allowing you to perform actions or validation based on the changing input.\n            \n            It is important to note that the <see cref=\"P:Syncfusion.Blazor.Inputs.SfTextBox.Input\" /> event may fire frequently during user input, potentially with\n            each keystroke, so it is generally suitable for handling real-time updates or feedback rather than more\n            intensive processing.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfTextBox Placeholder=\"Enter a value\" Input=\"@OnInput\">\n            </SfTextBox>\n            @code{\n                private void OnInput(InputEventArgs args)\n                {\n                    var TextValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Input","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.InputEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Autocomplete","TypeName":"Syncfusion.Blazor.Inputs.AutoComplete","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the browser should automatically enter or suggest a value for the TextBox.\n            </summary>\n            <value>One of the <see cref=\"T:Syncfusion.Blazor.Inputs.AutoComplete\" /> enumeration.The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.AutoComplete.On\" /> for TextBox.\n            Possible values are:\n            <list type=\"bullet\">\n            <item>\n            <term>On</term>\n            <description>Specifies that autocomplete is enabled</description>\n            </item>\n            <item>\n            <term>Off</term>\n            <description>Specifies that autocomplete is disabled.</description>\n            </item>\n            </list>\n            </value>\n        ","Metadata":{"Common.PropertyName":"Autocomplete","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.AutoComplete"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" />. The <see cref=\"P:Syncfusion.Blazor.Inputs.SfTextBox.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the TextBox component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the TextBox component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n              <SfTextBox FloatLabelType=\"FloatLabelType.Auto\" Placeholder=\"Enter a value\"></SfTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" /> has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the TextBox has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.Inputs.SfTextBox.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value whether the <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the TextBox component cannot be edited. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or sets a value that indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear button should be shown. Otherwise, <c>false</c>.The default is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" /> component.\n            </summary>\n            <value>\n            The preferred width in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n              <SfTextBox Width=\"300px\"></SfTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the tab order of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" /> component.\n            </summary>\n            <value>\n            An integer value representing the tab index of <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" /> component.\n            </value>\n            <example>\n            <code><![CDATA[\n              <SfTextBox TabIndex=1></SfTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Multiline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value that enables or disables the multiline(textarea) on the TextBox.\n            The TextBox changes from a single line to multiline when enabling this multiline mode.\n            </summary>\n            <value>\n            <c>true</c> to enable multiline mode (textarea); <c>false</c> to keep it as a single line TextBox.\n            </value>\n            <remarks>\n            Enabling multiline mode for the TextBox allows users to enter and display text across multiple lines,\n            effectively converting it into a textarea component. This can be useful when you need to capture longer\n            or formatted text, such as in comments, descriptions, or any scenario that requires multiple lines of input.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Multiline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the TextBox component.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfTextBox HtmlAttributes=\"@CustomAttribute\">\n            </SfTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Enter your name\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional inputs attributes such as disabled, value, and more that will be applied to the TextBox component.        \n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfTextBox Placeholder=\"Enter the PIN\" @attributes=\"@CustomAttribute\">\n            </SfTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"maxlength\", \"4\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Inputs.InputType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the behavior of the TextBox such as text, password, email, and more.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.InputType\" /> enumeration that specifies the type of input in the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.InputType"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1769267338,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfUploader","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The uploader component is useful to upload images, documents, and other files to server.\n            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.\n            </summary>\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n            <summary>\n            The uploader component is useful to upload images, documents, and other files to server.\n            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfUploader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets the ID of the Uploader component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowedExtensions","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the extensions of the file types allowed in the Uploader component, passing the extensions with the comma separators.\n            </summary>\n            <value>\n            Accepts the string value. The default value is empty.\n            </value>\n            <remarks>\n            For example, if you want to upload specific image files, pass the property as \".jpg\" and \".png.\"\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            <SfUploader ID=\"UploadFiles\" AllowedExtensions=\".jpg, .png\">\n                <UploaderAsyncSettings SaveUrl=\"api/SampleData/Save\" RemoveUrl=\"api/SampleData/Remove\"/>\n            </SfUploader>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"AllowedExtensions","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableHtmlSanitizer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to prevent the cross site scripting code in filename or not.\n            </summary>\n            <value>\n            <c>true</c>, if the component prevents the cross site scripting code in filename; otherwise,<c>false</c>. The default value is <c>true</c>.       \n            </value>\n            <remarks>\n            The Enable HtmlSanitizer property removes the cross-site scripting code or functions from the filename and shows the validation error message to the user.\n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnableHtmlSanitizer","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AutoUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" /> component initiates automatic upload after the files are selected.\n            </summary>\n            <value>\n            <c>true</c>, if the automatic upload option can be enabled in component. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n            <remarks>\n            If you want to manipulate the files before uploading to server, disable the <see cref=\"P:Syncfusion.Blazor.Inputs.SfUploader.AutoUpload\" /> property. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AutoUpload","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowProgressBar","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether to show the progress bar while uploading a file.\n            </summary>\n            <value>\n            <c>true</c> if the progress bar should be shown; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowProgressBar","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets one or more CSS classes that can be used to customize the appearance of a file upload component.\n            </summary>\n            <value>\n            Accepts the CSS class string separated by space to customize the appearance of component.\n            </value>\n            <remarks>\n            One or more custom CSS classes can be added to a file upload.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DirectoryUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the folder of files can be browsed in the file upload component.\n            </summary>\n            <value>\n            <c>true</c>, if the directory upload option can be enabled. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"DirectoryUpload","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DropArea","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the custom file drop target element selectors to handle file upload on drag-and-drop action.\n            </summary>\n            <value>\n            Accepts the target element selector string.\n            </value>\n            <remarks>\n            By default, the file upload component creates a container element around the file input that will act as a drop target.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            <SfUploader DropArea=\"#CustomDropArea\" >\n                <UploaderAsyncSettings SaveUrl=\"api/SampleData/Save\" RemoveUrl=\"api/SampleData/Remove\" />\n            </SfUploader>\n            <div id=\"CustomDropArea\" style=\"width:200px; height:200px; border:dashed 1px\" ></div>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"DropArea","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DropEffect","TypeName":"Syncfusion.Blazor.Inputs.DropEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the cursor displayed while dragging the file into the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" /> component. It indicates which type of operation will occur.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.DropEffect\" /> enumeration that specifies the drag operation for the component. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.DropEffect.Default\" />.\n            </value>\n            <remarks>\n             The <c>DropEffect</c> property can be set to one of the following values:\n            <list type=\"bullet\">\n            <item>\n            <term>Copy</term> The mouse cursor shows a copy symbol when dragging and dropping the files.\n            </item>\n            <item>\n            <term>Move</term> The mouse cursor shows a move symbol when dragging and dropping the files.\n            </item>\n            <item>\n            <term>Link</term> The mouse cursor shows a link symbol when dragging and dropping the files.\n            </item>\n            <item>\n            <term>None</term> The files are not allowed to be dropped.\n            </item>\n            </list>\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            <SfUploader ID=\"UploadFiles\" DropEffect=\"DropEffect.Copy\">\n                <UploaderAsyncSettings SaveUrl=\"api/SampleData/Save\" RemoveUrl=\"api/SampleData/Remove\" />\n            </SfUploader>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"DropEffect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.DropEffect"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the persisting file upload state on page reload. If enabled, the state of the uploaded or selected files will be persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the persistence can be enabled. Otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" /> component is rendered in right-to-left direction.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled for the component. Otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" /> component allows the user to interact with it.\n            </summary>\n            <value>\n            <c>true</c>, allow the user to interact with component. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets an additional html attributes such as styles, class, and more to add the root element.\n            </summary>\n            <value>\n            A dictionary of additional HTML attributes for the root element of the component.\n            </value>\n            <remarks>\n            If you configured both property and equivalent html attributes, the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            <SfUploader ID=\"UploadFiles\" HtmlAttributes=\"@HtmlAttribute\">\n                <UploaderAsyncSettings SaveUrl=\"api/SampleData/Save\" RemoveUrl=\"api/SampleData/Remove\" />\n            </SfUploader>\n            @code {\n                Dictionary<string, object> HtmlAttribute = new Dictionary<string, object>() {\n                {\"disabled\",\"true\" }\n                };\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets an additional input attributes such as disabled, value, and more to add the input file element.\n            </summary>\n            <value>\n            A dictionary of additional input attributes for the root element of the component.\n            </value>\n            <remarks>\n            If you configured both property and equivalent input attribute, the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"MaxFileSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the maximum allowed file size to be uploaded in bytes.\n            </summary>\n            <value>\n            Accepts the double value representing that the maximum file size for the component. The default value is <c>30000000</c>.\n            </value>\n            <remarks>\n            The property used to make sure that you cannot upload too large files.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MaxFileSize","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"MinFileSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the minimum file size to be uploaded in bytes.\n            </summary>\n            <value>\n            Accepts the double value representing that the minimum file size for the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MinFileSize","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"AllowMultiple","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the multiple files can be browsed or dropped simultaneously in the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the multiple file options can be enabled. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowMultiple","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SequentialUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" /> component is processing the multiple files simultaneously or not.\n            </summary>\n            <value>\n            <c>true</c>, if the sequential upload option can be enabled in component. Otherwise, <c>false</c>. \n            </value>\n            <remarks>\n            If SequentialUpload property is enabled, the file upload component performs the upload one after the other.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"SequentialUpload","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowFileList","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the file list can be rendered or not.\n            </summary>\n            <value>\n            <c>true</c>, if the file list should be shown. otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n            <remarks>\n            The property used to prevent default file list and design own template for file list using <see cref=\"P:Syncfusion.Blazor.Inputs.SfUploader.Template\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowFileList","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the tab order of the component.\n            </summary>\n            <value>\n            An integer value representing the tab index of Uploader component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.FileInfo>","Documentation":"\n            <summary>\n            Gets or sets a template that is used to customize the content of each file in the list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            @inject HttpClient Http\n            <SfUploader ID=\"UploadFiles\" DropEffect=\"DropEffect.Copy\">\n                <UploaderAsyncSettings SaveUrl=\"api/SampleData/Save\" RemoveUrl=\"api/SampleData/Remove\"/>\n                <UploaderTemplates>\n                    <Template Context=\"HttpContext\">\n                        <div style=\"padding: 7px;\">\n                            <h5 title=\"@(HttpContext.Name)\">@(HttpContext.Name)</h5>\n                            <i>@(HttpContext.Size) Bytes</i>\n                        </div>\n                    </Template>\n                </UploaderTemplates>\n            </SfUploader>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Inputs.FileInfo>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfUploader"}},{"HashCode":577443998,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfUploader","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The uploader component is useful to upload images, documents, and other files to server.\n            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.\n            </summary>\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n            <summary>\n            The uploader component is useful to upload images, documents, and other files to server.\n            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfUploader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets the ID of the Uploader component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowedExtensions","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the extensions of the file types allowed in the Uploader component, passing the extensions with the comma separators.\n            </summary>\n            <value>\n            Accepts the string value. The default value is empty.\n            </value>\n            <remarks>\n            For example, if you want to upload specific image files, pass the property as \".jpg\" and \".png.\"\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            <SfUploader ID=\"UploadFiles\" AllowedExtensions=\".jpg, .png\">\n                <UploaderAsyncSettings SaveUrl=\"api/SampleData/Save\" RemoveUrl=\"api/SampleData/Remove\"/>\n            </SfUploader>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"AllowedExtensions","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableHtmlSanitizer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to prevent the cross site scripting code in filename or not.\n            </summary>\n            <value>\n            <c>true</c>, if the component prevents the cross site scripting code in filename; otherwise,<c>false</c>. The default value is <c>true</c>.       \n            </value>\n            <remarks>\n            The Enable HtmlSanitizer property removes the cross-site scripting code or functions from the filename and shows the validation error message to the user.\n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnableHtmlSanitizer","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AutoUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" /> component initiates automatic upload after the files are selected.\n            </summary>\n            <value>\n            <c>true</c>, if the automatic upload option can be enabled in component. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n            <remarks>\n            If you want to manipulate the files before uploading to server, disable the <see cref=\"P:Syncfusion.Blazor.Inputs.SfUploader.AutoUpload\" /> property. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AutoUpload","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowProgressBar","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether to show the progress bar while uploading a file.\n            </summary>\n            <value>\n            <c>true</c> if the progress bar should be shown; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowProgressBar","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets one or more CSS classes that can be used to customize the appearance of a file upload component.\n            </summary>\n            <value>\n            Accepts the CSS class string separated by space to customize the appearance of component.\n            </value>\n            <remarks>\n            One or more custom CSS classes can be added to a file upload.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DirectoryUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the folder of files can be browsed in the file upload component.\n            </summary>\n            <value>\n            <c>true</c>, if the directory upload option can be enabled. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"DirectoryUpload","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"DropArea","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the custom file drop target element selectors to handle file upload on drag-and-drop action.\n            </summary>\n            <value>\n            Accepts the target element selector string.\n            </value>\n            <remarks>\n            By default, the file upload component creates a container element around the file input that will act as a drop target.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            <SfUploader DropArea=\"#CustomDropArea\" >\n                <UploaderAsyncSettings SaveUrl=\"api/SampleData/Save\" RemoveUrl=\"api/SampleData/Remove\" />\n            </SfUploader>\n            <div id=\"CustomDropArea\" style=\"width:200px; height:200px; border:dashed 1px\" ></div>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"DropArea","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DropEffect","TypeName":"Syncfusion.Blazor.Inputs.DropEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the cursor displayed while dragging the file into the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" /> component. It indicates which type of operation will occur.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.DropEffect\" /> enumeration that specifies the drag operation for the component. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.DropEffect.Default\" />.\n            </value>\n            <remarks>\n             The <c>DropEffect</c> property can be set to one of the following values:\n            <list type=\"bullet\">\n            <item>\n            <term>Copy</term> The mouse cursor shows a copy symbol when dragging and dropping the files.\n            </item>\n            <item>\n            <term>Move</term> The mouse cursor shows a move symbol when dragging and dropping the files.\n            </item>\n            <item>\n            <term>Link</term> The mouse cursor shows a link symbol when dragging and dropping the files.\n            </item>\n            <item>\n            <term>None</term> The files are not allowed to be dropped.\n            </item>\n            </list>\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            <SfUploader ID=\"UploadFiles\" DropEffect=\"DropEffect.Copy\">\n                <UploaderAsyncSettings SaveUrl=\"api/SampleData/Save\" RemoveUrl=\"api/SampleData/Remove\" />\n            </SfUploader>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"DropEffect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.DropEffect"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the persisting file upload state on page reload. If enabled, the state of the uploaded or selected files will be persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the persistence can be enabled. Otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" /> component is rendered in right-to-left direction.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled for the component. Otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" /> component allows the user to interact with it.\n            </summary>\n            <value>\n            <c>true</c>, allow the user to interact with component. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets an additional html attributes such as styles, class, and more to add the root element.\n            </summary>\n            <value>\n            A dictionary of additional HTML attributes for the root element of the component.\n            </value>\n            <remarks>\n            If you configured both property and equivalent html attributes, the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            <SfUploader ID=\"UploadFiles\" HtmlAttributes=\"@HtmlAttribute\">\n                <UploaderAsyncSettings SaveUrl=\"api/SampleData/Save\" RemoveUrl=\"api/SampleData/Remove\" />\n            </SfUploader>\n            @code {\n                Dictionary<string, object> HtmlAttribute = new Dictionary<string, object>() {\n                {\"disabled\",\"true\" }\n                };\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets an additional input attributes such as disabled, value, and more to add the input file element.\n            </summary>\n            <value>\n            A dictionary of additional input attributes for the root element of the component.\n            </value>\n            <remarks>\n            If you configured both property and equivalent input attribute, the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"MaxFileSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the maximum allowed file size to be uploaded in bytes.\n            </summary>\n            <value>\n            Accepts the double value representing that the maximum file size for the component. The default value is <c>30000000</c>.\n            </value>\n            <remarks>\n            The property used to make sure that you cannot upload too large files.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MaxFileSize","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"MinFileSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the minimum file size to be uploaded in bytes.\n            </summary>\n            <value>\n            Accepts the double value representing that the minimum file size for the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MinFileSize","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"AllowMultiple","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the multiple files can be browsed or dropped simultaneously in the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the multiple file options can be enabled. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowMultiple","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SequentialUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" /> component is processing the multiple files simultaneously or not.\n            </summary>\n            <value>\n            <c>true</c>, if the sequential upload option can be enabled in component. Otherwise, <c>false</c>. \n            </value>\n            <remarks>\n            If SequentialUpload property is enabled, the file upload component performs the upload one after the other.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"SequentialUpload","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowFileList","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the file list can be rendered or not.\n            </summary>\n            <value>\n            <c>true</c>, if the file list should be shown. otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n            <remarks>\n            The property used to prevent default file list and design own template for file list using <see cref=\"P:Syncfusion.Blazor.Inputs.SfUploader.Template\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowFileList","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the tab order of the component.\n            </summary>\n            <value>\n            An integer value representing the tab index of Uploader component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.FileInfo>","Documentation":"\n            <summary>\n            Gets or sets a template that is used to customize the content of each file in the list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            @inject HttpClient Http\n            <SfUploader ID=\"UploadFiles\" DropEffect=\"DropEffect.Copy\">\n                <UploaderAsyncSettings SaveUrl=\"api/SampleData/Save\" RemoveUrl=\"api/SampleData/Remove\"/>\n                <UploaderTemplates>\n                    <Template Context=\"HttpContext\">\n                        <div style=\"padding: 7px;\">\n                            <h5 title=\"@(HttpContext.Name)\">@(HttpContext.Name)</h5>\n                            <i>@(HttpContext.Size) Bytes</i>\n                        </div>\n                    </Template>\n                </UploaderTemplates>\n            </SfUploader>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Inputs.FileInfo>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfUploader","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":980073224,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfUploader.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfUploader"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfUploader","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-375721900,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfUploader.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfUploader"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfUploader","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1446473526,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfUploader.Template","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Gets or sets a template that is used to customize the content of each file in the list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            @inject HttpClient Http\n            <SfUploader ID=\"UploadFiles\" DropEffect=\"DropEffect.Copy\">\n                <UploaderAsyncSettings SaveUrl=\"api/SampleData/Save\" RemoveUrl=\"api/SampleData/Remove\"/>\n                <UploaderTemplates>\n                    <Template Context=\"HttpContext\">\n                        <div style=\"padding: 7px;\">\n                            <h5 title=\"@(HttpContext.Name)\">@(HttpContext.Name)</h5>\n                            <i>@(HttpContext.Size) Bytes</i>\n                        </div>\n                    </Template>\n                </UploaderTemplates>\n            </SfUploader>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"SfUploader"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader.Template","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfUploader","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1946910738,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfUploader.Template","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Gets or sets a template that is used to customize the content of each file in the list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            @inject HttpClient Http\n            <SfUploader ID=\"UploadFiles\" DropEffect=\"DropEffect.Copy\">\n                <UploaderAsyncSettings SaveUrl=\"api/SampleData/Save\" RemoveUrl=\"api/SampleData/Remove\"/>\n                <UploaderTemplates>\n                    <Template Context=\"HttpContext\">\n                        <div style=\"padding: 7px;\">\n                            <h5 title=\"@(HttpContext.Name)\">@(HttpContext.Name)</h5>\n                            <i>@(HttpContext.Size) Bytes</i>\n                        </div>\n                    </Template>\n                </UploaderTemplates>\n            </SfUploader>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Inputs.SfUploader"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader.Template","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfUploader","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-537955162,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Uploader Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderAsyncSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ChunkSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the ChunkSize to split the large file into chunks, and upload it to the server in a sequential order.\n            <para>If the ChunkSize property has value, the Uploader enables the chunk upload by default.\n            It must be specified in bytes value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChunkSize","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the URL of remove action that receives the file information and handle the remove operation in server.\n            <para>The remove action type must be POST request and define \"RemoveFileNames\" attribute to get file information that will be removed.\n            This property is optional.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"RetryAfterDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the delay time in milliseconds that the automatic retry happens after the delay.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RetryAfterDelay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"RetryCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the number of retries that the Uploader can perform on the file failed to upload.\n            By default, the Uploader set 3 as maximum retries. This property must be specified to prevent infinity looping.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RetryCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"SaveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the URL of save action that will receive the upload files and save in the server.\n            <para>The save action type must be POST request and define the argument as same input name used to render the component.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SaveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderAsyncSettings"}},{"HashCode":1415792805,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Uploader Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ChunkSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the ChunkSize to split the large file into chunks, and upload it to the server in a sequential order.\n            <para>If the ChunkSize property has value, the Uploader enables the chunk upload by default.\n            It must be specified in bytes value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChunkSize","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the URL of remove action that receives the file information and handle the remove operation in server.\n            <para>The remove action type must be POST request and define \"RemoveFileNames\" attribute to get file information that will be removed.\n            This property is optional.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"RetryAfterDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the delay time in milliseconds that the automatic retry happens after the delay.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RetryAfterDelay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"RetryCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the number of retries that the Uploader can perform on the file failed to upload.\n            By default, the Uploader set 3 as maximum retries. This property must be specified to prevent infinity looping.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RetryCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"SaveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the URL of save action that will receive the upload files and save in the server.\n            <para>The save action type must be POST request and define the argument as same input name used to render the component.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SaveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderAsyncSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1168647458,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderAsyncSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderAsyncSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-423544305,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderAsyncSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":704600276,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderButtons","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Customize the default text of browse, clear, and upload buttons with plain text.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Browse","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to browse button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Browse","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Clear","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clear","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Upload","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to upload button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Upload","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderButtons","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderButtons"}},{"HashCode":-311484992,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderButtons","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Customize the default text of browse, clear, and upload buttons with plain text.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Browse","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to browse button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Browse","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Clear","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clear","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Upload","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to upload button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Upload","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderButtons","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderButtons","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-211548240,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderButtons","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1425082382,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderButtons","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1546650750,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderEvents","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Uploader Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ActionCompleteEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after all the selected files has processed to upload successfully or failed to server.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ActionCompleteEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before removing the file from the server.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"BeforeRemove","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeUpload","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeUploadEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the uploading process starts.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can pass additional data with the file uploading request in the <see cref=\"P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.CustomFormData\" /> argument.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            <SfUploader>\n                <UploaderEvents BeforeUpload=\"@BeforeUploadHandler\"/>\n            </SfUploader>\n            @code {\n            public void BeforeUploadHandler(BeforeUploadEventArgs args) {\n               var accessToken = \"Authorization_token\";\n               args.CurrentRequest = new List<object> { new { Authorization = accessToken } };\n            }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"BeforeUpload","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeUploadEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnCancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.CancelEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked if the chunk file uploading action is canceled.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnCancel","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.CancelEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of the selected files is uploaded for each file.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event is triggered when the user selects a new file in the input file element.\n            To read the contents of the uploaded file, call the `OpenReadStream()` method of the `IBrowserFile` interface, \n            which returns a stream that you can use to read the file data.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            <SfUploader AutoUpload=\"true\">\n                <UploaderEvents ValueChange=\"@OnChange\"></UploaderEvents>\n            </SfUploader>\n            @code{\n                private async Task OnChange(UploadChangeEventArgs args)\n                {\n                    try\n                    {\n                        foreach (var file in args.Files)\n                        {\n                            var path = @\"D:\\\" + file.FileInfo.Name;\n                            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);\n                            await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);\n                            filestream.Close();\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                    }\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.UploadChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FailureEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked if the chunk file fails to upload.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnChunkFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FailureEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkSuccess","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SuccessEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when every chunk file is uploaded successfully.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnChunkSuccess","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SuccessEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkUploadStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when every chunk upload process gets started.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            Pass the additional data with the file uploading request in the <see cref=\"P:Syncfusion.Blazor.Inputs.UploadingEventArgs.CustomFormData\" /> argument.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            <SfUploader ID=\"UploadFiles\">\n                <UploaderAsyncSettings SaveUrl=\"api/SampleData/Save\" RemoveUrl=\"api/SampleData/Remove\" ChunkSize=\"50000\" />\n                <UploaderEvents OnChunkUploadStart=\"@ChunkUploadStartHandler\" />\n            </SfUploader>\n            @code {\n            public void ChunkUploadStartHandler(UploadingEventArgs args) {\n               var accessToken = \"Authorization_token\";\n               args.CurrentRequest = new List<object> { new { Authorization = accessToken } };\n            }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnChunkUploadStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.UploadingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClear","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ClearingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked before clearing the items in the file list using the <c>Clear</c> button.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnClear","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ClearingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" /> component is created.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FailureEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the file uploading or removal request fails.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FailureEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFileListRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FileListRenderingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked before rendering each file item. It helps to customize specific file item structures.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnFileListRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FileListRenderingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Paused","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked when the chunk file uploading is paused.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Paused","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Progressing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ProgressEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked when a file is uploading.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Progressing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ProgressEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.RemovingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked on removing the uploaded file.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event used to be confirmed before removing the file from the server.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnRemove","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.RemovingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResume","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Documentation":"\n            <summary>\n            Fires if resume the paused chunk file upload.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnResume","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"FileSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SelectedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked after selecting or dropping the files in the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" />.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"FileSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SelectedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Success","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SuccessEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked when uploading or removing files is successful.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Success","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SuccessEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnUploadStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked when the upload process starts. This event is used to add a parameter to the upload request.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnUploadStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.UploadingEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderEvents","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderEvents"}},{"HashCode":-51468932,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderEvents","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Uploader Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ActionCompleteEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after all the selected files has processed to upload successfully or failed to server.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ActionCompleteEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before removing the file from the server.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"BeforeRemove","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeUpload","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeUploadEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the uploading process starts.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can pass additional data with the file uploading request in the <see cref=\"P:Syncfusion.Blazor.Inputs.BeforeUploadEventArgs.CustomFormData\" /> argument.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            <SfUploader>\n                <UploaderEvents BeforeUpload=\"@BeforeUploadHandler\"/>\n            </SfUploader>\n            @code {\n            public void BeforeUploadHandler(BeforeUploadEventArgs args) {\n               var accessToken = \"Authorization_token\";\n               args.CurrentRequest = new List<object> { new { Authorization = accessToken } };\n            }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"BeforeUpload","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.BeforeUploadEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnCancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.CancelEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked if the chunk file uploading action is canceled.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnCancel","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.CancelEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of the selected files is uploaded for each file.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event is triggered when the user selects a new file in the input file element.\n            To read the contents of the uploaded file, call the `OpenReadStream()` method of the `IBrowserFile` interface, \n            which returns a stream that you can use to read the file data.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            <SfUploader AutoUpload=\"true\">\n                <UploaderEvents ValueChange=\"@OnChange\"></UploaderEvents>\n            </SfUploader>\n            @code{\n                private async Task OnChange(UploadChangeEventArgs args)\n                {\n                    try\n                    {\n                        foreach (var file in args.Files)\n                        {\n                            var path = @\"D:\\\" + file.FileInfo.Name;\n                            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);\n                            await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);\n                            filestream.Close();\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(ex.Message);\n                    }\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.UploadChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FailureEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked if the chunk file fails to upload.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnChunkFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FailureEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkSuccess","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SuccessEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when every chunk file is uploaded successfully.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnChunkSuccess","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SuccessEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkUploadStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when every chunk upload process gets started.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            Pass the additional data with the file uploading request in the <see cref=\"P:Syncfusion.Blazor.Inputs.UploadingEventArgs.CustomFormData\" /> argument.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Inputs\n            <SfUploader ID=\"UploadFiles\">\n                <UploaderAsyncSettings SaveUrl=\"api/SampleData/Save\" RemoveUrl=\"api/SampleData/Remove\" ChunkSize=\"50000\" />\n                <UploaderEvents OnChunkUploadStart=\"@ChunkUploadStartHandler\" />\n            </SfUploader>\n            @code {\n            public void ChunkUploadStartHandler(UploadingEventArgs args) {\n               var accessToken = \"Authorization_token\";\n               args.CurrentRequest = new List<object> { new { Authorization = accessToken } };\n            }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnChunkUploadStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.UploadingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClear","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ClearingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked before clearing the items in the file list using the <c>Clear</c> button.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnClear","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ClearingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" /> component is created.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FailureEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the file uploading or removal request fails.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FailureEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFileListRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FileListRenderingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked before rendering each file item. It helps to customize specific file item structures.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnFileListRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.FileListRenderingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Paused","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked when the chunk file uploading is paused.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Paused","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Progressing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ProgressEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked when a file is uploading.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Progressing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.ProgressEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.RemovingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked on removing the uploaded file.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event used to be confirmed before removing the file from the server.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnRemove","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.RemovingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResume","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Documentation":"\n            <summary>\n            Fires if resume the paused chunk file upload.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnResume","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"FileSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SelectedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked after selecting or dropping the files in the <see cref=\"T:Syncfusion.Blazor.Inputs.SfUploader\" />.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"FileSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SelectedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Success","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SuccessEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked when uploading or removing files is successful.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Success","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.SuccessEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnUploadStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback invoked when the upload process starts. This event is used to add a parameter to the upload request.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnUploadStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.UploadingEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderEvents","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":906548895,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderFiles","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderFiles"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderFiles","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderFiles"}},{"HashCode":1412040786,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderFiles","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderFiles"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderFiles","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderFiles","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1604242610,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderFiles"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderFiles","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":188888009,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderFiles"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderFiles","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1260311499,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderUploadedFiles"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the name of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Size","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the size of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Size","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the type of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderUploadedFiles"}},{"HashCode":-1968089224,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the name of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Size","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the size of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Size","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the type of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderUploadedFiles","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-448842084,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderUploadedFiles"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderUploadedFiles","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-26479347,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderUploadedFiles","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":969321156,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n             <summary>\n             Specifies the content that has to be passed.\n             </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.FileInfo>","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Inputs.FileInfo>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderTemplates"}},{"HashCode":569088144,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n             <summary>\n             Specifies the content that has to be passed.\n             </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.FileInfo>","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Inputs.FileInfo>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-519228512,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n             <summary>\n             Specifies the content that has to be passed.\n             </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1614106442,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n             <summary>\n             Specifies the content that has to be passed.\n             </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2119615738,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates.Template","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"UploaderTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates.Template","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1248883993,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates.Template","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Inputs.UploaderTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates.Template","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"UploaderTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1321615475,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs._Imports","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":980165608,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs._Imports","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":361324325,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfInputBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BindClearBtnEvents","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the clear gets clicked.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"BindClearBtnEvents","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BindClearBtnTouchEvents","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the clear icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"BindClearBtnTouchEvents","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseDownOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin down gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseDownOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchDownOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin down icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchDownOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseUpOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin up gets clicked.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseUpOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchUpOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin up icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchUpOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseIconHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Documentation":"\n            <summary>\n            Triggers when the icon gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseIconHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchIconHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Documentation":"\n            <summary>\n            Triggers when the icon get touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchIconHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseContainerHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseContainerHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnContainerBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets focus out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnContainerBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnContainerFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets focused.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnContainerFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ContainerKeypress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container key pressed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ContainerKeypress","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"Autocomplete","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets whether the browser is allowed to automatically enter or select a value for the TextBox.\n            <para>By default, autocomplete is enabled for TextBox.</para>\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>On</term>\n            <description>Specifies that autocomplete is enabled</description>\n            </item>\n            <item>\n            <term>Off</term>\n            <description>Specifies that autocomplete is disabled.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autocomplete","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" />. The <see cref=\"P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the TextBox component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the TextBox component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n              <SfTextBox FloatLabelType=\"FloatLabelType.Auto\" Placeholder=\"Enter a value\"></SfTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the TextBox component.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfTextBox HtmlAttributes=\"@CustomAttribute\">\n            </SfTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Enter your name\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional inputs attributes such as disabled, value, and more that will be applied to the TextBox component.        /// </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfTextBox Placeholder=\"Enter the PIN\" @attributes=\"@CustomAttribute\">\n            </SfTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"maxlength\", \"4\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Multiline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enables or disables the multiline on the TextBox.\n            The TextBox changes from a single line to multiline when enabling this multiline mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Multiline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsReadOnlyInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value for dropdownlist default readonly property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsReadOnlyInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the behavior of the TextBox such as text, password, email, and more.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ContainerAttr","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Specifies the container attrubute of Input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContainerAttr","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Buttons","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"\n            <summary>\n            Specifies the icon of the TextBox component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Buttons","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>"}},{"Kind":"Components.Component","Name":"PrependButtons","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"\n            <summary>\n            Specifies the prepend icon of the TextBox component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PrependButtons","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>"}},{"Kind":"Components.Component","Name":"SpinButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enable or disable the spin button on the component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"SpinButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ContainerClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the class value that is appended to container of TextBox.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ContainerClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsValueTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the value template is displayed in TextBox.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsValueTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RootClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or Set the component class to element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RootClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ClickStopPropagation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the click actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ClickStopPropagation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MouseDowSpinnerPrevent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the mouse actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseDowSpinnerPrevent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PreventIconHandler","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the icon actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PreventIconHandler","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PreventTouchIconHandler","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to prevent the touch action in icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PreventTouchIconHandler","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MousePreventContainer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the container actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MousePreventContainer","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsShowSpinnerOnClear","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the spinner show on clear icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsShowSpinnerOnClear","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsShowSpinnerOnIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the spinner show on dropdown icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsShowSpinnerOnIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"SfInputBase"}},{"HashCode":-1146306349,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BindClearBtnEvents","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the clear gets clicked.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"BindClearBtnEvents","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BindClearBtnTouchEvents","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the clear icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"BindClearBtnTouchEvents","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseDownOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin down gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseDownOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchDownOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin down icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchDownOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseUpOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin up gets clicked.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseUpOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchUpOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin up icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchUpOnSpinner","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseIconHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Documentation":"\n            <summary>\n            Triggers when the icon gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseIconHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchIconHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Documentation":"\n            <summary>\n            Triggers when the icon get touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchIconHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseContainerHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseContainerHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnContainerBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets focus out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnContainerBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnContainerFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets focused.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnContainerFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ContainerKeypress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container key pressed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ContainerKeypress","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"Autocomplete","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets whether the browser is allowed to automatically enter or select a value for the TextBox.\n            <para>By default, autocomplete is enabled for TextBox.</para>\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>On</term>\n            <description>Specifies that autocomplete is enabled</description>\n            </item>\n            <item>\n            <term>Off</term>\n            <description>Specifies that autocomplete is disabled.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autocomplete","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the <see cref=\"T:Syncfusion.Blazor.Inputs.SfTextBox\" />. The <see cref=\"P:Syncfusion.Blazor.Inputs.Internal.SfInputBase.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the TextBox component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the TextBox component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n              <SfTextBox FloatLabelType=\"FloatLabelType.Auto\" Placeholder=\"Enter a value\"></SfTextBox>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the TextBox component.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfTextBox HtmlAttributes=\"@CustomAttribute\">\n            </SfTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Enter your name\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional inputs attributes such as disabled, value, and more that will be applied to the TextBox component.        /// </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfTextBox Placeholder=\"Enter the PIN\" @attributes=\"@CustomAttribute\">\n            </SfTextBox>\n            @code{\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"maxlength\", \"4\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Multiline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enables or disables the multiline on the TextBox.\n            The TextBox changes from a single line to multiline when enabling this multiline mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Multiline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsReadOnlyInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value for dropdownlist default readonly property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsReadOnlyInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the behavior of the TextBox such as text, password, email, and more.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ContainerAttr","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Specifies the container attrubute of Input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContainerAttr","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Buttons","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"\n            <summary>\n            Specifies the icon of the TextBox component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Buttons","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>"}},{"Kind":"Components.Component","Name":"PrependButtons","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"\n            <summary>\n            Specifies the prepend icon of the TextBox component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PrependButtons","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::System.String>"}},{"Kind":"Components.Component","Name":"SpinButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enable or disable the spin button on the component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"SpinButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ContainerClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the class value that is appended to container of TextBox.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ContainerClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsValueTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the value template is displayed in TextBox.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsValueTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RootClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or Set the component class to element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RootClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ClickStopPropagation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the click actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ClickStopPropagation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MouseDowSpinnerPrevent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the mouse actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseDowSpinnerPrevent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PreventIconHandler","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the icon actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PreventIconHandler","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PreventTouchIconHandler","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to prevent the touch action in icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PreventTouchIconHandler","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MousePreventContainer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the container actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MousePreventContainer","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsShowSpinnerOnClear","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the spinner show on clear icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsShowSpinnerOnClear","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsShowSpinnerOnIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the spinner show on dropdown icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsShowSpinnerOnIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"SfInputBase","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1165671127,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfInputBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"SfInputBase","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1561669981,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.Internal.SfInputBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"SfInputBase","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1806301061,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPalette","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorPalette"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPalette","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPalette"}},{"HashCode":-1270451951,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPalette","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.ColorPalette"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPalette","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPalette","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":119116811,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorPicker"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPicker","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPicker"}},{"HashCode":1253724351,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.ColorPicker"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPicker","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1649990635,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorPickerBase"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPickerBase"}},{"HashCode":-1690983440,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPickerBase","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1161098925,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorPickerTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.InputChange>","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.Internal.InputChange>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPickerTextBox"}},{"HashCode":1895024538,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.InputChange>","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Inputs.Internal.InputChange>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"ColorPickerTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-767311221,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to render ticks to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderTicksRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Public fiels ChildContent.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Slider.Internal","Common.TypeNameIdentifier":"SliderTicksRender"}},{"HashCode":-525289242,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to render ticks to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Public fiels ChildContent.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Slider.Internal","Common.TypeNameIdentifier":"SliderTicksRender","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-914820176,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <exclude />\n            <summary>\n            Public fiels ChildContent.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderTicksRender"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Slider.Internal","Common.TypeNameIdentifier":"SliderTicksRender","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-271121716,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <exclude />\n            <summary>\n            Public fiels ChildContent.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Slider.Internal","Common.TypeNameIdentifier":"SliderTicksRender","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":887391790,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Partial class TickElement.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TickElement"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ClassName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ClassName.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Styles","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the Styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Styles","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the Value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"FormattedValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the FormattedValue.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FormattedValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsSmallTick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the IsSmallTick.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsSmallTick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Slider.Internal","Common.TypeNameIdentifier":"TickElement"}},{"HashCode":-1416120170,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Partial class TickElement.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ClassName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ClassName.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Styles","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the Styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Styles","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the Value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"FormattedValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the FormattedValue.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FormattedValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsSmallTick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the IsSmallTick.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsSmallTick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Slider.Internal","Common.TypeNameIdentifier":"TickElement","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1789588623,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.EditForm","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditForm"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"\n            <summary>\n            Supplies the edit context explicitly. If using this parameter, do not\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditContext","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext"}},{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the top-level model object for the form. An edit context will\n            be constructed for this model. If using this parameter, do not also supply\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n             <summary>\n             A callback that will be invoked when the form is submitted.\n            \n             If using this parameter, you are responsible for triggering any validation\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"OnSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValidSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInvalidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnInvalidSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"EditForm"}},{"HashCode":2087210361,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.EditForm","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.EditForm"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"\n            <summary>\n            Supplies the edit context explicitly. If using this parameter, do not\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditContext","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.EditContext"}},{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the top-level model object for the form. An edit context will\n            be constructed for this model. If using this parameter, do not also supply\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n             <summary>\n             A callback that will be invoked when the form is submitted.\n            \n             If using this parameter, you are responsible for triggering any validation\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"OnSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValidSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInvalidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnInvalidSubmit","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"EditForm","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2063719819,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"EditForm"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"EditForm","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":113815998,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.EditForm"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"EditForm","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-916422635,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputCheckbox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Boolean>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputCheckbox"}},{"HashCode":1793156627,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Boolean>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.Boolean>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputCheckbox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2103100738,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing date values.\n            Supported types are <see cref=\"T:System.DateTime\" /> and <see cref=\"T:System.DateTimeOffset\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputDate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Microsoft.AspNetCore.Components.Forms.InputDateType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the type of HTML input to be rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.InputDateType"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputDate","Components.GenericTyped":"True"}},{"HashCode":596078321,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing date values.\n            Supported types are <see cref=\"T:System.DateTime\" /> and <see cref=\"T:System.DateTimeOffset\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputDate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Microsoft.AspNetCore.Components.Forms.InputDateType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the type of HTML input to be rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Forms.InputDateType"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputDate","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-950800962,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputFile","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputFile"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputFile","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputFile"}},{"HashCode":-51883978,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputFile","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputFile"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputFile","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputFile","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":152097514,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing numeric values.\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputNumber"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputNumber","Components.GenericTyped":"True"}},{"HashCode":-899228490,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing numeric values.\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputNumber"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputNumber","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":247676274,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component used for selecting a value from a group of choices.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadio"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of this input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the parent input radio group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadio","Components.GenericTyped":"True"}},{"HashCode":-245082154,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component used for selecting a value from a group of choices.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadio"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of this input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the parent input radio group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadio","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-3486518,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadioGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.GenericTyped":"True"}},{"HashCode":-1446222502,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1960512142,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"InputRadioGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1920215596,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-962036311,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A dropdown selection component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.GenericTyped":"True"}},{"HashCode":1775905808,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A dropdown selection component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-924391862,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"InputSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1469997211,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.InputSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":497607057,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputText"}},{"HashCode":-1896998253,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputText","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":706994615,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputTextArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputTextArea"}},{"HashCode":-1458327790,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputTextArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.String>>"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputTextArea","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1409346984,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValidationMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"For","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"ValidationMessage","Components.GenericTyped":"True"}},{"HashCode":-539041457,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"For","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"ValidationMessage","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1642247267,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValidationSummary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Gets or sets the model to produce the list of validation messages for.\n            When specified, this lists all errors that are associated with the model instance.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"ValidationSummary"}},{"HashCode":591741979,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Gets or sets the model to produce the list of validation messages for.\n            When specified, this lists all errors that are associated with the model instance.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"ValidationSummary","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1321625040,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            After navigating from one page to another, sets focus to an element\n            matching a CSS selector. This can be used to build an accessible\n            navigation system compatible with screen readers.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FocusOnNavigate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","Documentation":"\n            <summary>\n            Gets or sets the route data. This can be obtained from an enclosing\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"Selector","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS selector describing the element to be focused after\n            navigation between pages.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selector","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"FocusOnNavigate"}},{"HashCode":-1759400738,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            After navigating from one page to another, sets focus to an element\n            matching a CSS selector. This can be used to build an accessible\n            navigation system compatible with screen readers.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","Documentation":"\n            <summary>\n            Gets or sets the route data. This can be obtained from an enclosing\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"Selector","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS selector describing the element to be focused after\n            navigation between pages.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selector","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"FocusOnNavigate","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2081204057,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.NavigationLock","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that can be used to intercept navigation events. \n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NavigationLock"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBeforeInternalNavigation","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.LocationChangingContext>","Documentation":"\n            <summary>\n            Gets or sets a callback to be invoked when an internal navigation event occurs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeInternalNavigation","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.LocationChangingContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ConfirmExternalNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether a browser dialog should prompt the user to either confirm or cancel\n            external navigations.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ConfirmExternalNavigation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavigationLock","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"NavigationLock"}},{"HashCode":-1809608004,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.NavigationLock","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that can be used to intercept navigation events. \n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.NavigationLock"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBeforeInternalNavigation","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.LocationChangingContext>","Documentation":"\n            <summary>\n            Gets or sets a callback to be invoked when an internal navigation event occurs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeInternalNavigation","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.LocationChangingContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ConfirmExternalNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether a browser dialog should prompt the user to either confirm or cancel\n            external navigations.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ConfirmExternalNavigation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavigationLock","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"NavigationLock","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1721809178,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.NavLink","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that renders an anchor tag, automatically toggling its 'active'\n            class based on whether its 'href' matches the current URI.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ActiveClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class name applied to the NavLink when the\n            current route matches the NavLink href.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActiveClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be added to the generated\n            <c>a</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value representing the URL matching behavior.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Match","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"NavLink"}},{"HashCode":-1182313963,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.NavLink","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that renders an anchor tag, automatically toggling its 'active'\n            class based on whether its 'href' matches the current URI.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.NavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ActiveClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class name applied to the NavLink when the\n            current route matches the NavLink href.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActiveClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be added to the generated\n            <c>a</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value representing the URL matching behavior.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Match","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Routing.NavLinkMatch"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"NavLink","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-740824051,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"NavLink"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"NavLink","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1903137250,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Routing.NavLink"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"NavLink","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1246271716,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeadContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadContent"}},{"HashCode":-996503938,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.HeadContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1608831631,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HeadContent"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1521540536,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.HeadContent"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-628269752,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadOutlet","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeadOutlet"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadOutlet","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadOutlet"}},{"HashCode":1646289862,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadOutlet","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.HeadOutlet"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadOutlet","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"HeadOutlet","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2129736942,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.PageTitle","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PageTitle"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"PageTitle"}},{"HashCode":943926180,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.PageTitle","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.PageTitle"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"PageTitle","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1161311501,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"PageTitle"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"PageTitle","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2073571043,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.PageTitle"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"PageTitle","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1113147290,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Captures errors thrown from its child content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ErrorContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Exception>","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ErrorContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Exception>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"MaximumErrorCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The maximum number of errors that can be handled. If more errors are received,\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaximumErrorCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary"}},{"HashCode":719579976,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Captures errors thrown from its child content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ErrorContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Exception>","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ErrorContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::System.Exception>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"MaximumErrorCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The maximum number of errors that can be handled. If more errors are received,\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaximumErrorCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-252057281,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ErrorBoundary"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-334595117,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":720802434,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorContent","ParentTag":"ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ErrorContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1066138983,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorContent","ParentTag":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ErrorContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"ErrorBoundary","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-20666644,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides functionality for rendering a virtualized list of items.\n            </summary>\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ItemSize","TypeName":"System.Single","Documentation":"\n            <summary>\n            Gets the size of each item in pixels. Defaults to 50px.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSize","Common.GloballyQualifiedTypeName":"global::System.Single"}},{"Kind":"Components.Component","Name":"ItemsProvider","TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Documentation":"\n            <summary>\n            Gets or sets the function providing items to the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsProvider","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.ICollection<TItem>","Documentation":"\n            <summary>\n            Gets or sets the fixed item source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.ICollection<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OverscanCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OverscanCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"SpacerElement","TypeName":"System.String","Documentation":"\n             <summary>\n             Gets or sets the tag name of the HTML element that will be used as the virtualization spacer.\n             One such element will be rendered before the visible items, and one more after them, using\n             an explicit \"height\" style to control the scroll range.\n            \n             The default value is \"div\". If you are placing the <see cref=\"T:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1\" /> instance inside\n             an element that requires a specific child tag name, consider setting that here. For example when\n             rendering inside a \"tbody\", consider setting <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.SpacerElement\" /> to the value \"tr\".\n             </summary>\n        ","Metadata":{"Common.PropertyName":"SpacerElement","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.GenericTyped":"True"}},{"HashCode":1446060996,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides functionality for rendering a virtualized list of items.\n            </summary>\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ItemSize","TypeName":"System.Single","Documentation":"\n            <summary>\n            Gets the size of each item in pixels. Defaults to 50px.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSize","Common.GloballyQualifiedTypeName":"global::System.Single"}},{"Kind":"Components.Component","Name":"ItemsProvider","TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Documentation":"\n            <summary>\n            Gets or sets the function providing items to the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsProvider","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.ICollection<TItem>","Documentation":"\n            <summary>\n            Gets or sets the fixed item source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.ICollection<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OverscanCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OverscanCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"SpacerElement","TypeName":"System.String","Documentation":"\n             <summary>\n             Gets or sets the tag name of the HTML element that will be used as the virtualization spacer.\n             One such element will be rendered before the visible items, and one more after them, using\n             an explicit \"height\" style to control the scroll range.\n            \n             The default value is \"div\". If you are placing the <see cref=\"T:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1\" /> instance inside\n             an element that requires a specific child tag name, consider setting that here. For example when\n             rendering inside a \"tbody\", consider setting <see cref=\"P:Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize`1.SpacerElement\" /> to the value \"tr\".\n             </summary>\n        ","Metadata":{"Common.PropertyName":"SpacerElement","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":938082833,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1328007459,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1573826946,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemContent","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2071423432,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemContent","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1159723309,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Placeholder","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Placeholder' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1105006503,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Placeholder","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Placeholder' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web.Virtualization","Common.TypeNameIdentifier":"Virtualize","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1695430062,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListViewEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionEventsArgs>","Documentation":"\n            <summary>\n            Triggers when each ListView action begins.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ActionEventsArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionEventsArgs>","Documentation":"\n            <summary>\n            Triggers when each ListView action is completed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ActionEventsArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionFailureEventsArgs>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ActionFailureEventsArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when a list item in the component is clicked.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Clicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ClickEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBack","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.BackEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the back icon is clicked in the nested list item.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnBack","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.BackEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewEvents","Components.GenericTyped":"True"}},{"HashCode":-1956979223,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.ListViewEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionEventsArgs>","Documentation":"\n            <summary>\n            Triggers when each ListView action begins.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ActionEventsArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionEventsArgs>","Documentation":"\n            <summary>\n            Triggers when each ListView action is completed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ActionEventsArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionFailureEventsArgs>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ActionFailureEventsArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when a list item in the component is clicked.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Clicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.ClickEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBack","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.BackEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the back icon is clicked in the nested list item.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnBack","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Lists.BackEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-245676872,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure handlers to handle the field settings with the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListViewFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Child` property is used for nested navigation of listed items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the enabled state of the ListView component.\n            You can disable the component using this property by setting its value as false.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            The `GroupBy` property is used to wraps the ListView elements into a group based on the field value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            The `HtmlAttributes` allows additional attributes such as id, class, etc., and\n             accepts n number of attributes in a key-value pair format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            The `IconCss` is used to customize the icon fo the list items dynamically.\n             You can add a specific image to the icons using the `iconCss` property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id field mapped in data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            The `IsChecked` property is used to check whether the list items are in a checked state or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Text` property is used to map the text value from the data source for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Tooltip` is used to display the information about the target element while hovering on list items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewFieldSettings","Components.GenericTyped":"True"}},{"HashCode":487283863,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure handlers to handle the field settings with the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.ListViewFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Child` property is used for nested navigation of listed items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the enabled state of the ListView component.\n            You can disable the component using this property by setting its value as false.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            The `GroupBy` property is used to wraps the ListView elements into a group based on the field value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            The `HtmlAttributes` allows additional attributes such as id, class, etc., and\n             accepts n number of attributes in a key-value pair format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            The `IconCss` is used to customize the icon fo the list items dynamically.\n             You can add a specific image to the icons using the `iconCss` property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id field mapped in data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            The `IsChecked` property is used to check whether the list items are in a checked state or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Text` property is used to map the text value from the data source for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Tooltip` is used to display the information about the target element while hovering on list items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewFieldSettings","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2132704140,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure templates of the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewTemplates<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            The ListView component supports to customize the content of each list items with the help of Template property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TValue>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the ListView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of HeaderTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.GenericTyped":"True"}},{"HashCode":-1970153887,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure templates of the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewTemplates<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            The ListView component supports to customize the content of each list items with the help of Template property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TValue>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the ListView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of HeaderTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1544532004,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView component supports to customize the content of each list items with the help of Template property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.Template","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2138154496,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView component supports to customize the content of each list items with the help of Template property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Lists.ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.Template","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":314807455,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the ListView.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1184793919,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the ListView.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.Lists.ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":651800817,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of HeaderTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"ListViewTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1076512546,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of HeaderTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Lists.ListViewTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"ListViewTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":727207352,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The SfListView control represents the data in interactive hierarchical structure interface across different layouts or views,\n            that also has features such as data-binding, template, grouping and virtualization.\n            </summary>\n            <summary>\n            Component for executing complex list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n            <summary>\n            Configure member properties of the ListView component.\n            </summary>\n            <summary>\n            The SfListView control represents the data in interactive hierarchical structure interface across different layouts or views,\n            that also has features such as data-binding, template, grouping and virtualization.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfListView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.SfListView<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            The `ID` property is used as a key to identify our element.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Lists.AnimationSettings","Documentation":"\n            <summary>\n            The `Animation` property provides an option to apply different\n             animations to the ListView component.\n            </summary>\n            <value>\n            Animation settings such as effect, duration and easing.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Animation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.AnimationSettings"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            The `CheckBoxPosition` is used to set the position of the check box in a list item.\n            By default, the `checkBoxPosition` is Left, which will appear before the text content in a list item.\n            </summary>\n            <value>\n            Set the position of the check box in a list item.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            The `CssClass` property is used to add a user-preferred class name in the root element of the ListView,\n             using which you can customize the component (both CSS and functionality customization).\n            </summary>\n            <value>\n            Accepts the CSS class string separated by space to customize the appearance of component. The default value is empty.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            The `DataSource` provides the data to render the ListView component which is mapped with the fields of ListView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `Enabled` is set to true, the list items will be enabled. \n            You can disable the component using this property by setting its value as false.\n            </summary>\n            <value>\n            <c>true</c>, allows the user to interact with component. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n            <value>\n            <c>true</c>, if the persistence can be enabled. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled. Otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `EnableVirtualization` is set to true, the ListView’s performance will improve when loading a large amount of data.\n            </summary>\n            <value>\n            <c>true</c>, if the virtualization can be enabled. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HeaderTitle","TypeName":"System.String","Documentation":"\n            <summary>\n            The `HeaderTitle` is used to set the title of the ListView component.\n            </summary>\n            <value>\n            Accepts the string value. The default value is empty.\n            </value>\n        ","Metadata":{"Common.PropertyName":"HeaderTitle","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the height of the ListView component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            The `HtmlAttributes` allows additional attributes such as id, class, etc., and\n             accepts n number of attributes in a key-value pair format.\n            </summary>\n            <value>\n            A dictionary of additional HTML attributes for the root element of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            The `Query` is used to fetch specific data from the data source by using the where and select keywords.\n            </summary>\n            <value>\n            The query used with the `where` and `select` keywords.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"ShowCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowCheckBox` is set to true, the checkbox will  be shown or hidden.\n            </summary>\n            <value>\n            <c>true</c>, if the checkbox should be shown. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowHeader","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowHeader` is set to true, the header of the ListView component will  be shown or hidden.\n            </summary>\n            <value>\n            <c>true</c>, if the header should be shown. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowIcon` is set to true, the icon of the list item will  be shown or hidden.\n            </summary>\n            <value>\n            <c>true</c>, if the icon should be shown. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.Lists.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            The `SortOrder` is used to sort the data source. The available type of sort orders are,\n             `None` - The data source will not be sorted.\n             `Ascending` - The data source will be sorted in ascending order.\n             `Descending` - The data source will be sorted in descending order.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.SortOrder"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the width of the ListView component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Documentation":"\n            <summary>\n            The ListView has an option to custom design the group header title with the help of the groupTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of the headerTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            The ListView supports customizing the content of each list item with the help of template property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TValue>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.GenericTyped":"True"}},{"HashCode":219983366,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The SfListView control represents the data in interactive hierarchical structure interface across different layouts or views,\n            that also has features such as data-binding, template, grouping and virtualization.\n            </summary>\n            <summary>\n            Component for executing complex list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n            <summary>\n            Configure member properties of the ListView component.\n            </summary>\n            <summary>\n            The SfListView control represents the data in interactive hierarchical structure interface across different layouts or views,\n            that also has features such as data-binding, template, grouping and virtualization.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.SfListView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.SfListView<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            The `ID` property is used as a key to identify our element.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Lists.AnimationSettings","Documentation":"\n            <summary>\n            The `Animation` property provides an option to apply different\n             animations to the ListView component.\n            </summary>\n            <value>\n            Animation settings such as effect, duration and easing.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Animation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.AnimationSettings"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            The `CheckBoxPosition` is used to set the position of the check box in a list item.\n            By default, the `checkBoxPosition` is Left, which will appear before the text content in a list item.\n            </summary>\n            <value>\n            Set the position of the check box in a list item.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            The `CssClass` property is used to add a user-preferred class name in the root element of the ListView,\n             using which you can customize the component (both CSS and functionality customization).\n            </summary>\n            <value>\n            Accepts the CSS class string separated by space to customize the appearance of component. The default value is empty.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            The `DataSource` provides the data to render the ListView component which is mapped with the fields of ListView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `Enabled` is set to true, the list items will be enabled. \n            You can disable the component using this property by setting its value as false.\n            </summary>\n            <value>\n            <c>true</c>, allows the user to interact with component. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n            <value>\n            <c>true</c>, if the persistence can be enabled. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled. Otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `EnableVirtualization` is set to true, the ListView’s performance will improve when loading a large amount of data.\n            </summary>\n            <value>\n            <c>true</c>, if the virtualization can be enabled. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HeaderTitle","TypeName":"System.String","Documentation":"\n            <summary>\n            The `HeaderTitle` is used to set the title of the ListView component.\n            </summary>\n            <value>\n            Accepts the string value. The default value is empty.\n            </value>\n        ","Metadata":{"Common.PropertyName":"HeaderTitle","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the height of the ListView component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            The `HtmlAttributes` allows additional attributes such as id, class, etc., and\n             accepts n number of attributes in a key-value pair format.\n            </summary>\n            <value>\n            A dictionary of additional HTML attributes for the root element of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            The `Query` is used to fetch specific data from the data source by using the where and select keywords.\n            </summary>\n            <value>\n            The query used with the `where` and `select` keywords.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"ShowCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowCheckBox` is set to true, the checkbox will  be shown or hidden.\n            </summary>\n            <value>\n            <c>true</c>, if the checkbox should be shown. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowHeader","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowHeader` is set to true, the header of the ListView component will  be shown or hidden.\n            </summary>\n            <value>\n            <c>true</c>, if the header should be shown. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowHeader","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowIcon` is set to true, the icon of the list item will  be shown or hidden.\n            </summary>\n            <value>\n            <c>true</c>, if the icon should be shown. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.Lists.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            The `SortOrder` is used to sort the data source. The available type of sort orders are,\n             `None` - The data source will not be sorted.\n             `Ascending` - The data source will be sorted in ascending order.\n             `Descending` - The data source will be sorted in descending order.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.SortOrder"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the width of the ListView component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Documentation":"\n            <summary>\n            The ListView has an option to custom design the group header title with the help of the groupTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of the headerTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            The ListView supports customizing the content of each list item with the help of template property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TValue>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1616816028,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfListView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1049499403,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Lists.SfListView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-324140040,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the group header title with the help of the groupTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfListView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-903114393,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the group header title with the help of the groupTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.Lists.SfListView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1500158250,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of the headerTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfListView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1352377975,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of the headerTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Lists.SfListView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1501764129,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView supports customizing the content of each list item with the help of template property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"SfListView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.Template","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1243460851,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView supports customizing the content of each list item with the help of template property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Lists.SfListView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.Template","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"SfListView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1694856405,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists._Imports","AssemblyName":"Syncfusion.Blazor.Lists","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":-1957297137,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists._Imports","AssemblyName":"Syncfusion.Blazor.Lists","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Lists","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1158662822,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Component to create list from complex data for executing complex list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateListFromComplex"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"LiElementPosition","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the li element position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementPosition","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ListId","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the id property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListId","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<global::System.Collections.Generic.List<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListIsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListIsGroupItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListIsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListIsItemTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ListClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListClassNames","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ClassList"}},{"Kind":"Components.Component","Name":"SfListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SfListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"CreateListFromComplex","Components.GenericTyped":"True"}},{"HashCode":-1874347024,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Component to create list from complex data for executing complex list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"LiElementPosition","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the li element position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementPosition","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ListId","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the id property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListId","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<global::System.Collections.Generic.List<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListIsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListIsGroupItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListIsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListIsItemTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ListClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListClassNames","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ClassList"}},{"Kind":"Components.Component","Name":"SfListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SfListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"CreateListFromComplex","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":646750237,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CreateListFromComplex"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"CreateListFromComplex","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1607123038,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"CreateListFromComplex","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":903522003,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            /// <summary>\n            Component for executing primitive list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateListFromPrimitive"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"CreateListFromPrimitive","Components.GenericTyped":"True"}},{"HashCode":327242570,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            /// <summary>\n            Component for executing primitive list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"CreateListFromPrimitive","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-368547153,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            A list base component for all the Syncfusion Blazor List dependant components to implement the common functionalities.\n            </summary>\n            <typeparam name=\"T\">The first generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBaseFoundation"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListBaseFoundation","Components.GenericTyped":"True"}},{"HashCode":-571668341,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            A list base component for all the Syncfusion Blazor List dependant components to implement the common functionalities.\n            </summary>\n            <typeparam name=\"T\">The first generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListBaseFoundation","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2119974152,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            List base fields class.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBaseFields"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Child.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in GroupBy.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in HtmlAttributes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IconCss.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IsChecked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IsVisible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsVisible","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Tooltip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListBaseFields","Components.GenericTyped":"True"}},{"HashCode":-1036787768,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            List base fields class.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.ListBaseFields"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Child.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in GroupBy.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in HtmlAttributes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IconCss.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IsChecked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IsVisible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsVisible","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Tooltip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListBaseFields","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-909979117,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListItemBase<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            An class that holds list Item properties related arguments.\n            </summary>\n            <typeparam name=\"T\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListItemBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListItemBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<T>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<global::System.Collections.Generic.List<T>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"T","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"T","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<T>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.ComposedItemModel<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsItemTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsGroupTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the group item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassNames","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ClassList"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListItemBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListItemBase","Components.GenericTyped":"True"}},{"HashCode":-1500948899,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListItemBase<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            An class that holds list Item properties related arguments.\n            </summary>\n            <typeparam name=\"T\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.ListItemBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListItemBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<T>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<global::System.Collections.Generic.List<T>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"T","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"T","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<T>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.ComposedItemModel<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsItemTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsGroupTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the group item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassNames","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ClassList"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListItemBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListItemBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2053872916,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListCommonBase<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            This class holds listbase properties related arguments.\n            </summary>\n            <typeparam name=\"T\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListCommonBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListCommonBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListCommonBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListCommonBase","Components.GenericTyped":"True"}},{"HashCode":1701341515,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListCommonBase<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            This class holds listbase properties related arguments.\n            </summary>\n            <typeparam name=\"T\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.ListCommonBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListCommonBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListCommonBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"ListCommonBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-974093646,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Component to create list from primitive data for executing primitive list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PrimitiveListItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<global::System.Collections.Generic.List<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsItemTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsGroupTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the group item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassNames","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ClassList"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"PrimitiveListItem","Components.GenericTyped":"True"}},{"HashCode":116163022,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Component to create list from primitive data for executing primitive list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<global::System.Collections.Generic.List<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsItemTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsGroupTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the group item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupTemplate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassNames","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ClassList"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"PrimitiveListItem","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":733626975,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            A list base component for all the Syncfusion Blazor List dependant components to implement the common functionalities.\n            </summary>\n            /// <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfListBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.SfListBase<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"SfListBase","Components.GenericTyped":"True"}},{"HashCode":-2105761708,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            A list base component for all the Syncfusion Blazor List dependant components to implement the common functionalities.\n            </summary>\n            /// <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.SfListBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.SfListBase<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Common.GloballyQualifiedTypeName":"global::System.Action<global::Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Components.DelegateSignature":"True","Components.IsDelegateAwaitableResult":"False","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Lists.CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"SfListBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1074660377,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfListBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"SfListBase","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1013623247,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Lists.Internal.SfListBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Lists.Internal","Common.TypeNameIdentifier":"SfListBase","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-519994171,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SpinnerEvents","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Configure event handlers for the Spinner component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinnerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers after the Spinner is created.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBeforeOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the Spinner is opened.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnBeforeOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBeforeClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the Spinner is closed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnBeforeClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers after the Spinner is destroyed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerEvents","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SpinnerEvents"}},{"HashCode":-104626556,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SpinnerEvents","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Configure event handlers for the Spinner component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.SpinnerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers after the Spinner is created.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBeforeOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the Spinner is opened.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnBeforeOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBeforeClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the Spinner is closed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnBeforeClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers after the Spinner is destroyed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerEvents","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SpinnerEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":822789393,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SpinnerTemplates","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Configure the template of the Spinner.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinnerTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the template of the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SpinnerTemplates"}},{"HashCode":-1801878968,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SpinnerTemplates","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Configure the template of the Spinner.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.SpinnerTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the template of the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SpinnerTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":516541783,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Spinner.SpinnerTemplates.Template","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Defines the template of the Spinner.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"SpinnerTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerTemplates.Template","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SpinnerTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":993989567,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Spinner.SpinnerTemplates.Template","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Defines the template of the Spinner.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Spinner.SpinnerTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerTemplates.Template","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SpinnerTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-169762206,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SfSpinner","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the spinner component that displays when spinner is shown.\n            </summary>\n            <exclude /> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSpinner"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the label for the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the Spinner.\n            One or more custom CSS classes can be added to a Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Specified content of the Spinner element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value that represents whether the Spinner component is visible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Size","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the size of the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Size","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the z-order for the Spinner.\n            By default the value is auto.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Spinner.SpinnerType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies a theme of the spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Spinner.SpinnerType"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SfSpinner"}},{"HashCode":125075235,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SfSpinner","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the spinner component that displays when spinner is shown.\n            </summary>\n            <exclude /> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.SfSpinner"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the label for the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the Spinner.\n            One or more custom CSS classes can be added to a Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Specified content of the Spinner element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value that represents whether the Spinner component is visible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Size","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the size of the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Size","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the z-order for the Spinner.\n            By default the value is auto.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Spinner.SpinnerType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies a theme of the spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Spinner.SpinnerType"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SfSpinner","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-695183651,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Spinner.SfSpinner.ChildContent","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <exclude />\n            <summary>\n            Specified content of the Spinner element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSpinner"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SfSpinner","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2085160651,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Spinner.SfSpinner.ChildContent","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <exclude />\n            <summary>\n            Specified content of the Spinner element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Spinner.SfSpinner"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SfSpinner","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1569868269,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Bootstrap","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Bootstrap class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Bootstrap"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"Bootstrap"}},{"HashCode":-70327390,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Bootstrap","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Bootstrap class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1898114154,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Bootstrap 4 class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Bootstrap4"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"Bootstrap4"}},{"HashCode":228813806,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Bootstrap 4 class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"Bootstrap4","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1791895328,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Fabric and High-Contrast class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FabricHighContrast"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"FabricHighContrast"}},{"HashCode":-1082479080,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Fabric and High-Contrast class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"FabricHighContrast","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-905629999,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Material","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner Material class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Material"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Material","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"Material"}},{"HashCode":-588489595,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Material","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner Material class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.Material"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Material","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"Material","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2061413288,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the common methods that are used in all the themes.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinnerBase"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"SpinnerBase"}},{"HashCode":559227939,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the common methods that are used in all the themes.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase","Common.TypeNamespace":"Syncfusion.Blazor.Spinner.Internal","Common.TypeNameIdentifier":"SpinnerBase","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1626695798,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n             <summary>\n             Combines the behaviors of <see cref=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\" /> and <see cref=\"T:Microsoft.AspNetCore.Components.RouteView\" />,\n             so that it displays the page matching the specified route but only if the user\n             is authorized to see it.\n            \n             Additionally, this component supplies a cascading parameter of type <see cref=\"T:System.Threading.Tasks.Task`1\" />,\n             which makes the user's current authentication state available to descendants.\n             </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AuthorizeRouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"NotAuthorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotAuthorized","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Authorizing","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Authorizing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Resource","TypeName":"System.Object","Documentation":"\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Resource","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DefaultLayout","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeRouteView"}},{"HashCode":-1089588755,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n             <summary>\n             Combines the behaviors of <see cref=\"T:Microsoft.AspNetCore.Components.Authorization.AuthorizeView\" /> and <see cref=\"T:Microsoft.AspNetCore.Components.RouteView\" />,\n             so that it displays the page matching the specified route but only if the user\n             is authorized to see it.\n            \n             Additionally, this component supplies a cascading parameter of type <see cref=\"T:System.Threading.Tasks.Task`1\" />,\n             which makes the user's current authentication state available to descendants.\n             </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"NotAuthorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotAuthorized","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Authorizing","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Authorizing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Resource","TypeName":"System.Object","Documentation":"\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Resource","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DefaultLayout","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeRouteView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1894495879,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotAuthorized","ParentTag":"AuthorizeRouteView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NotAuthorized' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeRouteView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-772132001,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotAuthorized","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NotAuthorized' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.NotAuthorized","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeRouteView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1961680512,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorizing","ParentTag":"AuthorizeRouteView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeRouteView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1794929427,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorizing","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeRouteView.Authorizing","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeRouteView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1333841242,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            Displays differing content depending on the user's authorization status.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Policy","TypeName":"System.String","Documentation":"\n            <summary>\n            The policy name that determines whether the content can be displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Policy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Roles","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma delimited list of roles that are allowed to display the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Roles","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"NotAuthorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotAuthorized","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Authorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Authorized","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Authorizing","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Authorizing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Resource","TypeName":"System.Object","Documentation":"\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Resource","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView"}},{"HashCode":-1062287476,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            Displays differing content depending on the user's authorization status.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Policy","TypeName":"System.String","Documentation":"\n            <summary>\n            The policy name that determines whether the content can be displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Policy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Roles","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma delimited list of roles that are allowed to display the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Roles","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"NotAuthorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotAuthorized","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Authorized","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Authorized","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.Authorization.AuthenticationState>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Authorizing","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Authorizing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Resource","TypeName":"System.Object","Documentation":"\n            <summary>\n            The resource to which access is being controlled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Resource","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1976336925,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2072500109,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":206294960,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotAuthorized","ParentTag":"AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NotAuthorized' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1635767799,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is not authorized.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotAuthorized","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NotAuthorized' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.NotAuthorized","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1343832225,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorized","ParentTag":"AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Authorized' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-747468937,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed if the user is authorized.\n            If you specify a value for this parameter, do not also specify a value for <see cref=\"P:Microsoft.AspNetCore.Components.Authorization.AuthorizeViewCore.ChildContent\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorized","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Authorized' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorized","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1760466501,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorizing","ParentTag":"AuthorizeView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":254935187,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content that will be displayed while asynchronous authorization is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Authorizing","ParentTag":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.AuthorizeView.Authorizing","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"AuthorizeView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1219772387,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CascadingAuthenticationState"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"CascadingAuthenticationState"}},{"HashCode":-1605994785,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"CascadingAuthenticationState","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":409770779,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CascadingAuthenticationState"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"CascadingAuthenticationState","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1870844652,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Authorization","Documentation":"\n            <summary>\n            The content to which the authentication state should be provided.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Authorization","Common.TypeNameIdentifier":"CascadingAuthenticationState","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1681595467,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Button Group Button component is creates a button component which is a graphical user interface that helps to triggers an event on its click action. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            The button content is either by specifying <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ButtonGroupButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the component is selected or not. \n            </summary> \n            <value> \n            <c>true</c>, if the component is selected. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Value\" /> property is used to set the value attribute of input element. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the toggle option is enabled for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the primary style is enabled for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button component. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButtonGroup> \n            <ButtonGroupButton style=\"width:200px\">Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"SelectedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"SelectedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ButtonGroupButton"}},{"HashCode":-1343773136,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Button Group Button component is creates a button component which is a graphical user interface that helps to triggers an event on its click action. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            The button content is either by specifying <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the component is selected or not. \n            </summary> \n            <value> \n            <c>true</c>, if the component is selected. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Value\" /> property is used to set the value attribute of input element. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the toggle option is enabled for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the primary style is enabled for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button component. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButtonGroup> \n            <ButtonGroupButton style=\"width:200px\">Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"SelectedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"SelectedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ButtonGroupButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1975152811,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ButtonGroupButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ButtonGroupButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-711133051,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ButtonGroupButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1149696410,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfButtonGroup","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            ButtonGroup is a container that groups a series of buttons on a single line. It has an optional radio button (single selection) and checkbox (multiple selection) behavior. \n            It may contain DropDownButton or SplitButton component. \n            </summary> \n            <example> \n            In the below code example, a basic button group is initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            <code><![CDATA[ \n            <SfButtonGroup> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfButtonGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for button group including HTML element. If the child content is not specified, button is rendered using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of button group. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button group. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the button group container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button group width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive. \n            <code><![CDATA[ \n            <SfButtonGroup style=\"width:200px\"> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.SplitButtons.SelectionMode","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the selection mode of the button group component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SelectionMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.SplitButtons.SelectionMode.Default\" /> \n            </value> \n            <remarks> \n            If the <c>Mode</c> is <c>Default</c>, it allows default selection in the button group component. \n            If the <c>Mode</c> is <c>Single</c>, it allows single selection in the button group component. \n            If the <c>Mode</c> is <c>Multiple</c>, it allows multiple selection in the button group component. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SelectionMode"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> rendering is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfButtonGroup Created=\"@Created\"> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            @code { \n                private void Created() { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfButtonGroup"}},{"HashCode":1896779211,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfButtonGroup","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            ButtonGroup is a container that groups a series of buttons on a single line. It has an optional radio button (single selection) and checkbox (multiple selection) behavior. \n            It may contain DropDownButton or SplitButton component. \n            </summary> \n            <example> \n            In the below code example, a basic button group is initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            <code><![CDATA[ \n            <SfButtonGroup> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for button group including HTML element. If the child content is not specified, button is rendered using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of button group. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button group. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the button group container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button group width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive. \n            <code><![CDATA[ \n            <SfButtonGroup style=\"width:200px\"> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.SplitButtons.SelectionMode","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the selection mode of the button group component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SelectionMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.SplitButtons.SelectionMode.Default\" /> \n            </value> \n            <remarks> \n            If the <c>Mode</c> is <c>Default</c>, it allows default selection in the button group component. \n            If the <c>Mode</c> is <c>Single</c>, it allows single selection in the button group component. \n            If the <c>Mode</c> is <c>Multiple</c>, it allows multiple selection in the button group component. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SelectionMode"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> rendering is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfButtonGroup Created=\"@Created\"> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            @code { \n                private void Created() { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfButtonGroup","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1373563782,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfButtonGroup.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for button group including HTML element. If the child content is not specified, button is rendered using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfButtonGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfButtonGroup","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1762342123,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfButtonGroup.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for button group including HTML element. If the child content is not specified, button is rendered using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfButtonGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfButtonGroup","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-813682134,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is closing.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents OnClose=\"@OnClose\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void OnClose(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> rendering is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can customize the DropDownButton items rendering using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents OnItemRender=\"@OnItemRender\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void OnItemRender(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is opening.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is closed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents Closed=\"@Closed\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void Closed(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> rendering is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is opened.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> item is clicked.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton item related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents ItemSelected=\"@ItemSelected\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void ItemSelected(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownButtonEvents"}},{"HashCode":-289889939,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is closing.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents OnClose=\"@OnClose\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void OnClose(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> rendering is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can customize the DropDownButton items rendering using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents OnItemRender=\"@OnItemRender\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void OnItemRender(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is opening.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is closed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents Closed=\"@Closed\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void Closed(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> rendering is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is opened.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> item is clicked.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton item related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents ItemSelected=\"@ItemSelected\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void ItemSelected(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownButtonEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1845481597,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n             <summary> \n            The DropDownButton component is used to toggle contextual overlays for displaying list of action items. \n             It can contain a text, an icon, svg or both. \n             </summary> \n             <example> \n             In the below code example, a basic DropDownButton component initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" />  tag directives. \n             <code><![CDATA[ \n             <SfDropDownButton> \n                <DropDownMenuItems> \n                   <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n                </DropDownMenuItems> \n             </SfDropDownButton> \n             ]]></code> \n             </example> \n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the dropdown button including HTML element. If the child content is not specified, Dropdown button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of dropdown button.\n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of dropdown button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of dropdown button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a a value that indicates the CSS class string to include an icon or image for the dropdown button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the dropdown button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the dropdown button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.IconPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the dropdown button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.SplitButtons.DropDownMenuItem>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the the action items with its properties which will be rendered in dropdown button popup.  \n            </summary> \n            <value> \n            Accepts a collection of <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> object. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property is not specified, the dropdown button component is populated using <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> tag directives. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.SplitButtons.DropDownMenuItem>"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the dropdown button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the dropdown button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for dropdown button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for dropdown button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PopupContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in DropDownButton popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the DropDownButton component is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a dropdown button component rendered with <c>ListView</c> component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            <code><![CDATA[ \n            <SfDropDownButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfDropDownButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes such as id, title etc. that will applied to the dropdown button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, dropdown button width has been specified as style attribute in <c>SfButton</c> tag directive. \n            <code><![CDATA[ \n            <SfDropDownButton style=\"width:200px\"> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfDropDownButton> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfDropDownButton"}},{"HashCode":-667255741,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n             <summary> \n            The DropDownButton component is used to toggle contextual overlays for displaying list of action items. \n             It can contain a text, an icon, svg or both. \n             </summary> \n             <example> \n             In the below code example, a basic DropDownButton component initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" />  tag directives. \n             <code><![CDATA[ \n             <SfDropDownButton> \n                <DropDownMenuItems> \n                   <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n                </DropDownMenuItems> \n             </SfDropDownButton> \n             ]]></code> \n             </example> \n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the dropdown button including HTML element. If the child content is not specified, Dropdown button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of dropdown button.\n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of dropdown button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of dropdown button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a a value that indicates the CSS class string to include an icon or image for the dropdown button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the dropdown button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the dropdown button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.IconPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the dropdown button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.SplitButtons.DropDownMenuItem>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the the action items with its properties which will be rendered in dropdown button popup.  \n            </summary> \n            <value> \n            Accepts a collection of <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> object. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property is not specified, the dropdown button component is populated using <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> tag directives. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.SplitButtons.DropDownMenuItem>"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the dropdown button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the dropdown button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for dropdown button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for dropdown button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PopupContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in DropDownButton popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the DropDownButton component is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a dropdown button component rendered with <c>ListView</c> component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            <code><![CDATA[ \n            <SfDropDownButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfDropDownButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes such as id, title etc. that will applied to the dropdown button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, dropdown button width has been specified as style attribute in <c>SfButton</c> tag directive. \n            <code><![CDATA[ \n            <SfDropDownButton style=\"width:200px\"> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfDropDownButton> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfDropDownButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1165973219,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the dropdown button including HTML element. If the child content is not specified, Dropdown button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDropDownButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfDropDownButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-959346742,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the dropdown button including HTML element. If the child content is not specified, Dropdown button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfDropDownButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfDropDownButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1291256235,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in DropDownButton popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the DropDownButton component is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a dropdown button component rendered with <c>ListView</c> component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            <code><![CDATA[ \n            <SfDropDownButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfDropDownButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupContent","ParentTag":"SfDropDownButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfDropDownButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1253104344,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in DropDownButton popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the DropDownButton component is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a dropdown button component rendered with <c>ListView</c> component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            <code><![CDATA[ \n            <SfDropDownButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfDropDownButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfDropDownButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfDropDownButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1837867871,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Specifies the animation settings for the progress button.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ProgressButtonAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the duration of the animation done in the progress button. \n            </summary> \n            <value> \n            Accepts a double value to set the duration of the animation of progress button. The default value is <c>400</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the animation timing function of the progress button component. \n            </summary> \n            <value> \n            <c>true</c>, if the progress UI is enabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.SplitButtons.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the animation effect of the progress button component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.SplitButtons.AnimationEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.SplitButtons.AnimationEffect.None\" /> \n            </value> \n            <remarks> \n            If the <c>AnimationEffect</c> is <c>SlideLeft</c>, the content will be moved with slide left  animation. \n            If the <c>AnimationEffect</c> is <c>SlideRight</c>, the content will be moved with slide right animation. \n            If the <c>AnimationEffect</c> is <c>SlideUp</c>, the content will be moved with slide up animation. \n            If the <c>AnimationEffect</c> is <c>SlideDown</c>, the content will be moved with slide down animation. \n            If the <c>AnimationEffect</c> is <c>ZoomIn</c>, the content will be moved with zoom in  animation. \n            If the <c>AnimationEffect</c> is <c>ZoomOut</c>, the content will be moved with zoom out  animation \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.AnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonAnimationSettings"}},{"HashCode":-1839649029,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Specifies the animation settings for the progress button.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the duration of the animation done in the progress button. \n            </summary> \n            <value> \n            Accepts a double value to set the duration of the animation of progress button. The default value is <c>400</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the animation timing function of the progress button component. \n            </summary> \n            <value> \n            <c>true</c>, if the progress UI is enabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.SplitButtons.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the animation effect of the progress button component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.SplitButtons.AnimationEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.SplitButtons.AnimationEffect.None\" /> \n            </value> \n            <remarks> \n            If the <c>AnimationEffect</c> is <c>SlideLeft</c>, the content will be moved with slide left  animation. \n            If the <c>AnimationEffect</c> is <c>SlideRight</c>, the content will be moved with slide right animation. \n            If the <c>AnimationEffect</c> is <c>SlideUp</c>, the content will be moved with slide up animation. \n            If the <c>AnimationEffect</c> is <c>SlideDown</c>, the content will be moved with slide down animation. \n            If the <c>AnimationEffect</c> is <c>ZoomIn</c>, the content will be moved with zoom in  animation. \n            If the <c>AnimationEffect</c> is <c>ZoomOut</c>, the content will be moved with zoom out  animation \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.AnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":938454105,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Used to configure the progress button events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ProgressButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is started in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <c>SfButton</c> rendering is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfProgressButton> \n                 <ProgressButtonEvents Created=\"@Created\"></ProgressButtonEvents> \n            </SfProgressButton > \n            @code { \n                private void Created() { \n                // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnEnd","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is completed in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnEnd","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is uncompleted in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Progressing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback in a specific interval that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> is progressing.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Progressing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonEvents"}},{"HashCode":1282557704,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Used to configure the progress button events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is started in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <c>SfButton</c> rendering is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfProgressButton> \n                 <ProgressButtonEvents Created=\"@Created\"></ProgressButtonEvents> \n            </SfProgressButton > \n            @code { \n                private void Created() { \n                // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnEnd","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is completed in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnEnd","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is uncompleted in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Progressing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback in a specific interval that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> is progressing.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Progressing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-451131278,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Specifies the spin settings for the progress button.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ProgressButtonSpinSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.SplitButtons.SpinPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the spinner position of the progress button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.Position\" /> enumeration. The default value is <c>Left</c>. \n            </value> \n            <remarks> \n            If the <c>Position</c> is <c>Left</c>, the spinner will be placed left to the content of the progress button. \n            If the <c>Position</c> is <c>Right</c>, the spinner will be placed right to the content of the progress button. \n            If the <c>Position</c> is <c>Top</c>, the spinner will be placed above the content of the progress button. \n            If the <c>Position</c> is <c>Bottom</c>, spinner icon will be placed below the content of the progress button. \n            If the <c>Position</c> is <c>Center</c>, spinner icon will be placed below the content of the progress button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SpinPosition"}},{"Kind":"Components.Component","Name":"SpinTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a template content to be displayed in the progress button.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"SpinTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a width of the spinner in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> component.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonSpinSettings"}},{"HashCode":568285375,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Specifies the spin settings for the progress button.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.SplitButtons.SpinPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the spinner position of the progress button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.Position\" /> enumeration. The default value is <c>Left</c>. \n            </value> \n            <remarks> \n            If the <c>Position</c> is <c>Left</c>, the spinner will be placed left to the content of the progress button. \n            If the <c>Position</c> is <c>Right</c>, the spinner will be placed right to the content of the progress button. \n            If the <c>Position</c> is <c>Top</c>, the spinner will be placed above the content of the progress button. \n            If the <c>Position</c> is <c>Bottom</c>, spinner icon will be placed below the content of the progress button. \n            If the <c>Position</c> is <c>Center</c>, spinner icon will be placed below the content of the progress button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SpinPosition"}},{"Kind":"Components.Component","Name":"SpinTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a template content to be displayed in the progress button.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"SpinTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a width of the spinner in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> component.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonSpinSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-193642012,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.SpinTemplate","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a template content to be displayed in the progress button.  \n            </summary> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinTemplate","ParentTag":"ProgressButtonSpinSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.SpinTemplate","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonSpinSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1278078966,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.SpinTemplate","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a template content to be displayed in the progress button.  \n            </summary> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinTemplate","ParentTag":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.SpinTemplate","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ProgressButtonSpinSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1337280097,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfProgressButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            Progress Button content is either by specifying <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive. \n            </remarks> \n            <example> \n            In the below code example, a basic button initialized with <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            <code><![CDATA[ \n            <SfProgressButton Content=\"Click\"> \n            </SfProgressButton> \n            ]]></code> \n            </example>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfProgressButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets a event callback when button element is clicked.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the progress button including HTML element. If the child content is not specified, progress button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of progress button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive, to render as HTML content. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of progress button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of progress button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the progress button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the button is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the duration of the progression in the progress. \n            </summary> \n            <value> \n            Accepts a double value to set the duration of progress button. The default value is <c>2000</c> milliseconds. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EnableProgress","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the progress UI is enabled or not in progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the progress UI is enabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableProgress","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the progress button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, progress button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfProgressButton style=\"width:200px\"> \n            </SfProgressButton> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the progress button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the progress button ==. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the progress button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the progress button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the progress button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the progress button. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the primary style is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the toggle option is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfProgressButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfProgressButton"}},{"HashCode":1934786144,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfProgressButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            Progress Button content is either by specifying <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive. \n            </remarks> \n            <example> \n            In the below code example, a basic button initialized with <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            <code><![CDATA[ \n            <SfProgressButton Content=\"Click\"> \n            </SfProgressButton> \n            ]]></code> \n            </example>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SfProgressButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets a event callback when button element is clicked.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the progress button including HTML element. If the child content is not specified, progress button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of progress button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive, to render as HTML content. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of progress button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of progress button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the progress button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the button is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the duration of the progression in the progress. \n            </summary> \n            <value> \n            Accepts a double value to set the duration of progress button. The default value is <c>2000</c> milliseconds. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"EnableProgress","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the progress UI is enabled or not in progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the progress UI is enabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableProgress","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the progress button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, progress button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfProgressButton style=\"width:200px\"> \n            </SfProgressButton> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the progress button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the progress button ==. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the progress button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the progress button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the progress button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the progress button. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the primary style is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the toggle option is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfProgressButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfProgressButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1404990854,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfProgressButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the progress button including HTML element. If the child content is not specified, progress button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfProgressButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfProgressButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfProgressButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-878958790,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfProgressButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the progress button including HTML element. If the child content is not specified, progress button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfProgressButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfProgressButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfProgressButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-198050799,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            SplitButton component has primary and secondary button. Primary button is used to select  \n            default action and secondary button is used to toggle contextual overlays for displaying list of  \n            action items. It can contain both text and images. \n            </summary> \n            <example> \n            In the below code example, a basic SplitButton component initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" />  tag directives. \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfSplitButton> \n            ]]></code> \n            </example>\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSplitButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the primary button element including HTML element. If the child content is not specified, primary button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of split button component's primary button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of split button component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of split button component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the split button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the split button is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for split button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for split button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the split button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the split button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the split button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.IconPosition\" /> enumeration. The default value is <c>Left</c>/&gt; \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the split button component. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the split button component. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the split button component. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the split button component. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.SplitButtons.DropDownMenuItem>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the action items with its properties which will be rendered as split button's secondary button.  \n            </summary> \n            <value> \n            Accepts a collection of <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> object. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property is not specified, the split button component's secondary button is populated using <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> tag directives. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.SplitButtons.DropDownMenuItem>"}},{"Kind":"Components.Component","Name":"PopupContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in split button popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the dropdown button is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a DropDownButton component rendered with ListView component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />.\n            <code><![CDATA[ \n            <SfSplitButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfSplitButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes such as id, title etc. that will applied to the split button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, split button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfSplitButton style=\"width:200px\"> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfSplitButton> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfSplitButton"}},{"HashCode":-564100948,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            SplitButton component has primary and secondary button. Primary button is used to select  \n            default action and secondary button is used to toggle contextual overlays for displaying list of  \n            action items. It can contain both text and images. \n            </summary> \n            <example> \n            In the below code example, a basic SplitButton component initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" />  tag directives. \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfSplitButton> \n            ]]></code> \n            </example>\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SfSplitButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the primary button element including HTML element. If the child content is not specified, primary button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of split button component's primary button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of split button component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of split button component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the split button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the split button is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for split button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for split button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the split button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the split button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the split button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.IconPosition\" /> enumeration. The default value is <c>Left</c>/&gt; \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the split button component. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the split button component. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the split button component. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the split button component. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.SplitButtons.DropDownMenuItem>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the action items with its properties which will be rendered as split button's secondary button.  \n            </summary> \n            <value> \n            Accepts a collection of <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> object. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property is not specified, the split button component's secondary button is populated using <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> tag directives. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.SplitButtons.DropDownMenuItem>"}},{"Kind":"Components.Component","Name":"PopupContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in split button popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the dropdown button is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a DropDownButton component rendered with ListView component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />.\n            <code><![CDATA[ \n            <SfSplitButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfSplitButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes such as id, title etc. that will applied to the split button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, split button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfSplitButton style=\"width:200px\"> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfSplitButton> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfSplitButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1346523049,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the primary button element including HTML element. If the child content is not specified, primary button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSplitButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfSplitButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":457258974,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the primary button element including HTML element. If the child content is not specified, primary button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfSplitButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfSplitButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":650626038,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in split button popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the dropdown button is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a DropDownButton component rendered with ListView component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />.\n            <code><![CDATA[ \n            <SfSplitButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfSplitButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupContent","ParentTag":"SfSplitButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfSplitButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1450183414,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in split button popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the dropdown button is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a DropDownButton component rendered with ListView component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />.\n            <code><![CDATA[ \n            <SfSplitButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfSplitButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfSplitButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SfSplitButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1773141403,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SplitButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is closing.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnClose=\"@OnClose\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnClose(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> rendering is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can customize the DropDownButton items rendering using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnItemRender=\"@OnItemRender\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnItemRender(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is opening.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnOpen=\"@OnOpen\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnOpen(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when the primary button of split button has been clicked.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Clicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is closed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n               <SpliButtonEvents Closed=\"@Closed\"></DropDownButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Closed(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> rendering is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents Created=\"@Created\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Created() { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is opened.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents Opened=\"@Opened\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Opened(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> item is clicked.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button item related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents ItemSelected=\"@ItemSelected\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void ItemSelected(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SplitButtonEvents"}},{"HashCode":-652194227,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is closing.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnClose=\"@OnClose\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnClose(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> rendering is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can customize the DropDownButton items rendering using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnItemRender=\"@OnItemRender\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnItemRender(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is opening.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnOpen=\"@OnOpen\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnOpen(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when the primary button of split button has been clicked.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Clicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.ClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is closed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n               <SpliButtonEvents Closed=\"@Closed\"></DropDownButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Closed(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> rendering is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents Created=\"@Created\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Created() { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is opened.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents Opened=\"@Opened\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Opened(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> item is clicked.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button item related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents ItemSelected=\"@ItemSelected\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void ItemSelected(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"SplitButtonEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-501213541,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownMenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Set custom content for items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines class/multiple classes separated by a space for the item that is used to include an icon.\n            Action item can include font icon and sprite image.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies separator between the items. Separator are horizontal lines used to group action items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Separator","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Used to enable or disable the action items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies text for item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies url for item that creates the anchor link to navigate to the url provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies unique id for item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional HTML attributes such as style, title etc., to the item\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItem"}},{"HashCode":-171530825,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Set custom content for items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines class/multiple classes separated by a space for the item that is used to include an icon.\n            Action item can include font icon and sprite image.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies separator between the items. Separator are horizontal lines used to group action items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Separator","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Used to enable or disable the action items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies text for item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies url for item that creates the anchor link to navigate to the url provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies unique id for item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional HTML attributes such as style, title etc., to the item\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":149118423,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Set custom content for items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DropDownMenuItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-364166190,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Set custom content for items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":67328554,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownMenuItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItems"}},{"HashCode":1081733803,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1177181524,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DropDownMenuItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItems","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1923752102,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"DropDownMenuItems","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":481491085,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons._Imports","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons._Imports","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":1837882981,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons._Imports","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons._Imports","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1873038507,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownMenu"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons.Internal","Common.TypeNameIdentifier":"DropDownMenu"}},{"HashCode":1370140018,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons.Internal","Common.TypeNameIdentifier":"DropDownMenu","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1856072683,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","AssemblyName":"Microsoft.AspNetCore.Components.Forms","Documentation":"\n            <summary>\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DataAnnotationsValidator"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"DataAnnotationsValidator"}},{"HashCode":-1646701916,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","AssemblyName":"Microsoft.AspNetCore.Components.Forms","Documentation":"\n            <summary>\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"DataAnnotationsValidator","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2053675926,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfButton","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Button is a graphical user interface that helps to triggers an event on its click action. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            Button content is either by specifying <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            </remarks> \n            <example> \n            In the below code example, a basic button is initialized with <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            <code><![CDATA[ \n            <SfButton Content=\"Click\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of Button component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction for button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the primary style for button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButton style=\"width:200px\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> is clicked.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>  \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfButton OnClick=\"@Clicked\"> \n            </SfButton> \n            @code { \n                private void Clicked(MouseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> rendering is completed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfButton"}},{"HashCode":-1792103499,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfButton","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Button is a graphical user interface that helps to triggers an event on its click action. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            Button content is either by specifying <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            </remarks> \n            <example> \n            In the below code example, a basic button is initialized with <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            <code><![CDATA[ \n            <SfButton Content=\"Click\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of Button component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction for button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the primary style for button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButton style=\"width:200px\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> is clicked.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>  \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfButton OnClick=\"@Clicked\"> \n            </SfButton> \n            @code { \n                private void Clicked(MouseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> rendering is completed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1128267856,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1565814587,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":216991031,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            CheckBox is a graphical user interface element that allows you to select one or more options from the choices. \n            It has checked, unchecked, and indeterminate states. \n            </summary> \n            <example> \n            In the below code example, a basic checkbox is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfCheckBox Checked=\"true\"> \n            </SfCheckBox> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCheckBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfCheckBox<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of checkbox. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the checkbox. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the CheckBox. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the CheckBox. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LabelPosition"}},{"Kind":"Components.Component","Name":"Indeterminate","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable indeterminate state in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is in indeterminate state. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property overrides this <c>Checked</c> property in initial rendering of Checkbox. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Indeterminate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IndeterminateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IndeterminateChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnableTriState","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the tristate in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is rendered with tristate. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.EnableTriState\" /> property is working based on <c>Checked</c> and <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnableTriState","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the checkbox state is changed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfCheckBox ValueChange=\"@Changed\"> \n            </SfCheckBox> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.GenericTyped":"True"}},{"HashCode":-2143056674,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            CheckBox is a graphical user interface element that allows you to select one or more options from the choices. \n            It has checked, unchecked, and indeterminate states. \n            </summary> \n            <example> \n            In the below code example, a basic checkbox is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfCheckBox Checked=\"true\"> \n            </SfCheckBox> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfCheckBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfCheckBox<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of checkbox. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the checkbox. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the CheckBox. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the CheckBox. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LabelPosition"}},{"Kind":"Components.Component","Name":"Indeterminate","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable indeterminate state in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is in indeterminate state. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property overrides this <c>Checked</c> property in initial rendering of Checkbox. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Indeterminate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IndeterminateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IndeterminateChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnableTriState","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the tristate in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is rendered with tristate. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.EnableTriState\" /> property is working based on <c>Checked</c> and <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnableTriState","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the checkbox state is changed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfCheckBox ValueChange=\"@Changed\"> \n            </SfCheckBox> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-917904350,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfCheckBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2032985851,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfCheckBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2005811066,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipEvents","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the Chip component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBeforeClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is before click.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnBeforeClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is clicked.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component rendering is completed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component successfuly disposed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDelete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This delete event will get triggered before removing the chip.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnDelete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Deleted","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipDeletedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the chip item is deleted.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can get the deleted chip details.\n            </remarks>\n            <example>\n            In the below code example, the deleted chip value can be obtained from the <c>Deleted</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" EnableDelete=true>\n                <ChipEvents Deleted=\"@onDeleted\"></ChipEvents>\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void onDeleted(ChipDeletedEventArgs args) {\n                    string deletedValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Deleted","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipDeletedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"SelectionChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SelectionChangedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the selected chips are changed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can get the updated SelectedChips value.\n            </remarks>\n            <example>\n            In the below code example, the SelectedChips value can be obtained from the <c>SelectionChanged</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\">\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n              <ChipEvents SelectionChanged=\"SelectedChipsChanged\" ></ChipEvents>\n            </SfChip>\n            @code {\n                private void SelectedChipsChanged(SelectionChangedEventArgs args) {\n                   var selectedChipItems = args.AddedItems;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SelectionChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SelectionChangedEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipEvents","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipEvents"}},{"HashCode":308580930,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipEvents","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the Chip component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.ChipEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBeforeClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is before click.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnBeforeClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is clicked.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component rendering is completed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component successfuly disposed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDelete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This delete event will get triggered before removing the chip.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnDelete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Deleted","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipDeletedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the chip item is deleted.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can get the deleted chip details.\n            </remarks>\n            <example>\n            In the below code example, the deleted chip value can be obtained from the <c>Deleted</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" EnableDelete=true>\n                <ChipEvents Deleted=\"@onDeleted\"></ChipEvents>\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void onDeleted(ChipDeletedEventArgs args) {\n                    string deletedValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Deleted","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChipDeletedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"SelectionChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SelectionChangedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the selected chips are changed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can get the updated SelectedChips value.\n            </remarks>\n            <example>\n            In the below code example, the SelectedChips value can be obtained from the <c>SelectionChanged</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\">\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n              <ChipEvents SelectionChanged=\"SelectedChipsChanged\" ></ChipEvents>\n            </SfChip>\n            @code {\n                private void SelectedChipsChanged(SelectionChangedEventArgs args) {\n                   var selectedChipItems = args.AddedItems;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SelectionChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SelectionChangedEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipEvents","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-156991814,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItem","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            A Chip is a small block of essential information that contains the text, image, or both and mostly used in contacts, mails, or filter tags.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the Chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the chip component is enabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LeadingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LeadingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LeadingText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the customized text value for the avatar in the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text content for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TrailingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the trailing icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TrailingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            This value property helps to store the chip component values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title to the each chip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItem"}},{"HashCode":1486786275,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItem","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            A Chip is a small block of essential information that contains the text, image, or both and mostly used in contacts, mails, or filter tags.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.ChipItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the Chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the chip component is enabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LeadingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LeadingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LeadingText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the customized text value for the avatar in the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text content for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TrailingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the trailing icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TrailingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            This value property helps to store the chip component values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title to the each chip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":743819622,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ChipItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItem","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":484553617,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.ChipItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItem","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1623613924,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItems","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configures the collection of chipitem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItems"}},{"HashCode":660382126,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItems","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configures the collection of chipitem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.ChipItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1234244864,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ChipItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItems","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1570654682,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.ChipItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"ChipItems","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1304510073,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            The SfChip component displays a list of chip each of which contains a block of essential information that triggers an event on click action.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n            <summary>\n            Specifies the Partial class SfChip.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfChip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the chip component.\n            </summary>\n            <value>\n            Accepts the CSS class string separated by space to customize the appearance of component. The default value is empty.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Chips","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Buttons.ChipItem>","Documentation":"\n            <summary>\n            This chips property helps to render chipitem component.\n            </summary>\n            <value>\n            Accepts the list of chip items. Each chip item should contain a text value. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Chips","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Buttons.ChipItem>"}},{"Kind":"Components.Component","Name":"EnableDelete","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enableDelete property helps to enable delete functionality.\n            </summary>\n            <value>\n            <c>true</c>, if the chip component can be deleted. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableDelete","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled for the component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enabled property helps to enable/disable chipitem component.\n            </summary>\n            <value>\n            <c>true</c>, If the item can be enabled. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SelectedChips","TypeName":"System.String[]","Documentation":"\n            <summary>\n            This selectedChips property helps to select chip items.\n            </summary>\n            <value>\n            Accepts the list of string (chip's text) to select items in chips. The default value is an empty array.\n            </value>\n        ","Metadata":{"Common.PropertyName":"SelectedChips","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"SelectedChipsChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the selected chips changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can get the updated SelectedChips value.\n            </remarks>\n            <example>\n            In the below code example, the SelectedChips value can be obtained from the <c>SelectedChipsChanged</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" SelectedChipsChanged=\"SelectedChipsChanged\">\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void SelectedChipsChanged(string[] args) {\n                    string[] selectedChipItem = args;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SelectedChipsChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selection","TypeName":"Syncfusion.Blazor.Buttons.SelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            This selection property enables chip selection type.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.SelectionType\" /> enumeration that specifies the selection of chip items in selection mode. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.SelectionType.None\" />.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Selection","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SelectionType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title, native events etc., to the wrapper element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip"}},{"HashCode":-801981795,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            The SfChip component displays a list of chip each of which contains a block of essential information that triggers an event on click action.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n            <summary>\n            Specifies the Partial class SfChip.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfChip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the chip component.\n            </summary>\n            <value>\n            Accepts the CSS class string separated by space to customize the appearance of component. The default value is empty.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Chips","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Buttons.ChipItem>","Documentation":"\n            <summary>\n            This chips property helps to render chipitem component.\n            </summary>\n            <value>\n            Accepts the list of chip items. Each chip item should contain a text value. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Chips","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Buttons.ChipItem>"}},{"Kind":"Components.Component","Name":"EnableDelete","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enableDelete property helps to enable delete functionality.\n            </summary>\n            <value>\n            <c>true</c>, if the chip component can be deleted. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableDelete","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled for the component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enabled property helps to enable/disable chipitem component.\n            </summary>\n            <value>\n            <c>true</c>, If the item can be enabled. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SelectedChips","TypeName":"System.String[]","Documentation":"\n            <summary>\n            This selectedChips property helps to select chip items.\n            </summary>\n            <value>\n            Accepts the list of string (chip's text) to select items in chips. The default value is an empty array.\n            </value>\n        ","Metadata":{"Common.PropertyName":"SelectedChips","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"SelectedChipsChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the selected chips changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can get the updated SelectedChips value.\n            </remarks>\n            <example>\n            In the below code example, the SelectedChips value can be obtained from the <c>SelectedChipsChanged</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" SelectedChipsChanged=\"SelectedChipsChanged\">\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void SelectedChipsChanged(string[] args) {\n                    string[] selectedChipItem = args;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SelectedChipsChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selection","TypeName":"Syncfusion.Blazor.Buttons.SelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            This selection property enables chip selection type.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.SelectionType\" /> enumeration that specifies the selection of chip items in selection mode. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.SelectionType.None\" />.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Selection","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SelectionType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title, native events etc., to the wrapper element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1902515651,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfChip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":733210451,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfChip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-190623567,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfFab","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            The Blazor FAB Component (Floating Action Button) is an extension of <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> that appears in front of all the contents of the page and performs the primary action.\n            </summary> \n            <example> \n            A simple FAB with text content.\n            <code><![CDATA[ \n            <SfFab Content=\"Click\"/>\n            ]]></code> \n            FAB with icon.\n            <code><![CDATA[ \n            <SfFab IconCss=\"e-icons e-search\"/> \n            ]]></code> \n            FAB with icon and text.\n            <code><![CDATA[ \n            <SfFab IconCss=\"e-icons e-search\" Content=\"Search\"/>\n            ]]></code> \n            FAB with info button style.\n            <code><![CDATA[ \n            <SfFab CssClass=\"e-info\" IconCss=\"e-icons e-search\"/>\n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfFab"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to apply primary style for FAB. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is applied for FAB component. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the selector that points to an element in which the FAB will be positioned. \n            </summary> \n            <value> \n            The default value is <c>null</c> where FAB is positioned based on viewport of browser.\n            </value> \n            <remarks>\n            The target element must have relative position, else FAB will get positioned based on the closest element which has relative position.\n            </remarks>\n            <example> \n            Simple FAB with target.\n            <code><![CDATA[ \n            <div id=\"target_element\" style=\"position:relative;\"></div>\n            <SfFab Content=\"Click\" Target=\"#target_element\"/>\n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the FAB is visible or hidden. \n            </summary> \n            <value> \n            <c>true</c>, if the FAB is visible. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Buttons.FabPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of the FAB relative to <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.FabPosition\" /> enumeration that specifies the position of FAB. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.FabPosition.BottomRight\" />.\n            </value> \n            <remarks>\n            To refresh the position of FAB on <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" /> resized, use <see cref=\"M:Syncfusion.Blazor.Buttons.SfFab.RefreshPositionAsync\" /> method. \n            The position will be refreshed automatically when browser resized.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.FabPosition"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of Button component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction for button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButton style=\"width:200px\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> is clicked.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>  \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfButton OnClick=\"@Clicked\"> \n            </SfButton> \n            @code { \n                private void Clicked(MouseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> rendering is completed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfFab","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfFab"}},{"HashCode":-174280932,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfFab","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            The Blazor FAB Component (Floating Action Button) is an extension of <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> that appears in front of all the contents of the page and performs the primary action.\n            </summary> \n            <example> \n            A simple FAB with text content.\n            <code><![CDATA[ \n            <SfFab Content=\"Click\"/>\n            ]]></code> \n            FAB with icon.\n            <code><![CDATA[ \n            <SfFab IconCss=\"e-icons e-search\"/> \n            ]]></code> \n            FAB with icon and text.\n            <code><![CDATA[ \n            <SfFab IconCss=\"e-icons e-search\" Content=\"Search\"/>\n            ]]></code> \n            FAB with info button style.\n            <code><![CDATA[ \n            <SfFab CssClass=\"e-info\" IconCss=\"e-icons e-search\"/>\n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfFab"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to apply primary style for FAB. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is applied for FAB component. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the selector that points to an element in which the FAB will be positioned. \n            </summary> \n            <value> \n            The default value is <c>null</c> where FAB is positioned based on viewport of browser.\n            </value> \n            <remarks>\n            The target element must have relative position, else FAB will get positioned based on the closest element which has relative position.\n            </remarks>\n            <example> \n            Simple FAB with target.\n            <code><![CDATA[ \n            <div id=\"target_element\" style=\"position:relative;\"></div>\n            <SfFab Content=\"Click\" Target=\"#target_element\"/>\n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the FAB is visible or hidden. \n            </summary> \n            <value> \n            <c>true</c>, if the FAB is visible. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Buttons.FabPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of the FAB relative to <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.FabPosition\" /> enumeration that specifies the position of FAB. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.FabPosition.BottomRight\" />.\n            </value> \n            <remarks>\n            To refresh the position of FAB on <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" /> resized, use <see cref=\"M:Syncfusion.Blazor.Buttons.SfFab.RefreshPositionAsync\" /> method. \n            The position will be refreshed automatically when browser resized.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.FabPosition"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of Button component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction for button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButton style=\"width:200px\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> is clicked.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>  \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfButton OnClick=\"@Clicked\"> \n            </SfButton> \n            @code { \n                private void Clicked(MouseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> rendering is completed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfFab","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfFab","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1699136919,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfFab.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfFab"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfFab.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfFab","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1169218676,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfFab.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfFab"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfFab.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfFab","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":51799141,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfIcon","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            SfIcon component used to render the predefined syncfusion icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property or custom font icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            </summary>\n            <example>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Italic\" Title=\"Italic\"></SfIcon>\n            ]]></code>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"e-icons e-bold\" Title=\"Bold\"></SfIcon>\n            ]]></code>\n            The below example shows loading third party icon using <see cref=\"T:Syncfusion.Blazor.Buttons.SfIcon\" /> component.\n            Plus icon were loaded from open iconic, by defining the open iconic font CSS.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus\" Title=\"Plus\"></SfIcon>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfIcon"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to icon element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, font size of the icon customized using <c>@attributes</c> directive.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Copy\" @attributes=\"customAttribute\"></SfIcon>\n            @code{\n               Dictionary<string, object> customAttribute = new Dictionary<string, object>()\n               {\n                   { \"style\", \"font-size: 20px\" }\n               };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string which can be used to provide custom icon or custom style for icons.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to provide custom icon or custom style for icons. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            IconCss property used to append custom class to the predefined icons. This property will also render the customized icons like font-awesome icons.\n            </remarks>\n            <example>\n            In the below example custom icon is loaded using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-home\"></SfIcon>\n            ]]></code>\n            In the below example icon color is customized using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus color-red\"></SfIcon>\n            <style>\n                .color-red {\n                   color: red; \n                }\n            </style>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"Syncfusion.Blazor.Buttons.IconName","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the name of the built-in syncfusion icons to render. \n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> enumeration.\n            </value>\n            <remarks>\n            This property is used to render icons from predefined <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> options. You can use <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> to load custom icons.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Bold\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconName"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Syncfusion.Blazor.Buttons.IconSize","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the size of the icon.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconSize\" /> enumeration that specifies the size of the icon. \n            The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconSize.Medium\" />\n            </value>\n            <remarks>\n            The Size property used to set font size for icons. This property will considered only when icons are rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Paste\" Size=\"IconSize.Large\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Size","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconSize"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets title attribute for icon.\n            </summary>\n            <value>\n            Accepts a string. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            Title attribute used to improve accessibility with screen readers and show a tooltip on mouse over the icon.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Cut\" Title=\"Cut\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfIcon"}},{"HashCode":-1842198850,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfIcon","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            SfIcon component used to render the predefined syncfusion icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property or custom font icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            </summary>\n            <example>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Italic\" Title=\"Italic\"></SfIcon>\n            ]]></code>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"e-icons e-bold\" Title=\"Bold\"></SfIcon>\n            ]]></code>\n            The below example shows loading third party icon using <see cref=\"T:Syncfusion.Blazor.Buttons.SfIcon\" /> component.\n            Plus icon were loaded from open iconic, by defining the open iconic font CSS.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus\" Title=\"Plus\"></SfIcon>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfIcon"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to icon element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, font size of the icon customized using <c>@attributes</c> directive.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Copy\" @attributes=\"customAttribute\"></SfIcon>\n            @code{\n               Dictionary<string, object> customAttribute = new Dictionary<string, object>()\n               {\n                   { \"style\", \"font-size: 20px\" }\n               };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string which can be used to provide custom icon or custom style for icons.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to provide custom icon or custom style for icons. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            IconCss property used to append custom class to the predefined icons. This property will also render the customized icons like font-awesome icons.\n            </remarks>\n            <example>\n            In the below example custom icon is loaded using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-home\"></SfIcon>\n            ]]></code>\n            In the below example icon color is customized using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus color-red\"></SfIcon>\n            <style>\n                .color-red {\n                   color: red; \n                }\n            </style>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"Syncfusion.Blazor.Buttons.IconName","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the name of the built-in syncfusion icons to render. \n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> enumeration.\n            </value>\n            <remarks>\n            This property is used to render icons from predefined <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> options. You can use <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> to load custom icons.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Bold\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconName"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Syncfusion.Blazor.Buttons.IconSize","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the size of the icon.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconSize\" /> enumeration that specifies the size of the icon. \n            The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconSize.Medium\" />\n            </value>\n            <remarks>\n            The Size property used to set font size for icons. This property will considered only when icons are rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Paste\" Size=\"IconSize.Large\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Size","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconSize"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets title attribute for icon.\n            </summary>\n            <value>\n            Accepts a string. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            Title attribute used to improve accessibility with screen readers and show a tooltip on mouse over the icon.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Cut\" Title=\"Cut\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfIcon","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1666515834,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfIcon"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfIcon","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1620203878,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfIcon"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfIcon","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":594708400,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            RadioButton is a graphical user interface element that allows you to select one option from the choices. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic radiobutton is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfRadioButton Checked=\"true\"> \n            </SfRadioButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfRadioButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfRadioButton<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of radio button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the radio button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfRadioButton`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the Radio Button. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the Radio Button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LabelPosition"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the radio button state is changed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfRadioButton ValueChange=\"@Changed\"> \n            </SfRadioButton> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.GenericTyped":"True"}},{"HashCode":1367967595,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            RadioButton is a graphical user interface element that allows you to select one option from the choices. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic radiobutton is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfRadioButton Checked=\"true\"> \n            </SfRadioButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfRadioButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfRadioButton<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of radio button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the radio button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfRadioButton`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the Radio Button. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the Radio Button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LabelPosition"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the radio button state is changed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfRadioButton ValueChange=\"@Changed\"> \n            </SfRadioButton> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1873767811,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfRadioButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-63037345,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfRadioButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-981769344,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            The Blazor SpeedDial component that appears in front of all the contents of the page and \n            displays list of action buttons on click which is an extended version of FAB.\n            </summary> \n            <remarks>\n            The button of speed dial is positioned in relative to a view port of browser or <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Target\" />.\n            It can display a menu of related actions <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> or a custom content <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate\" />.\n            </remarks>\n            <example> \n            A simple SpeedDial with action items.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            A SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings\" />\n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />\n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialRadialSettings\" />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSpeedDial"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CloseIconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image to denote the speed dial is opened and displaying menu items.\n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is String.Empty.\n            </value> \n            <remarks> \n            If the `CloseIconCss` is <c>String.Empty</c>, then the <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.OpenIconCss\" /> is used when SpeedDial is open as well.\n            </remarks> \n        ","Metadata":{"Common.PropertyName":"CloseIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the content for the button of SpeedDial. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to customize the appearance of SpeedDial. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Buttons.LinearDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the speed dial action items (<see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />) display direction when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Mode\" /> is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Linear\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.LinearDirection\" /> enumeration that specifies the direction of speed dial items in linear mode. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LinearDirection.Auto\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Direction","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LinearDirection"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the SpeedDial. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the display mode (linear and radial mode) of speed dial action items. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialMode\" /> enumeration that specifies how the speed dial items are displayed. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Linear\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SpeedDialMode"}},{"Kind":"Components.Component","Name":"IsModal","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value that indicates whether the speeddial popup can be displayed as modal or modal less.\n            </summary>\n            <value> \n            <c>true</c>, if the Speed dial creates an overlay that disables interaction with other elements other than speed dial items. \n            If user clicks anywhere other than speed dial items then popup will get closed.\n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"IsModal","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Buttons.SpeedDialItem>","Documentation":"\n             <summary> \n             Gets or sets a template content for the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />. The template content is defined as a child content of <b>ItemTemplate</b> tag directive\n             </summary> \n             <value> \n             The template content. The default value is <c>null</c>. \n             </value> \n             <remarks>\n             The `ItemTemplate` used to define custom template for speed dial item. Use the template’s context parameter to access <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> properties.\n             </remarks>\n             <example> \n             SpeedDial with item template.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n                <ItemTemplate>\n                     <div style = \"border: 1px solid lightgreen; background-color:white;\" >\n                         <span>@context.Text</span>\n                     </div>\n                </ItemTemplate> \n            </SfSpeedDial> \n             ]]></code> \n             </example>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Buttons.SpeedDialItem>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OpenIconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image for the button of SpeedDial when it's closed.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the SpeedDial. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OpenIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OpensOnHover","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to open the popup when the button of SpeedDial is hovered. By default, SpeedDial opens popup on click action.\n            </summary> \n            <value> \n            <c>true</c>, if the SpeedDial opens popup on mouse hover action. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OpensOnHover","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of icon in the button of speed dial. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconPosition\" /> enumeration that specifies the position of icon. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" />.\n            </value> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"PopupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a template content for popup of SpeedDial. The template content is defined as a child content of <b>PopupTemplate</b> tag directive\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <example> \n            SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Buttons.FabPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of the button of Speed Dial relative to <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.FabPosition\" /> enumeration that specifies the position of SpeedDial. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.FabPosition.BottomRight\" />.\n            </value> \n            <remarks>\n            To refresh the position of button of speed dial on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Target\" /> resized, use <see cref=\"M:Syncfusion.Blazor.Buttons.SfSpeedDial.RefreshPositionAsync\" /> method. \n            The position will be refreshed automatically when browser resized.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.FabPosition"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the selector that points to the element in which the button of SpeedDial will be positioned. \n            </summary> \n            <value> \n            The default value is <c>null</c> where button is positioned based on viewport of browser.\n            </value> \n            <remarks>\n            The target element must have relative position, else Button will get positioned based on the closest element which has relative position.\n            </remarks>\n            <example> \n            Simple SpeedDial with target.\n            <code><![CDATA[\n            <div id=\"target_element\" style=\"position:relative;\"></div>\n            <SfSpeedDial Content=\"Edit\" Target=\"#target_element\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the SpeedDial is visible or hidden. \n            </summary> \n            <value> \n            <c>true</c>, if the SpeedDial is visible. The default value is <c>true</c>. \n            </value> \n            <remarks> \n            Supports two-way binding. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to apply the primary style for the SpeedDial component.\n            </summary>\n            <value>\n            <c>true</c>, if the primary style is applied for SpeedDial component. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Visible\" /> property is changed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the SpeedDial including HTML element. If the child content is not specified, SpeedDial is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </remarks> \n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the SpeedDial button element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive. \n            <code><![CDATA[ \n            <SfSpeedDial style=\"width:200px\" Content=\"Edit\" > \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            In the below code example, aria-label (accessibility attribute) has been specified as an attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive. \n            <code><![CDATA[ \n            <SfSpeedDial aria-label=\"Edit\" OpenIconCss=\"EditIcon\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> rendering is completed.  \n             </summary>\n             <value>\n             An event callback function.\n             </value>\n             <example> \n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Created=\"created\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private created (){\n                     Console.WriteLine(\"SpeedDial Created\");\n                 }\n            }\n             ]]></code> \n             </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised when a speed dial action item is clicked.  \n             </summary>\n             <value>\n             An event callback function.\n             </value>\n             <example> \n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" ItemClicked=\"itemclicked\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private itemclicked(SpeedDialItemEventArgs args){\n                     Console.WriteLine(args.Item.Text + \" is SpeedDial Clicked\");\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"ItemClicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemRendered","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when a <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> is rendered.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemRendered","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the SpeedDial popup is closed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the SpeedDial popup is opened.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised before the speed dial popup is closed.  \n             </summary>\n             <value>\n             An event callback function.\n             </value>\n             <remarks> \n             <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Closing\" /> is a canceable event. To cancel the closing action of SpeedDial Popup, \n             set the <see cref=\"P:Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs.Cancel\" /> property as <c>true</c>.\n             </remarks> \n             <example> \n             SpeedDial with `Closing` event.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Closing=\"closing\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private closing(SpeedDialBeforeOpenCloseEventArgs args){\n                     args.Cancel = false; //Set as true to prevent closing of SpeedDial popup.\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"Closing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opening","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised before the speed dial popup is opened.    \n             </summary>\n             <value>\n             An event callback function.\n             </value>\n             <remarks> \n             <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Opening\" /> is a canceable event. To cancel the opening action of SpeedDial Popup , \n             set the <see cref=\"P:Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs.Cancel\" /> property as <c>true</c>.\n             </remarks> \n             <example> \n             SpeedDial with Opening event.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Opening=\"opening\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private opening(SpeedDialBeforeOpenCloseEventArgs args){\n                     args.Cancel = false; //Set as true to prevent opening of SpeedDial popup.\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"Opening","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial"}},{"HashCode":-137813131,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            The Blazor SpeedDial component that appears in front of all the contents of the page and \n            displays list of action buttons on click which is an extended version of FAB.\n            </summary> \n            <remarks>\n            The button of speed dial is positioned in relative to a view port of browser or <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Target\" />.\n            It can display a menu of related actions <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> or a custom content <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate\" />.\n            </remarks>\n            <example> \n            A simple SpeedDial with action items.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            A SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings\" />\n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />\n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialRadialSettings\" />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfSpeedDial"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CloseIconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image to denote the speed dial is opened and displaying menu items.\n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is String.Empty.\n            </value> \n            <remarks> \n            If the `CloseIconCss` is <c>String.Empty</c>, then the <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.OpenIconCss\" /> is used when SpeedDial is open as well.\n            </remarks> \n        ","Metadata":{"Common.PropertyName":"CloseIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the content for the button of SpeedDial. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to customize the appearance of SpeedDial. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Buttons.LinearDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the speed dial action items (<see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />) display direction when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Mode\" /> is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Linear\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.LinearDirection\" /> enumeration that specifies the direction of speed dial items in linear mode. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LinearDirection.Auto\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Direction","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.LinearDirection"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the SpeedDial. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the display mode (linear and radial mode) of speed dial action items. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialMode\" /> enumeration that specifies how the speed dial items are displayed. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Linear\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SpeedDialMode"}},{"Kind":"Components.Component","Name":"IsModal","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value that indicates whether the speeddial popup can be displayed as modal or modal less.\n            </summary>\n            <value> \n            <c>true</c>, if the Speed dial creates an overlay that disables interaction with other elements other than speed dial items. \n            If user clicks anywhere other than speed dial items then popup will get closed.\n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"IsModal","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Buttons.SpeedDialItem>","Documentation":"\n             <summary> \n             Gets or sets a template content for the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />. The template content is defined as a child content of <b>ItemTemplate</b> tag directive\n             </summary> \n             <value> \n             The template content. The default value is <c>null</c>. \n             </value> \n             <remarks>\n             The `ItemTemplate` used to define custom template for speed dial item. Use the template’s context parameter to access <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> properties.\n             </remarks>\n             <example> \n             SpeedDial with item template.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n                <ItemTemplate>\n                     <div style = \"border: 1px solid lightgreen; background-color:white;\" >\n                         <span>@context.Text</span>\n                     </div>\n                </ItemTemplate> \n            </SfSpeedDial> \n             ]]></code> \n             </example>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.Buttons.SpeedDialItem>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OpenIconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image for the button of SpeedDial when it's closed.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the SpeedDial. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OpenIconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OpensOnHover","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to open the popup when the button of SpeedDial is hovered. By default, SpeedDial opens popup on click action.\n            </summary> \n            <value> \n            <c>true</c>, if the SpeedDial opens popup on mouse hover action. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OpensOnHover","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of icon in the button of speed dial. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconPosition\" /> enumeration that specifies the position of icon. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" />.\n            </value> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"PopupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a template content for popup of SpeedDial. The template content is defined as a child content of <b>PopupTemplate</b> tag directive\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <example> \n            SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Buttons.FabPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of the button of Speed Dial relative to <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.FabPosition\" /> enumeration that specifies the position of SpeedDial. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.FabPosition.BottomRight\" />.\n            </value> \n            <remarks>\n            To refresh the position of button of speed dial on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Target\" /> resized, use <see cref=\"M:Syncfusion.Blazor.Buttons.SfSpeedDial.RefreshPositionAsync\" /> method. \n            The position will be refreshed automatically when browser resized.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.FabPosition"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the selector that points to the element in which the button of SpeedDial will be positioned. \n            </summary> \n            <value> \n            The default value is <c>null</c> where button is positioned based on viewport of browser.\n            </value> \n            <remarks>\n            The target element must have relative position, else Button will get positioned based on the closest element which has relative position.\n            </remarks>\n            <example> \n            Simple SpeedDial with target.\n            <code><![CDATA[\n            <div id=\"target_element\" style=\"position:relative;\"></div>\n            <SfSpeedDial Content=\"Edit\" Target=\"#target_element\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the SpeedDial is visible or hidden. \n            </summary> \n            <value> \n            <c>true</c>, if the SpeedDial is visible. The default value is <c>true</c>. \n            </value> \n            <remarks> \n            Supports two-way binding. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to apply the primary style for the SpeedDial component.\n            </summary>\n            <value>\n            <c>true</c>, if the primary style is applied for SpeedDial component. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Visible\" /> property is changed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the SpeedDial including HTML element. If the child content is not specified, SpeedDial is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </remarks> \n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the SpeedDial button element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive. \n            <code><![CDATA[ \n            <SfSpeedDial style=\"width:200px\" Content=\"Edit\" > \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            In the below code example, aria-label (accessibility attribute) has been specified as an attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive. \n            <code><![CDATA[ \n            <SfSpeedDial aria-label=\"Edit\" OpenIconCss=\"EditIcon\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> rendering is completed.  \n             </summary>\n             <value>\n             An event callback function.\n             </value>\n             <example> \n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Created=\"created\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private created (){\n                     Console.WriteLine(\"SpeedDial Created\");\n                 }\n            }\n             ]]></code> \n             </example>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised when a speed dial action item is clicked.  \n             </summary>\n             <value>\n             An event callback function.\n             </value>\n             <example> \n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" ItemClicked=\"itemclicked\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private itemclicked(SpeedDialItemEventArgs args){\n                     Console.WriteLine(args.Item.Text + \" is SpeedDial Clicked\");\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"ItemClicked","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemRendered","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when a <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> is rendered.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemRendered","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the SpeedDial popup is closed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the SpeedDial popup is opened.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised before the speed dial popup is closed.  \n             </summary>\n             <value>\n             An event callback function.\n             </value>\n             <remarks> \n             <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Closing\" /> is a canceable event. To cancel the closing action of SpeedDial Popup, \n             set the <see cref=\"P:Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs.Cancel\" /> property as <c>true</c>.\n             </remarks> \n             <example> \n             SpeedDial with `Closing` event.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Closing=\"closing\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private closing(SpeedDialBeforeOpenCloseEventArgs args){\n                     args.Cancel = false; //Set as true to prevent closing of SpeedDial popup.\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"Closing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opening","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised before the speed dial popup is opened.    \n             </summary>\n             <value>\n             An event callback function.\n             </value>\n             <remarks> \n             <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Opening\" /> is a canceable event. To cancel the opening action of SpeedDial Popup , \n             set the <see cref=\"P:Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs.Cancel\" /> property as <c>true</c>.\n             </remarks> \n             <example> \n             SpeedDial with Opening event.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Opening=\"opening\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private opening(SpeedDialBeforeOpenCloseEventArgs args){\n                     args.Cancel = false; //Set as true to prevent opening of SpeedDial popup.\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"Opening","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1782490115,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.ItemTemplate","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n             <summary> \n             Gets or sets a template content for the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />. The template content is defined as a child content of <b>ItemTemplate</b> tag directive\n             </summary> \n             <value> \n             The template content. The default value is <c>null</c>. \n             </value> \n             <remarks>\n             The `ItemTemplate` used to define custom template for speed dial item. Use the template’s context parameter to access <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> properties.\n             </remarks>\n             <example> \n             SpeedDial with item template.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n                <ItemTemplate>\n                     <div style = \"border: 1px solid lightgreen; background-color:white;\" >\n                         <span>@context.Text</span>\n                     </div>\n                </ItemTemplate> \n            </SfSpeedDial> \n             ]]></code> \n             </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfSpeedDial"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":752483712,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.ItemTemplate","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n             <summary> \n             Gets or sets a template content for the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />. The template content is defined as a child content of <b>ItemTemplate</b> tag directive\n             </summary> \n             <value> \n             The template content. The default value is <c>null</c>. \n             </value> \n             <remarks>\n             The `ItemTemplate` used to define custom template for speed dial item. Use the template’s context parameter to access <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> properties.\n             </remarks>\n             <example> \n             SpeedDial with item template.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n                <ItemTemplate>\n                     <div style = \"border: 1px solid lightgreen; background-color:white;\" >\n                         <span>@context.Text</span>\n                     </div>\n                </ItemTemplate> \n            </SfSpeedDial> \n             ]]></code> \n             </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.Buttons.SfSpeedDial"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1489255102,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a template content for popup of SpeedDial. The template content is defined as a child content of <b>PopupTemplate</b> tag directive\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <example> \n            SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupTemplate","ParentTag":"SfSpeedDial"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1878599344,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a template content for popup of SpeedDial. The template content is defined as a child content of <b>PopupTemplate</b> tag directive\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <example> \n            SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupTemplate","ParentTag":"Syncfusion.Blazor.Buttons.SfSpeedDial"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-262369809,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the SpeedDial including HTML element. If the child content is not specified, SpeedDial is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </remarks> \n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSpeedDial"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1597617273,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the SpeedDial including HTML element. If the child content is not specified, SpeedDial is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </remarks> \n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfSpeedDial"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2082340348,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Provides options to customize the animation applied while opening and closing the popup of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" />.\n            </summary> \n            <example> \n            A simple SpeedDial with animation settings.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n                <SpeedDialAnimationSettings Effect=SpeedDialAnimationEffect.Zoom/>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the duration in milliseconds that the animation takes to open or close the popup.\n            </summary> \n            <value> \n            Accepts an integer value. The default value is <c>400</c>.\n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the value that indicates the delay before starting the animation.  \n            </summary> \n            <value> \n            Accepts an integer value. The default value is <c>0</c>.\n            </value> \n        ","Metadata":{"Common.PropertyName":"Delay","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the type of animation effect used for opening and closing of the Speed Dial items.\n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect\" /> enumeration that specifies the animation effect. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect.Fade\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialAnimationSettings"}},{"HashCode":1670841834,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Provides options to customize the animation applied while opening and closing the popup of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" />.\n            </summary> \n            <example> \n            A simple SpeedDial with animation settings.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n                <SpeedDialAnimationSettings Effect=SpeedDialAnimationEffect.Zoom/>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the duration in milliseconds that the animation takes to open or close the popup.\n            </summary> \n            <value> \n            Accepts an integer value. The default value is <c>400</c>.\n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the value that indicates the delay before starting the animation.  \n            </summary> \n            <value> \n            Accepts an integer value. The default value is <c>0</c>.\n            </value> \n        ","Metadata":{"Common.PropertyName":"Delay","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the type of animation effect used for opening and closing of the Speed Dial items.\n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect\" /> enumeration that specifies the animation effect. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect.Fade\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":284582203,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialItem","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            A class that represents action item of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> component.\n            </summary>\n            <remarks>\n            You can render icon only, text only, icon and text speeddial action item by specifying value to corresponding property.\n            </remarks>\n            <example>\n            In the below code example, a basic SpeedDial item has been added using <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\" IconCss=\"e-icons e-cut\"></SpeedDialItem>\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image in speed dial item.   \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the SpeedDial item. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the `SpeedDialItem`. \n            </summary>\n            <value> \n            <c>true</c>, if the item is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the text content of `SpeedDialItem`. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks>\n            Text won't be displayed when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Mode\" /> is `Radial`.\n            Also, in `Linear` mode text won't be displayed when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Direction\" /> is `Left` or `Right`.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the title of `SpeedDialItem` to display tooltip. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a unique value for the `SpeedDialItem` which can be used to identify the item in event args. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the breadcrumb item element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, title attribute added as inline in <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\" IconCss=\"e-icons e-cut\" style=\"color:red;\"></SpeedDialItem>\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItem","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialItem"}},{"HashCode":-684425836,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialItem","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            A class that represents action item of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> component.\n            </summary>\n            <remarks>\n            You can render icon only, text only, icon and text speeddial action item by specifying value to corresponding property.\n            </remarks>\n            <example>\n            In the below code example, a basic SpeedDial item has been added using <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\" IconCss=\"e-icons e-cut\"></SpeedDialItem>\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SpeedDialItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image in speed dial item.   \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the SpeedDial item. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the `SpeedDialItem`. \n            </summary>\n            <value> \n            <c>true</c>, if the item is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the text content of `SpeedDialItem`. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks>\n            Text won't be displayed when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Mode\" /> is `Radial`.\n            Also, in `Linear` mode text won't be displayed when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Direction\" /> is `Left` or `Right`.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the title of `SpeedDialItem` to display tooltip. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a unique value for the `SpeedDialItem` which can be used to identify the item in event args. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the breadcrumb item element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, title attribute added as inline in <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\" IconCss=\"e-icons e-cut\" style=\"color:red;\"></SpeedDialItem>\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItem","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1464359516,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialItems","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic SpeedDial has been rendered using <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for the SpeedDialItem (Child) from the SpeedDial(Parent) .\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItems","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialItems"}},{"HashCode":1853413101,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialItems","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic SpeedDial has been rendered using <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SpeedDialItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for the SpeedDialItem (Child) from the SpeedDial(Parent) .\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItems","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1976517494,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SpeedDialItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for the SpeedDialItem (Child) from the SpeedDial(Parent) .\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SpeedDialItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialItems","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":968021877,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SpeedDialItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for the SpeedDialItem (Child) from the SpeedDial(Parent) .\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SpeedDialItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItems.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialItems","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":286927570,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Provides the options to customize the speed dial action buttons when `Mode` of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Radial\" />.\n            </summary> \n            <example> \n            A simple SpeedDial with animation settings.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\" Mode=SpeedDialMode.Radial > \n                <SpeedDialItems>\n                    <SpeedDialItem IconCss=\"e-icons e-cut\"></SpeedDialItem>\n                    <SpeedDialItem IconCss=\"e-icons e-paste\"></SpeedDialItem>\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                </SpeedDialItems>\n               <SpeedDialRadialSettings OffSet = \"150px\" ></ SpeedDialRadialSettings >\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialRadialSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"EndAngle","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the value that indicates the end angle of speed dial items placement.\n            </summary> \n            <value> \n            Accepts the values between 0 and 360. The default value is <c>-1</c>&gt;.\n            </value> \n            <remarks>\n            When a value outside the accepted value range, then the provided value is ignored, and the angle is calculated based on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Position\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EndAngle","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"StartAngle","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the value that indicates the start angle of speeddial items placement.\n            </summary> \n            <value> \n            Accepts the values between 0 and 360. The default value is <c>-1</c>&gt;.\n            </value> \n            <remarks>\n            When a value outside the accepted value range, then the provided value is ignored, and the angle is calculated based on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Position\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"StartAngle","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OffSet","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the offset distance of speed dial items placement from the button of Speed Dial. \n            </summary> \n            <value> \n            Accepts the string values. The default value is <c>100px</c>&gt;.\n            </value> \n        ","Metadata":{"Common.PropertyName":"OffSet","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Buttons.RadialDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the speed dial action items (<see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />) placement order.\n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.RadialDirection\" /> enumeration that specifies the direction. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.RadialDirection.Auto\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Direction","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.RadialDirection"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialRadialSettings"}},{"HashCode":-1876545185,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Provides the options to customize the speed dial action buttons when `Mode` of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Radial\" />.\n            </summary> \n            <example> \n            A simple SpeedDial with animation settings.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\" Mode=SpeedDialMode.Radial > \n                <SpeedDialItems>\n                    <SpeedDialItem IconCss=\"e-icons e-cut\"></SpeedDialItem>\n                    <SpeedDialItem IconCss=\"e-icons e-paste\"></SpeedDialItem>\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                </SpeedDialItems>\n               <SpeedDialRadialSettings OffSet = \"150px\" ></ SpeedDialRadialSettings >\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"EndAngle","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the value that indicates the end angle of speed dial items placement.\n            </summary> \n            <value> \n            Accepts the values between 0 and 360. The default value is <c>-1</c>&gt;.\n            </value> \n            <remarks>\n            When a value outside the accepted value range, then the provided value is ignored, and the angle is calculated based on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Position\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EndAngle","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"StartAngle","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the value that indicates the start angle of speeddial items placement.\n            </summary> \n            <value> \n            Accepts the values between 0 and 360. The default value is <c>-1</c>&gt;.\n            </value> \n            <remarks>\n            When a value outside the accepted value range, then the provided value is ignored, and the angle is calculated based on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Position\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"StartAngle","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OffSet","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the offset distance of speed dial items placement from the button of Speed Dial. \n            </summary> \n            <value> \n            Accepts the string values. The default value is <c>100px</c>&gt;.\n            </value> \n        ","Metadata":{"Common.PropertyName":"OffSet","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Buttons.RadialDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the speed dial action items (<see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />) placement order.\n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.RadialDirection\" /> enumeration that specifies the direction. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.RadialDirection.Auto\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Direction","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.RadialDirection"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SpeedDialRadialSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-516380143,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Switch is a graphical user interface element that allows you to toggle between checked and unchecked state. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic switch is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfSwitch Checked=\"true\"> \n            </SfSwitch> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSwitch"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfSwitch<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OnLabel","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OffLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component.\n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OffLabel","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the switch state is changed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSwitch ValueChange=\"@Changed\"> \n            </SfSwitch> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.GenericTyped":"True"}},{"HashCode":-36828648,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Switch is a graphical user interface element that allows you to toggle between checked and unchecked state. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic switch is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfSwitch Checked=\"true\"> \n            </SfSwitch> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfSwitch"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfSwitch<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OnLabel","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OffLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component.\n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OffLabel","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the switch state is changed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSwitch ValueChange=\"@Changed\"> \n            </SfSwitch> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Common.GloballyQualifiedTypeName":"TChecked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TChecked>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TChecked>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-638813448,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSwitch"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1888446011,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfSwitch"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1142097590,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons._Imports","AssemblyName":"Syncfusion.Blazor.Buttons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":1134768358,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons._Imports","AssemblyName":"Syncfusion.Blazor.Buttons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1924767828,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Provides the view for  rendering of speeddial items.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialItemView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial (Parent) instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Parent","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SfSpeedDial"}},{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItem","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial item value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Item","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SpeedDialItem"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial item index.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView","Common.TypeNamespace":"Syncfusion.Blazor.Buttons.Internal","Common.TypeNameIdentifier":"SpeedDialItemView"}},{"HashCode":604606887,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Provides the view for  rendering of speeddial items.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial (Parent) instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Parent","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SfSpeedDial"}},{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItem","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial item value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Item","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SpeedDialItem"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial item index.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView","Common.TypeNamespace":"Syncfusion.Blazor.Buttons.Internal","Common.TypeNameIdentifier":"SpeedDialItemView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-815721312,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup","AssemblyName":"Syncfusion.Blazor.Buttons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialPopup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Metadata":{"Common.PropertyName":"Parent","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SfSpeedDial"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup","Common.TypeNamespace":"Syncfusion.Blazor.Buttons.Internal","Common.TypeNameIdentifier":"SpeedDialPopup"}},{"HashCode":59986681,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup","AssemblyName":"Syncfusion.Blazor.Buttons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Metadata":{"Common.PropertyName":"Parent","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.SfSpeedDial"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup","Common.TypeNamespace":"Syncfusion.Blazor.Buttons.Internal","Common.TypeNameIdentifier":"SpeedDialPopup","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2051438711,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SfMediaQuery","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"\n            <summary>\n            The Blazor Media Query component allows developers to create responsive layouts.\n            The component tracks changes in the browser size and notifies when the browser size matches the specified media query.\n            The <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> class is used to store information about each media query breakpoint, including the <c>Breakpoint</c> name and the <c>MediaQuery</c> itself. \n            The <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> property returns the <c>Breakpoint</c> of the <c>MediaBreakpoint</c> in the <c>MediaBreakpoints</c> collection that matches the current browser size. \n            This allows developers to easily create responsive layouts that adapt to different screen sizes and device types.\n            </summary>\n            <example>\n            <code><![CDATA[\n            @if (String.IsNullOrEmpty(activeBreakpoint))\n            {\n                <label>Loading...</label>\n            }\n            else\n            {\n                @if(activeBreakpoint == \"Small\")\n                {\n                    <button>Mobile</button>\n                }\n                else\n                {\n                    <button>Desktop</button>\n                }\n            }\n            <SfMediaQuery @bind-ActiveBreakpoint=\"@activeBreakpoint\"></SfMediaQuery>\n            @code {\n                private string activeBreakpoint;\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMediaQuery"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ActiveBreakpoint","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> of the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" /> in <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.MediaBreakpoints\" /> collection that matches with the current browser size.\n            Based on the <c>ActiveBreakpoint</c>, developers can easily create responsive layouts that adapt to different screen sizes and device types.\n            </summary>\n            <value>\n            A string value that represents the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> of the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" /> in <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.MediaBreakpoints\" /> collection that matches with the browser size.\n            The default value is <c>null</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ActiveBreakpoint","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MediaBreakpoints","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.MediaBreakpoint>","Documentation":"\n            <summary>\n            Gets or sets the collection of <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> that contains the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> and <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" />.\n            <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is set when a <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" /> matches with the current browser size from this collection.\n            </summary>\n            <value>\n            A collection of <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> that contains the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> and <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" />.\n            The defaul value is empty collection.\n            </value>\n            <remarks>\n            If <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.MediaBreakpoints\" /> is not specified, <see cref=\"T:Syncfusion.Blazor.SfMediaQuery\" /> will use built-in collection of <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> that contains <see cref=\"F:Syncfusion.Blazor.SfMediaQuery.Small\" />, <see cref=\"F:Syncfusion.Blazor.SfMediaQuery.Medium\" /> and <see cref=\"F:Syncfusion.Blazor.SfMediaQuery.Large\" /> media queries.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MediaBreakpoints","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.MediaBreakpoint>"}},{"Kind":"Components.Component","Name":"ActiveBreakpointChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets the event that is triggered when the <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is changed.\n            </summary>\n            <value> \n            An event call back function. \n            </value>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ActiveBreakpointChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBreakpointChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.BreakpointChangedEventArgs>","Documentation":"\n            <summary> \n             Gets or sets the event that is triggered when the <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is changed.\n            </summary> \n            <value> \n            An event call back function. \n            </value>\n        ","Metadata":{"Common.PropertyName":"OnBreakpointChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.BreakpointChangedEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SfMediaQuery","Common.TypeNamespace":"Syncfusion.Blazor","Common.TypeNameIdentifier":"SfMediaQuery"}},{"HashCode":-850116990,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SfMediaQuery","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"\n            <summary>\n            The Blazor Media Query component allows developers to create responsive layouts.\n            The component tracks changes in the browser size and notifies when the browser size matches the specified media query.\n            The <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> class is used to store information about each media query breakpoint, including the <c>Breakpoint</c> name and the <c>MediaQuery</c> itself. \n            The <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> property returns the <c>Breakpoint</c> of the <c>MediaBreakpoint</c> in the <c>MediaBreakpoints</c> collection that matches the current browser size. \n            This allows developers to easily create responsive layouts that adapt to different screen sizes and device types.\n            </summary>\n            <example>\n            <code><![CDATA[\n            @if (String.IsNullOrEmpty(activeBreakpoint))\n            {\n                <label>Loading...</label>\n            }\n            else\n            {\n                @if(activeBreakpoint == \"Small\")\n                {\n                    <button>Mobile</button>\n                }\n                else\n                {\n                    <button>Desktop</button>\n                }\n            }\n            <SfMediaQuery @bind-ActiveBreakpoint=\"@activeBreakpoint\"></SfMediaQuery>\n            @code {\n                private string activeBreakpoint;\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SfMediaQuery"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ActiveBreakpoint","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> of the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" /> in <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.MediaBreakpoints\" /> collection that matches with the current browser size.\n            Based on the <c>ActiveBreakpoint</c>, developers can easily create responsive layouts that adapt to different screen sizes and device types.\n            </summary>\n            <value>\n            A string value that represents the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> of the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" /> in <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.MediaBreakpoints\" /> collection that matches with the browser size.\n            The default value is <c>null</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ActiveBreakpoint","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MediaBreakpoints","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.MediaBreakpoint>","Documentation":"\n            <summary>\n            Gets or sets the collection of <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> that contains the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> and <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" />.\n            <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is set when a <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" /> matches with the current browser size from this collection.\n            </summary>\n            <value>\n            A collection of <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> that contains the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> and <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" />.\n            The defaul value is empty collection.\n            </value>\n            <remarks>\n            If <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.MediaBreakpoints\" /> is not specified, <see cref=\"T:Syncfusion.Blazor.SfMediaQuery\" /> will use built-in collection of <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> that contains <see cref=\"F:Syncfusion.Blazor.SfMediaQuery.Small\" />, <see cref=\"F:Syncfusion.Blazor.SfMediaQuery.Medium\" /> and <see cref=\"F:Syncfusion.Blazor.SfMediaQuery.Large\" /> media queries.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MediaBreakpoints","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.MediaBreakpoint>"}},{"Kind":"Components.Component","Name":"ActiveBreakpointChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets the event that is triggered when the <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is changed.\n            </summary>\n            <value> \n            An event call back function. \n            </value>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ActiveBreakpointChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.String>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBreakpointChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.BreakpointChangedEventArgs>","Documentation":"\n            <summary> \n             Gets or sets the event that is triggered when the <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is changed.\n            </summary> \n            <value> \n            An event call back function. \n            </value>\n        ","Metadata":{"Common.PropertyName":"OnBreakpointChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.BreakpointChangedEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SfMediaQuery","Common.TypeNamespace":"Syncfusion.Blazor","Common.TypeNameIdentifier":"SfMediaQuery","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":576606091,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Core._Imports","AssemblyName":"Syncfusion.Blazor.Core","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Core._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Core","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":159163373,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Core._Imports","AssemblyName":"Syncfusion.Blazor.Core","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Core._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Core._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Core","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1552437943,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.ModuleInitComponent","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"\n            <summary>\n            Resource manager component for loading init interop script in .NET Core 3.0 applications.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ModuleInitComponent"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.ModuleInitComponent","Common.TypeNamespace":"Syncfusion.Blazor.Internal","Common.TypeNameIdentifier":"ModuleInitComponent"}},{"HashCode":-519296225,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.ModuleInitComponent","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"\n            <summary>\n            Resource manager component for loading init interop script in .NET Core 3.0 applications.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Internal.ModuleInitComponent"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.ModuleInitComponent","Common.TypeNamespace":"Syncfusion.Blazor.Internal","Common.TypeNameIdentifier":"ModuleInitComponent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-603133930,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.SfMessage","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            The Blazor Message component displays messages with severity by differentiating icons and colors to denote the importance and context of the message to the end user.\n            </summary>\n            <example>\n            The below code example shows Message component with simple content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Success\">\n                <p>The <b>Nature.png</b> file is uploaded successfully.</p>\n            </SfMessage>\n            ]]></code>\n            The below code example shows the Message component with multiline content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Info\" ShowIcon=\"false\">\n                <div>\n                    <h3>Transform your web apps today with Syncfusion Blazor components</h3>\n                    <ul>\n                        <li><span>70+ high-performance and responsive UI components</span></li>\n                        <li><span>Dedicated support</span></li>\n                        <li><span>Hassle-free licensing</span></li>\n                    </ul>\n                    <div><a href=\"https://www.syncfusion.com/downloads/blazor/\" target=\"_blank\"><button>Try It for Free</button></a></div>\n                </div>\n            </SfMessage>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the Message component, including the HTML elements.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Notifications.SfMessage\" /> tag directive is either a string or HTML elements.\n            </remarks>\n            <example>\n            The below code example shows the Message component with simple content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Success\">\n                <p>The <b>Nature.png</b> file is uploaded successfully.</p>\n            </SfMessage>\n            ]]></code>\n            The below code example shows the Message component with multiline content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Info\" ShowIcon=\"false\">\n                <div>\n                    <h3>Transform your web apps today with Syncfusion Blazor components</h3>\n                    <ul>\n                        <li><span>70+ high-performance and responsive UI components</span></li>\n                        <li><span>Dedicated support</span></li>\n                        <li><span>Hassle-free licensing</span></li>\n                    </ul>\n                    <div><a href=\"https://www.syncfusion.com/downloads/blazor/\" target=\"_blank\"><button>Try It for Free</button></a></div>\n                </div>\n            </SfMessage>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ContentAlignment","TypeName":"Syncfusion.Blazor.HorizontalAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the alignment of message content. The available content alignments are Left, Center and Right.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.HorizontalAlign\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.HorizontalAlign.Left\" />.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ContentAlignment","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.HorizontalAlign"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class or multiple classes separated by space that can be appended with the root element of the Message component to customize a message.\n            </summary>\n            <value>\n            The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            The below code example shows border customization of the Message component.\n            <code><![CDATA[\n            <SfMessage CssClass=\"custom\">\n               Conference Room no 01 / Building 135 10:00 AM - 10:30 AM\n            </SfMessage>\n            <style>\n            .custom {\n                border-color: pink;\n            }\n            </style>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Severity","TypeName":"Syncfusion.Blazor.Notifications.MessageSeverity","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the severity of the message, which is used to define the appearance (icons and colors) of the message. The available severity messages are <c>Normal</c>, <c>Info</c>, <c>Success</c>, <c>Warning</c> and <c>Error</c>.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.MessageSeverity\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.MessageSeverity.Normal\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Severity","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.MessageSeverity"}},{"Kind":"Components.Component","Name":"ShowCloseIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to show or hide the close icon in the Message component. The end user can click the close icon to hide the message. The <see cref=\"P:Syncfusion.Blazor.Notifications.SfMessage.Closed\" /> event triggered when message closed.\n            </summary>\n            <value>\n            <c>true</c>, the close icon for the Message component is visible at the top right corner of the Message component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCloseIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to show or hide the severity icon in the Message component. When set to true, the severity icon is displayed at the left edge of the Message component.\n            This icon will be distinctive based on the <see cref=\"P:Syncfusion.Blazor.Notifications.SfMessage.Severity\" /> property.\n            </summary>\n            <value>\n            <c>false</c> hides the severity icon in the Message component. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Variant","TypeName":"Syncfusion.Blazor.Notifications.MessageVariant","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the variant from predefined appearance variants to display the content of the Message component. The available variants are <c>Text</c>, <c>Outlined</c> and <c>Filled</c>.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.MessageVariant\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.MessageVariant.Text\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Variant","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.MessageVariant"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the visibility of the Message component. The Message component will be hidden when set to <c>false</c>.\n            </summary>\n            <value>\n            <c>false</c>, hides the Message component. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback for the bound Visible property value.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.MessageCloseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Message component is closed (hided) successfully.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.MessageCloseEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.SfMessage","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfMessage"}},{"HashCode":1403286945,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.SfMessage","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            The Blazor Message component displays messages with severity by differentiating icons and colors to denote the importance and context of the message to the end user.\n            </summary>\n            <example>\n            The below code example shows Message component with simple content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Success\">\n                <p>The <b>Nature.png</b> file is uploaded successfully.</p>\n            </SfMessage>\n            ]]></code>\n            The below code example shows the Message component with multiline content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Info\" ShowIcon=\"false\">\n                <div>\n                    <h3>Transform your web apps today with Syncfusion Blazor components</h3>\n                    <ul>\n                        <li><span>70+ high-performance and responsive UI components</span></li>\n                        <li><span>Dedicated support</span></li>\n                        <li><span>Hassle-free licensing</span></li>\n                    </ul>\n                    <div><a href=\"https://www.syncfusion.com/downloads/blazor/\" target=\"_blank\"><button>Try It for Free</button></a></div>\n                </div>\n            </SfMessage>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.SfMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the Message component, including the HTML elements.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Notifications.SfMessage\" /> tag directive is either a string or HTML elements.\n            </remarks>\n            <example>\n            The below code example shows the Message component with simple content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Success\">\n                <p>The <b>Nature.png</b> file is uploaded successfully.</p>\n            </SfMessage>\n            ]]></code>\n            The below code example shows the Message component with multiline content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Info\" ShowIcon=\"false\">\n                <div>\n                    <h3>Transform your web apps today with Syncfusion Blazor components</h3>\n                    <ul>\n                        <li><span>70+ high-performance and responsive UI components</span></li>\n                        <li><span>Dedicated support</span></li>\n                        <li><span>Hassle-free licensing</span></li>\n                    </ul>\n                    <div><a href=\"https://www.syncfusion.com/downloads/blazor/\" target=\"_blank\"><button>Try It for Free</button></a></div>\n                </div>\n            </SfMessage>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ContentAlignment","TypeName":"Syncfusion.Blazor.HorizontalAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the alignment of message content. The available content alignments are Left, Center and Right.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.HorizontalAlign\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.HorizontalAlign.Left\" />.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ContentAlignment","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.HorizontalAlign"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class or multiple classes separated by space that can be appended with the root element of the Message component to customize a message.\n            </summary>\n            <value>\n            The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            The below code example shows border customization of the Message component.\n            <code><![CDATA[\n            <SfMessage CssClass=\"custom\">\n               Conference Room no 01 / Building 135 10:00 AM - 10:30 AM\n            </SfMessage>\n            <style>\n            .custom {\n                border-color: pink;\n            }\n            </style>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Severity","TypeName":"Syncfusion.Blazor.Notifications.MessageSeverity","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the severity of the message, which is used to define the appearance (icons and colors) of the message. The available severity messages are <c>Normal</c>, <c>Info</c>, <c>Success</c>, <c>Warning</c> and <c>Error</c>.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.MessageSeverity\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.MessageSeverity.Normal\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Severity","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.MessageSeverity"}},{"Kind":"Components.Component","Name":"ShowCloseIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to show or hide the close icon in the Message component. The end user can click the close icon to hide the message. The <see cref=\"P:Syncfusion.Blazor.Notifications.SfMessage.Closed\" /> event triggered when message closed.\n            </summary>\n            <value>\n            <c>true</c>, the close icon for the Message component is visible at the top right corner of the Message component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCloseIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to show or hide the severity icon in the Message component. When set to true, the severity icon is displayed at the left edge of the Message component.\n            This icon will be distinctive based on the <see cref=\"P:Syncfusion.Blazor.Notifications.SfMessage.Severity\" /> property.\n            </summary>\n            <value>\n            <c>false</c> hides the severity icon in the Message component. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Variant","TypeName":"Syncfusion.Blazor.Notifications.MessageVariant","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the variant from predefined appearance variants to display the content of the Message component. The available variants are <c>Text</c>, <c>Outlined</c> and <c>Filled</c>.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.MessageVariant\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.MessageVariant.Text\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Variant","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.MessageVariant"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the visibility of the Message component. The Message component will be hidden when set to <c>false</c>.\n            </summary>\n            <value>\n            <c>false</c>, hides the Message component. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback for the bound Visible property value.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.MessageCloseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Message component is closed (hided) successfully.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.MessageCloseEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.SfMessage","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfMessage","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1405831810,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.SfMessage.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the child content for the Message component, including the HTML elements.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Notifications.SfMessage\" /> tag directive is either a string or HTML elements.\n            </remarks>\n            <example>\n            The below code example shows the Message component with simple content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Success\">\n                <p>The <b>Nature.png</b> file is uploaded successfully.</p>\n            </SfMessage>\n            ]]></code>\n            The below code example shows the Message component with multiline content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Info\" ShowIcon=\"false\">\n                <div>\n                    <h3>Transform your web apps today with Syncfusion Blazor components</h3>\n                    <ul>\n                        <li><span>70+ high-performance and responsive UI components</span></li>\n                        <li><span>Dedicated support</span></li>\n                        <li><span>Hassle-free licensing</span></li>\n                    </ul>\n                    <div><a href=\"https://www.syncfusion.com/downloads/blazor/\" target=\"_blank\"><button>Try It for Free</button></a></div>\n                </div>\n            </SfMessage>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfMessage"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.SfMessage.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfMessage","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1689790343,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.SfMessage.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the child content for the Message component, including the HTML elements.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Notifications.SfMessage\" /> tag directive is either a string or HTML elements.\n            </remarks>\n            <example>\n            The below code example shows the Message component with simple content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Success\">\n                <p>The <b>Nature.png</b> file is uploaded successfully.</p>\n            </SfMessage>\n            ]]></code>\n            The below code example shows the Message component with multiline content.\n            <code><![CDATA[\n            <SfMessage Severity=\"MessageSeverity.Info\" ShowIcon=\"false\">\n                <div>\n                    <h3>Transform your web apps today with Syncfusion Blazor components</h3>\n                    <ul>\n                        <li><span>70+ high-performance and responsive UI components</span></li>\n                        <li><span>Dedicated support</span></li>\n                        <li><span>Hassle-free licensing</span></li>\n                    </ul>\n                    <div><a href=\"https://www.syncfusion.com/downloads/blazor/\" target=\"_blank\"><button>Try It for Free</button></a></div>\n                </div>\n            </SfMessage>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Notifications.SfMessage"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.SfMessage.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfMessage","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1771135541,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.SfSkeleton","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            The Skeleton is a placeholder that animates a shimmer effect to let users know that the page’s content is loading at the moment.\n            In other terms, it simulates the layout of page content while loading the actual content.\n            </summary>\n            <remarks>\n            The `Width` property will be prioritize and used as dimension for Circle and Square <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" />.\n            </remarks>\n            <example>\n            Skeleton with default text shape.\n            <code><![CDATA[\n            <SfSkeleton Width=\"100%\" Height=\"10px\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with rectangle <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"100px\" Height=\"50px\" Shape=\"SkeletonType.Rectangle\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with fade effect <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Effect\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"50pt\" Shape=\"SkeletonType.Circle\" Effect=\"ShimmerEffect.Fade\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSkeleton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that defines the width of the Skeleton.\n            </summary>\n            <value>\n            Accept the CSS units as string value. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            The property will be prioritize and used as dimension when <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" /> is `Circle` and `Square`.\n            </remarks>\n            <example>\n            Skeleton with `50px` radius applied for <see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Circle\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that defines the height of the Skeleton.\n            </summary>\n            <value>\n            Accept the CSS units as string value. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Not required to define this property when <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" /> is `Circle` and `Square`.\n            </remarks>\n            <example>\n            Skeleton with `10px` height applied for <see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Text\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"100px\" Height=\"10px\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the visibility state of the Skeleton.\n            </summary>\n            <value>\n            <c>true</c>, if the Skeleton is in visible state; otherwise, <b>false</b>. The default value is <c>true</c>.\n            </value>\n            <example>\n            Skeleton rendered with hidden state.\n            <code>\n            <![CDATA[\n            <SfSkeleton Visible=\"false\" Width=\"50px\" Shape=\"SkeletonType.Square\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Shape","TypeName":"Syncfusion.Blazor.Notifications.SkeletonType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the shape of the Skeleton.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.SkeletonType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Text\" />.\n            </value>\n            <remarks>\n            If the <see cref=\"T:Syncfusion.Blazor.Notifications.SkeletonType\" /> is<see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Circle\" /> or<see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Square\" />, the width property value will be prioritize and used as dimension when <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" /> is Circle and Square.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Shape","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.SkeletonType"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Notifications.ShimmerEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the animation effect of the Skeleton.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.ShimmerEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.ShimmerEffect.Wave\" />.\n            </value>\n            <example>\n            Skeleton with fade effect.\n            <code>\n            <![CDATA[\n            <SfSkeleton Effect=\"ShimmerEffect.Fade\" Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with pulse effect.\n            <code>\n            <![CDATA[\n            <SfSkeleton Effect=\"ShimmerEffect.Pulse\" Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with no effect.\n            <code>\n            <![CDATA[\n            <SfSkeleton Effect=\"ShimmerEffect.None\" Width=\"100px\" Height=\"10px\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ShimmerEffect"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that defines 'aria-label' for Skeleton accessibility.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Loading...</c>.\n            </value>\n            <example>\n            Skeleton with custom ARIA label.\n            <code>\n            <![CDATA[\n            <SfSkeleton Label=\"Fetching data...\" Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of Skeleton. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of Skeleton. The default value is <c>string.Empty</c>. \n            </value>\n            <example>\n            In the below code example, Skeleton background color has been customized by using `CssClass` property.\n            <code>\n            <![CDATA[\n            <SfSkeleton CssClass=\"customize-skeleton\" Width=\"100px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            <style>\n            .e-skeleton.customize-skeleton {\n                background-color:darkgray;\n            }\n            </style>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.SfSkeleton","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfSkeleton"}},{"HashCode":480721895,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.SfSkeleton","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            The Skeleton is a placeholder that animates a shimmer effect to let users know that the page’s content is loading at the moment.\n            In other terms, it simulates the layout of page content while loading the actual content.\n            </summary>\n            <remarks>\n            The `Width` property will be prioritize and used as dimension for Circle and Square <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" />.\n            </remarks>\n            <example>\n            Skeleton with default text shape.\n            <code><![CDATA[\n            <SfSkeleton Width=\"100%\" Height=\"10px\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with rectangle <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"100px\" Height=\"50px\" Shape=\"SkeletonType.Rectangle\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with fade effect <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Effect\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"50pt\" Shape=\"SkeletonType.Circle\" Effect=\"ShimmerEffect.Fade\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.SfSkeleton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that defines the width of the Skeleton.\n            </summary>\n            <value>\n            Accept the CSS units as string value. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            The property will be prioritize and used as dimension when <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" /> is `Circle` and `Square`.\n            </remarks>\n            <example>\n            Skeleton with `50px` radius applied for <see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Circle\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that defines the height of the Skeleton.\n            </summary>\n            <value>\n            Accept the CSS units as string value. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Not required to define this property when <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" /> is `Circle` and `Square`.\n            </remarks>\n            <example>\n            Skeleton with `10px` height applied for <see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Text\" />.\n            <code>\n            <![CDATA[\n            <SfSkeleton Width=\"100px\" Height=\"10px\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the visibility state of the Skeleton.\n            </summary>\n            <value>\n            <c>true</c>, if the Skeleton is in visible state; otherwise, <b>false</b>. The default value is <c>true</c>.\n            </value>\n            <example>\n            Skeleton rendered with hidden state.\n            <code>\n            <![CDATA[\n            <SfSkeleton Visible=\"false\" Width=\"50px\" Shape=\"SkeletonType.Square\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Shape","TypeName":"Syncfusion.Blazor.Notifications.SkeletonType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the shape of the Skeleton.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.SkeletonType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Text\" />.\n            </value>\n            <remarks>\n            If the <see cref=\"T:Syncfusion.Blazor.Notifications.SkeletonType\" /> is<see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Circle\" /> or<see cref=\"F:Syncfusion.Blazor.Notifications.SkeletonType.Square\" />, the width property value will be prioritize and used as dimension when <see cref=\"P:Syncfusion.Blazor.Notifications.SfSkeleton.Shape\" /> is Circle and Square.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Shape","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.SkeletonType"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Notifications.ShimmerEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the animation effect of the Skeleton.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Notifications.ShimmerEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Notifications.ShimmerEffect.Wave\" />.\n            </value>\n            <example>\n            Skeleton with fade effect.\n            <code>\n            <![CDATA[\n            <SfSkeleton Effect=\"ShimmerEffect.Fade\" Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with pulse effect.\n            <code>\n            <![CDATA[\n            <SfSkeleton Effect=\"ShimmerEffect.Pulse\" Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            Skeleton with no effect.\n            <code>\n            <![CDATA[\n            <SfSkeleton Effect=\"ShimmerEffect.None\" Width=\"100px\" Height=\"10px\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ShimmerEffect"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that defines 'aria-label' for Skeleton accessibility.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Loading...</c>.\n            </value>\n            <example>\n            Skeleton with custom ARIA label.\n            <code>\n            <![CDATA[\n            <SfSkeleton Label=\"Fetching data...\" Width=\"50px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of Skeleton. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of Skeleton. The default value is <c>string.Empty</c>. \n            </value>\n            <example>\n            In the below code example, Skeleton background color has been customized by using `CssClass` property.\n            <code>\n            <![CDATA[\n            <SfSkeleton CssClass=\"customize-skeleton\" Width=\"100px\" Shape=\"SkeletonType.Circle\"></SfSkeleton>\n            <style>\n            .e-skeleton.customize-skeleton {\n                background-color:darkgray;\n            }\n            </style>\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.SfSkeleton","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfSkeleton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":877206038,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastAnimationSettings","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the show and hide animation settings of Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HideSettings","TypeName":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings","Documentation":"\n            <summary>\n            Specifies the animation to appear when hiding the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastHideAnimationSettings"}},{"Kind":"Components.Component","Name":"ShowSettings","TypeName":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings","Documentation":"\n            <summary>\n            Specifies the animation to appear when showing the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastShowAnimationSettings"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastAnimationSettings"}},{"HashCode":769220406,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastAnimationSettings","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the show and hide animation settings of Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HideSettings","TypeName":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings","Documentation":"\n            <summary>\n            Specifies the animation to appear when hiding the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastHideAnimationSettings"}},{"Kind":"Components.Component","Name":"ShowSettings","TypeName":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings","Documentation":"\n            <summary>\n            Specifies the animation to appear when showing the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastShowAnimationSettings"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":915687872,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ToastAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastAnimationSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1214816099,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Notifications.ToastAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastAnimationSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-649074935,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastButton","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Provides data to configure the Toast button properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Specifies the click event binding of action buttons created within Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the text `Content` of the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space in the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the Button is `Disabled`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space for the Button that is used to include an icon.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Positions the icon before or after the text content in the Button.\n            The possible values are: Left: The icon will be positioned to the left of the text content.\n            Right: The icon will be positioned to the right of the text content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows the appearance of the Button to be enhanced and visually appealing when set to `true`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Makes the Button toggle, when set to `true`.\n            When you click it, the state changes from normal to active.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Notifications.ButtonType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the type of the button.\n            Possible values are Button, Submit, and Reset.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ButtonType"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastButton","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastButton"}},{"HashCode":273616804,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastButton","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Provides data to configure the Toast button properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Specifies the click event binding of action buttons created within Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the text `Content` of the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space in the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the Button is `Disabled`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space for the Button that is used to include an icon.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Positions the icon before or after the text content in the Button.\n            The possible values are: Left: The icon will be positioned to the left of the text content.\n            Right: The icon will be positioned to the right of the text content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows the appearance of the Button to be enhanced and visually appealing when set to `true`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Makes the Button toggle, when set to `true`.\n            When you click it, the state changes from normal to active.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Notifications.ButtonType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the type of the button.\n            Possible values are Button, Submit, and Reset.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ButtonType"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastButton","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":811462363,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastButtons","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            A list of buttons that are used to configure the Toast buttons.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastButtons","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastButtons"}},{"HashCode":1840995947,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastButtons","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            A list of buttons that are used to configure the Toast buttons.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastButtons","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastButtons","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-480399917,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ToastButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastButtons.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastButtons","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2065078188,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Notifications.ToastButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastButtons.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastButtons","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-634607806,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastEvents","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Configure the event handlers to handle the events with Toast component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastBeforeOpenArgs>","Documentation":"\n            <summary>\n            Triggers the event before the toast shown.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastBeforeOpenArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastBeforeCloseArgs>","Documentation":"\n            <summary>\n            Triggers the event before the toast close.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastBeforeCloseArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastClickEventArgs>","Documentation":"\n            <summary>\n            The event will be fired while clicking on the Toast.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastCloseArgs>","Documentation":"\n            <summary>\n            Trigger the event after the Toast hides.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastCloseArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers the event after the Toast gets created.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers the event after the Toast gets destroyed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastOpenArgs>","Documentation":"\n            <summary>\n            Triggers the event after the Toast shown on the target container.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastOpenArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastEvents","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastEvents"}},{"HashCode":550416522,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastEvents","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Configure the event handlers to handle the events with Toast component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastBeforeOpenArgs>","Documentation":"\n            <summary>\n            Triggers the event before the toast shown.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastBeforeOpenArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastBeforeCloseArgs>","Documentation":"\n            <summary>\n            Triggers the event before the toast close.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastBeforeCloseArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastClickEventArgs>","Documentation":"\n            <summary>\n            The event will be fired while clicking on the Toast.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastCloseArgs>","Documentation":"\n            <summary>\n            Trigger the event after the Toast hides.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastCloseArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers the event after the Toast gets created.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers the event after the Toast gets destroyed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Notifications.ToastOpenArgs>","Documentation":"\n            <summary>\n            Triggers the event after the Toast shown on the target container.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Notifications.ToastOpenArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastEvents","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":815907364,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the animation to appear while hiding the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastHideAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the duration to animate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"Syncfusion.Blazor.Notifications.ToastEasing","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation timing function.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEasing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Notifications.ToastEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation name that should be applied on while opening and closing the toast.\n            If the user sets Fade animation, the toast will open with the `FadeIn` effect and close with the `FadeOut` effect.\n            The following are the list of animation effects available to configure to the toast:\n            1. Fade\n            2. FadeZoom\n            3. FlipLeftDown\n            4. FlipLeftUp\n            5. FlipRightDown\n            6. FlipRightUp\n            7. FlipXDown\n            8. FlipXUp\n            9. FlipYLeft\n            10. FlipYRight\n            11. SlideBottom\n            12. SlideLeft\n            13. SlideRight\n            14. SlideTop\n            15. Zoom\n            16. None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastHideAnimationSettings"}},{"HashCode":-1128889746,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the animation to appear while hiding the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the duration to animate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"Syncfusion.Blazor.Notifications.ToastEasing","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation timing function.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEasing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Notifications.ToastEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation name that should be applied on while opening and closing the toast.\n            If the user sets Fade animation, the toast will open with the `FadeIn` effect and close with the `FadeOut` effect.\n            The following are the list of animation effects available to configure to the toast:\n            1. Fade\n            2. FadeZoom\n            3. FlipLeftDown\n            4. FlipLeftUp\n            5. FlipRightDown\n            6. FlipRightUp\n            7. FlipXDown\n            8. FlipXUp\n            9. FlipYLeft\n            10. FlipYRight\n            11. SlideBottom\n            12. SlideLeft\n            13. SlideRight\n            14. SlideTop\n            15. Zoom\n            16. None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastHideAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":274350008,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ToastHideAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastHideAnimationSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1627651119,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastHideAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastHideAnimationSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1611519026,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastPosition","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Configures to display a toast in the custom position within the document or target.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastPosition"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"X","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the position of the Toast notification with respect to the target container's left edge.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"X","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Y","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the position of the Toast notification with respect to the target container's top edge.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Y","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastPosition","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastPosition"}},{"HashCode":353691544,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastPosition","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Configures to display a toast in the custom position within the document or target.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastPosition"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"X","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the position of the Toast notification with respect to the target container's left edge.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"X","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Y","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the position of the Toast notification with respect to the target container's top edge.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Y","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastPosition","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastPosition","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-47957731,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the animation to appear while showing the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastShowAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the duration to animate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"Syncfusion.Blazor.Notifications.ToastEasing","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation timing function.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEasing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Notifications.ToastEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation name that should be applied on while opening and closing the toast.\n            If the user sets Fade animation, the toast will open with the `FadeIn` effect and close with the `FadeOut` effect.\n            The following are the list of animation effects available to configure to the toast:\n            1. Fade\n            2. FadeZoom\n            3. FlipLeftDown\n            4. FlipLeftUp\n            5. FlipRightDown\n            6. FlipRightUp\n            7. FlipXDown\n            8. FlipXUp\n            9. FlipYLeft\n            10. FlipYRight\n            11. SlideBottom\n            12. SlideLeft\n            13. SlideRight\n            14. SlideTop\n            15. Zoom\n            16. None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastShowAnimationSettings"}},{"HashCode":515731132,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the animation to appear while showing the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the duration to animate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"Syncfusion.Blazor.Notifications.ToastEasing","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation timing function.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEasing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Notifications.ToastEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation name that should be applied on while opening and closing the toast.\n            If the user sets Fade animation, the toast will open with the `FadeIn` effect and close with the `FadeOut` effect.\n            The following are the list of animation effects available to configure to the toast:\n            1. Fade\n            2. FadeZoom\n            3. FlipLeftDown\n            4. FlipLeftUp\n            5. FlipRightDown\n            6. FlipRightUp\n            7. FlipXDown\n            8. FlipXUp\n            9. FlipYLeft\n            10. FlipYRight\n            11. SlideBottom\n            12. SlideLeft\n            13. SlideRight\n            14. SlideTop\n            15. Zoom\n            16. None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ToastEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastShowAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-525397702,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ToastShowAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastShowAnimationSettings","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1969536539,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastShowAnimationSettings.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastShowAnimationSettings","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-267379530,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastTemplates","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Configure templates to display within a header, content, and footer section of Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Title","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the toast title template.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the toast content template.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the toast template.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates"}},{"HashCode":2053527388,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.ToastTemplates","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Configure templates to display within a header, content, and footer section of Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.ToastTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Title","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the toast title template.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the toast content template.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the toast template.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1074360606,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-783538539,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Notifications.ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1303638264,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.Title","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Defines the toast title template.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Title","ParentTag":"ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.Title","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":763530586,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.Title","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Defines the toast title template.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Title","ParentTag":"Syncfusion.Blazor.Notifications.ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.Title","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-700114180,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.Content","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Defines the toast content template.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.Content","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1951299674,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.Content","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Defines the toast content template.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"Syncfusion.Blazor.Notifications.ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.Content","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2097138502,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.Template","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Defines the toast template.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.Template","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1859726502,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.ToastTemplates.Template","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Defines the toast template.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Notifications.ToastTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.ToastTemplates.Template","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"ToastTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":90702171,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.SfToast","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfToast"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the content to be displayed on the Toast.\n            Accepts selectors, string values and HTML elements.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines single/multiple classes (separated by space) to be used for customization of Toast.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance of Toast component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled for the component. Otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ExtendedTimeout","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the Toast display time duration after interacting with the Toast.\n            </summary>\n            <value>\n            Accepts an integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ExtendedTimeout","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the Toast in pixels/number/percentage. Number value is considered as pixels.\n            </summary>\n            <value>\n            Accepts the string value. The default value is <c>auto</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines CSS classes to specify an icon for the Toast which is to be displayed at top left corner of the Toast.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Icon","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NewestOnTop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the newly created Toast message display order while multiple toast's are added to page one after another.\n            By default, newly added Toast will be added after old Toast's.\n            </summary>\n            <value>\n            <c>true</c>, the new toast will be added after old toast's. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"NewestOnTop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ProgressDirection","TypeName":"Syncfusion.Blazor.Notifications.ProgressDirection","IsEnum":true,"Documentation":"\n            <summary>\n             Specifies the direction for the Toast progressBar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ProgressDirection","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ProgressDirection"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show the close button in Toast message to close the Toast.\n            </summary>\n            <value>\n            <c>true</c>, if the close button should be shown. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCloseButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowProgressBar","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show the progress bar to denote the Toast message display timeout.\n            </summary>\n            <value>\n            <c>true</c>, if the progress bar should be shown. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowProgressBar","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the target container where the Toast to be displayed.\n            Based on the target, the positions such as `Left`, `Top` will be applied to the Toast.\n            The default value is null, which refers the `document.body` element.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the HTML element/element ID as a string that can be displayed as a Toast content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContentTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Timeout","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the Toast display time duration on the page in milliseconds.\n            - Once the time expires, Toast message will be removed.\n            - Setting 0 as a time out value displays the Toast on the page until the user closes it manually.\n            </summary>\n            <value>\n            Accepts an integer value. The default value is <c>5000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Timeout","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the title to be displayed on the Toast.\n            Works only with string values.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Toast in pixels/numbers/percentage. Number value is considered as pixels.\n            In mobile devices, default width is considered as `100%`.\n            </summary>\n            <value>\n            Accepts the string value. The default value is <c>300px</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the unique identifier.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Sets the content of the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.SfToast","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfToast"}},{"HashCode":-122695044,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.SfToast","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n            <summary>\n            Toast is a small, nonblocking notification pop-up and it is shown to users with readable message content\n            at the bottom of the screen or at a specific target and disappears automatically after a few seconds (time-out)\n            with different animation effects.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.SfToast"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the content to be displayed on the Toast.\n            Accepts selectors, string values and HTML elements.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines single/multiple classes (separated by space) to be used for customization of Toast.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance of Toast component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled for the component. Otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ExtendedTimeout","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the Toast display time duration after interacting with the Toast.\n            </summary>\n            <value>\n            Accepts an integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ExtendedTimeout","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the Toast in pixels/number/percentage. Number value is considered as pixels.\n            </summary>\n            <value>\n            Accepts the string value. The default value is <c>auto</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Icon","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines CSS classes to specify an icon for the Toast which is to be displayed at top left corner of the Toast.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Icon","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NewestOnTop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the newly created Toast message display order while multiple toast's are added to page one after another.\n            By default, newly added Toast will be added after old Toast's.\n            </summary>\n            <value>\n            <c>true</c>, the new toast will be added after old toast's. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"NewestOnTop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ProgressDirection","TypeName":"Syncfusion.Blazor.Notifications.ProgressDirection","IsEnum":true,"Documentation":"\n            <summary>\n             Specifies the direction for the Toast progressBar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ProgressDirection","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Notifications.ProgressDirection"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show the close button in Toast message to close the Toast.\n            </summary>\n            <value>\n            <c>true</c>, if the close button should be shown. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCloseButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowProgressBar","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show the progress bar to denote the Toast message display timeout.\n            </summary>\n            <value>\n            <c>true</c>, if the progress bar should be shown. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowProgressBar","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the target container where the Toast to be displayed.\n            Based on the target, the positions such as `Left`, `Top` will be applied to the Toast.\n            The default value is null, which refers the `document.body` element.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the HTML element/element ID as a string that can be displayed as a Toast content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContentTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Timeout","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the Toast display time duration on the page in milliseconds.\n            - Once the time expires, Toast message will be removed.\n            - Setting 0 as a time out value displays the Toast on the page until the user closes it manually.\n            </summary>\n            <value>\n            Accepts an integer value. The default value is <c>5000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Timeout","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the title to be displayed on the Toast.\n            Works only with string values.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Title","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Toast in pixels/numbers/percentage. Number value is considered as pixels.\n            In mobile devices, default width is considered as `100%`.\n            </summary>\n            <value>\n            Accepts the string value. The default value is <c>300px</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the unique identifier.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Sets the content of the Toast.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.SfToast","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfToast","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1316380981,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.SfToast.ContentTemplate","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the HTML element/element ID as a string that can be displayed as a Toast content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"SfToast"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.SfToast.ContentTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfToast","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1638620630,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.SfToast.ContentTemplate","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the HTML element/element ID as a string that can be displayed as a Toast content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"Syncfusion.Blazor.Notifications.SfToast"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.SfToast.ContentTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfToast","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2051907616,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.SfToast.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Sets the content of the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfToast"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.SfToast.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfToast","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":49707421,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Notifications.SfToast.ChildContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Sets the content of the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Notifications.SfToast"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Notifications.SfToast.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfToast","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1648424578,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications._Imports","AssemblyName":"Syncfusion.Blazor.Notifications","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":1375217861,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications._Imports","AssemblyName":"Syncfusion.Blazor.Notifications","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":914546433,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.Internal.ToastContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the content to be displayed on the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToastContent"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.Internal.ToastContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications.Internal","Common.TypeNameIdentifier":"ToastContent"}},{"HashCode":1811074253,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Notifications.Internal.ToastContent","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"\n            <summary>\n            Specifies the content to be displayed on the Toast.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.Internal.ToastContent"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Notifications.Internal.ToastContent","Common.TypeNamespace":"Syncfusion.Blazor.Notifications.Internal","Common.TypeNameIdentifier":"ToastContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":390793151,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.CalendarBase<T>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"T\">Specifies the type of CalendarBase.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Calendars.CalendarBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable date or time value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"T","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"T","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<T>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<T>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<T>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<T>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"CalendarBase","Components.GenericTyped":"True"}},{"HashCode":1451196983,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.CalendarBase<T>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"T\">Specifies the type of CalendarBase.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.CalendarBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Calendars.CalendarBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable date or time value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"T","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"T","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<T>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<T>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<T>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<T>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"CalendarBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2095942595,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.MaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" /> property is used to set the text that is shown as a hint or placeholder in an input field until the user enters a value. \n            It can be used to provide additional context or instructions to the user about the format that is expected for the input.\n            </summary>\n            <remarks>\n             The <c>MaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.EnableMask\" /> property.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.MaskPlaceholder","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"MaskPlaceholder"}},{"HashCode":-1941150126,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.MaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" /> property is used to set the text that is shown as a hint or placeholder in an input field until the user enters a value. \n            It can be used to provide additional context or instructions to the user about the format that is expected for the input.\n            </summary>\n            <remarks>\n             The <c>MaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.EnableMask\" /> property.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.MaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.MaskPlaceholder","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"MaskPlaceholder","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-324143507,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.CalendarEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the Calendar Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of CalendarEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.CalendarEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"P:Syncfusion.Blazor.Calendars.SfCalendar`1.Values\" /> property changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfCalendar TValue=\"DateTime?\">\n                <CalendarEvents TValue=\"DateTime?\" ValueChange=\"@ValueChange\"/>\n            </SfCalendar>\n            @code{\n                 private void ValueChange(ChangedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after selecting the date values from Calendar.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfCalendar TValue=\"DateTime?\">\n                <CalendarEvents TValue=\"DateTime?\" Selected=\"@ValueSelected\"/>\n            </SfCalendar>\n            @code{\n                private void ValueSelected(SelectedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.DeSelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after deselecting the value from Calendar. This event will trigger when enable the multiple date selection.\n            </summary>\n            <remarks>\n            This event will trigger when enable the <see cref=\"P:Syncfusion.Blazor.Calendars.SfCalendar`1.IsMultiSelection\" /> property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfCalendar TValue=\"DateTime?\" IsMultiSelection=true>\n               <CalendarEvents TValue=\"DateTime?\" DeSelected=\"@ValueDeselected\"/>\n            </SfCalendar>\n            @code{\n               private void ValueDeselected(DeSelectedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"DeSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.DeSelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfCalendar TValue=\"DateTime?\">\n                <CalendarEvents TValue=\"DateTime?\" Navigated=\"@ViewNavigated\" />\n            </SfCalendar>\n            @code{\n                private void ViewNavigated(NavigatedEventArgs args) {\n                    Console.WriteLine(args.View);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when each day cell of the Calendar is rendered.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfCalendar TValue=\"DateTime?\">\n               <CalendarEvents TValue=\"DateTime?\" OnRenderDayCell=\"@CellRendered\" />\n            </SfCalendar>\n            @code{\n               private void CellRendered(RenderDayCellEventArgs args) {\n                   args.CellData.ClassList = \"e-custom-style\";\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"CalendarEvents","Components.GenericTyped":"True"}},{"HashCode":1547844251,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.CalendarEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the Calendar Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of CalendarEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.CalendarEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.CalendarEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"P:Syncfusion.Blazor.Calendars.SfCalendar`1.Values\" /> property changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfCalendar TValue=\"DateTime?\">\n                <CalendarEvents TValue=\"DateTime?\" ValueChange=\"@ValueChange\"/>\n            </SfCalendar>\n            @code{\n                 private void ValueChange(ChangedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after selecting the date values from Calendar.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfCalendar TValue=\"DateTime?\">\n                <CalendarEvents TValue=\"DateTime?\" Selected=\"@ValueSelected\"/>\n            </SfCalendar>\n            @code{\n                private void ValueSelected(SelectedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.DeSelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after deselecting the value from Calendar. This event will trigger when enable the multiple date selection.\n            </summary>\n            <remarks>\n            This event will trigger when enable the <see cref=\"P:Syncfusion.Blazor.Calendars.SfCalendar`1.IsMultiSelection\" /> property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfCalendar TValue=\"DateTime?\" IsMultiSelection=true>\n               <CalendarEvents TValue=\"DateTime?\" DeSelected=\"@ValueDeselected\"/>\n            </SfCalendar>\n            @code{\n               private void ValueDeselected(DeSelectedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"DeSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.DeSelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfCalendar TValue=\"DateTime?\">\n                <CalendarEvents TValue=\"DateTime?\" Navigated=\"@ViewNavigated\" />\n            </SfCalendar>\n            @code{\n                private void ViewNavigated(NavigatedEventArgs args) {\n                    Console.WriteLine(args.View);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when each day cell of the Calendar is rendered.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfCalendar TValue=\"DateTime?\">\n               <CalendarEvents TValue=\"DateTime?\" OnRenderDayCell=\"@CellRendered\" />\n            </SfCalendar>\n            @code{\n               private void CellRendered(RenderDayCellEventArgs args) {\n                   args.CellData.ClassList = \"e-custom-style\";\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"CalendarEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2058443672,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCalendar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfCalendar<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <value>\n            Accepts a RenderFragment that defines the content of the UI element.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValuesExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.DateTime[]>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the values of the bound.\n            </summary>\n            <value>\n            The expression for defining the values of the bound,  represented as a lambda expression of type \n            <code>Expression&lt;Func&lt;DateTime[]&gt;&gt;</code>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValuesExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.DateTime[]>>"}},{"Kind":"Components.Component","Name":"IsMultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether multiple dates selection is enabled.\n            </summary>\n            <value>\n            <c>true</c>, If the multiple dates selection can be enabled. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IsMultiSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the tab index of the component.\n            </summary>\n            <value>\n            Accepts an integer value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Values","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Gets or sets the collection of DateTime values of the calendar.\n            </summary>\n            <value>\n            An array of DateTime values representing the selected dates.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Values","Common.GloballyQualifiedTypeName":"global::System.DateTime[]"}},{"Kind":"Components.Component","Name":"ValuesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the values changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValuesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.DateTime[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the component.\n            </summary>\n            <value>The value as dictionary collection.The default value is <c>null</c></value>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable date or time value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar","Components.GenericTyped":"True"}},{"HashCode":-894722622,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfCalendar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfCalendar<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <value>\n            Accepts a RenderFragment that defines the content of the UI element.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValuesExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.DateTime[]>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the values of the bound.\n            </summary>\n            <value>\n            The expression for defining the values of the bound,  represented as a lambda expression of type \n            <code>Expression&lt;Func&lt;DateTime[]&gt;&gt;</code>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValuesExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<global::System.DateTime[]>>"}},{"Kind":"Components.Component","Name":"IsMultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether multiple dates selection is enabled.\n            </summary>\n            <value>\n            <c>true</c>, If the multiple dates selection can be enabled. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IsMultiSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the tab index of the component.\n            </summary>\n            <value>\n            Accepts an integer value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Values","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Gets or sets the collection of DateTime values of the calendar.\n            </summary>\n            <value>\n            An array of DateTime values representing the selected dates.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Values","Common.GloballyQualifiedTypeName":"global::System.DateTime[]"}},{"Kind":"Components.Component","Name":"ValuesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the values changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValuesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.DateTime[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the component.\n            </summary>\n            <value>The value as dictionary collection.The default value is <c>null</c></value>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable date or time value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1634572322,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <value>\n            Accepts a RenderFragment that defines the content of the UI element.\n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfCalendar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2017115028,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <value>\n            Accepts a RenderFragment that defines the content of the UI element.\n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfCalendar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1809989191,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DatePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DatePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DatePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DatePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DatePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\">\n               <DatePickerEvents TValue=\"DateTime?\" ValueChange=\"@ValueChange\" />\n            </SfDatePicker>\n            @code{\n               private void ValueChange(ChangedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after selecting the value from the component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\">\n               <DatePickerEvents TValue=\"DateTime?\" Selected=\"@ValueSelected\" />\n            </SfDatePicker>\n            @code{\n               private void ValueSelected(SelectedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is closed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\">\n               <DatePickerEvents TValue=\"DateTime?\" OnClose=\"@PopupClose\" />\n            </SfDatePicker>\n            @code{\n               private void PopupClose(PopupObjectArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\">\n               <DatePickerEvents TValue=\"DateTime?\" Navigated=\"@ViewNavigated\" />\n            </SfDatePicker>\n            @code{\n               private void ViewNavigated(NavigatedEventArgs args) {\n                    Console.WriteLine(args.View);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is opened.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\">\n               <DatePickerEvents TValue=\"DateTime?\" OnOpen=\"@PopupOpen\" />\n            </SfDatePicker>\n            @code{\n               private void PopupOpen(PopupObjectArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when each day cell of the Calendar is rendered.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\">\n               <DatePickerEvents TValue=\"DateTime?\" OnRenderDayCell=\"CellRendered\" />\n            </SfDatePicker>\n            @code{\n               private void CellRendered(RenderDayCellEventArgs args) {\n                    args.CellData.ClassList = \"e-custom-style\";\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DatePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DatePickerEvents","Components.GenericTyped":"True"}},{"HashCode":2077056361,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DatePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DatePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DatePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DatePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DatePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\">\n               <DatePickerEvents TValue=\"DateTime?\" ValueChange=\"@ValueChange\" />\n            </SfDatePicker>\n            @code{\n               private void ValueChange(ChangedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after selecting the value from the component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\">\n               <DatePickerEvents TValue=\"DateTime?\" Selected=\"@ValueSelected\" />\n            </SfDatePicker>\n            @code{\n               private void ValueSelected(SelectedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is closed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\">\n               <DatePickerEvents TValue=\"DateTime?\" OnClose=\"@PopupClose\" />\n            </SfDatePicker>\n            @code{\n               private void PopupClose(PopupObjectArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\">\n               <DatePickerEvents TValue=\"DateTime?\" Navigated=\"@ViewNavigated\" />\n            </SfDatePicker>\n            @code{\n               private void ViewNavigated(NavigatedEventArgs args) {\n                    Console.WriteLine(args.View);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is opened.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\">\n               <DatePickerEvents TValue=\"DateTime?\" OnOpen=\"@PopupOpen\" />\n            </SfDatePicker>\n            @code{\n               private void PopupOpen(PopupObjectArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when each day cell of the Calendar is rendered.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\">\n               <DatePickerEvents TValue=\"DateTime?\" OnRenderDayCell=\"CellRendered\" />\n            </SfDatePicker>\n            @code{\n               private void CellRendered(RenderDayCellEventArgs args) {\n                    args.CellData.ClassList = \"e-custom-style\";\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DatePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DatePickerEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1272034790,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DatePickerMaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder based on the specified <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> until the user enters a value in the <see cref=\"T:Syncfusion.Blazor.Calendars.DatePickerMaskPlaceholder\" />\n            </summary>\n            <remarks>\n            The <c>DatePickerMaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.EnableMask\" /> property. \n             <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" />\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime\" EnableMask=true >\n                <DatePickerMaskPlaceholder Day=\"day\" Month= \"month\" Year= \"year\"></DatePickerMaskPlaceholder>\n            </SfDatePicker>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DatePickerMaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DatePickerMaskPlaceholder","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DatePickerMaskPlaceholder"}},{"HashCode":-2081976236,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DatePickerMaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder based on the specified <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> until the user enters a value in the <see cref=\"T:Syncfusion.Blazor.Calendars.DatePickerMaskPlaceholder\" />\n            </summary>\n            <remarks>\n            The <c>DatePickerMaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.EnableMask\" /> property. \n             <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" />\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime\" EnableMask=true >\n                <DatePickerMaskPlaceholder Day=\"day\" Month= \"month\" Year= \"year\"></DatePickerMaskPlaceholder>\n            </SfDatePicker>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DatePickerMaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DatePickerMaskPlaceholder","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DatePickerMaskPlaceholder","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1570326874,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            Defines the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" />.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDatePicker.</typeparam>\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDatePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDatePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.AllowEdit\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows user to change the value via typing. \n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker allows user to change the value via typing; otherwise, <c>false</c>  user to change the value via picker only. The default value is <c>true</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FullScreen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FullScreen\" /> this indicates whether to enable full screen layout for <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component popup in mobile devices or not.\n            </summary>\n            <value>\n            <c>true</c>, enable full screen layout for popup in mobile devices; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FullScreen\" /> property applicable for mobile and tablet devices only.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FullScreen","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableMask","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets mask rendering in the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the component render with mask format; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The Enable mask property restricts the user to type the unwanted characters in the text area. It allows only eligible characters to type.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableMask","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> behavior of the DatePicker that the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> text floats above the DatePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DatePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DatePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DatePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n            <value>\n            A value of the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> enum representing the behavior of the floating label in the DatePicker.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\" FloatLabelType=\"Syncfusion.Blazor.Inputs.FloatLabelType.Auto\">\n            </SfDatePicker>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> of the value that to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n            <value>\n            Accepts format value in string type. The default culture format is <c>M/d/yyyy</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.HtmlAttributes\" /> such as styles, class, and more to the root element.\n            </summary>\n            <value>\n            A dictionary containing additional html attributes such as styles, class and more to the root element.\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying an inline attribute or by specifying @attributes directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDatePicker>\n            @code{\n               Dictionary<string, object> CustomAttribute = new Dictionary<string, object>() {\n                    { \"title\", \"Select a Date\" }\n                };\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.InputAttributes\" /> such as disabled, value, and more to the root element.\n            </summary>\n            <value>\n            A dictionary containing additional input attributes such as disabled, value and more to the root element.\n            </value>\n            <remarks>       \n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> until the user focuses or enter a value in DatePicker.\n            </summary>\n            <value>\n             Accepts a string value. The default value is <c>string.Empty</c>\n            </value>\n            <remarks> \n             The property is depending on the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> property.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Readonly\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker value cannot be edited; otherwise, <c>false</c>. The default value is <c>true</c>.  \n            </value>\n            <remark>\n            If the read-only is enabled, the popup cannot open.\n            </remark>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ShowClearButton\" /> this indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear icon was shown; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the component to act as strict So that it allows to enter of only a valid date value within a specified range, or else it will reset to the previous value.\n            </summary>\n            <value>\n            <c>true</c>, if this property won't allow to enter an invalid date; otherwise, <c>false</c> It allows invalid or out-of-range date value with highlighted error class. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Width\" /> of the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ZIndex\" /> value of the DatePicker popup element.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.TabIndex\" /> order of the DatePicker component.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable date or time value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDatePicker","Components.GenericTyped":"True"}},{"HashCode":-715932163,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            Defines the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" />.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDatePicker.</typeparam>\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDatePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDatePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.AllowEdit\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows user to change the value via typing. \n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker allows user to change the value via typing; otherwise, <c>false</c>  user to change the value via picker only. The default value is <c>true</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FullScreen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FullScreen\" /> this indicates whether to enable full screen layout for <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component popup in mobile devices or not.\n            </summary>\n            <value>\n            <c>true</c>, enable full screen layout for popup in mobile devices; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FullScreen\" /> property applicable for mobile and tablet devices only.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FullScreen","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableMask","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets mask rendering in the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the component render with mask format; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The Enable mask property restricts the user to type the unwanted characters in the text area. It allows only eligible characters to type.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableMask","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> behavior of the DatePicker that the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> text floats above the DatePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DatePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DatePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DatePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n            <value>\n            A value of the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> enum representing the behavior of the floating label in the DatePicker.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\" FloatLabelType=\"Syncfusion.Blazor.Inputs.FloatLabelType.Auto\">\n            </SfDatePicker>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> of the value that to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n            <value>\n            Accepts format value in string type. The default culture format is <c>M/d/yyyy</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.HtmlAttributes\" /> such as styles, class, and more to the root element.\n            </summary>\n            <value>\n            A dictionary containing additional html attributes such as styles, class and more to the root element.\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying an inline attribute or by specifying @attributes directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDatePicker>\n            @code{\n               Dictionary<string, object> CustomAttribute = new Dictionary<string, object>() {\n                    { \"title\", \"Select a Date\" }\n                };\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.InputAttributes\" /> such as disabled, value, and more to the root element.\n            </summary>\n            <value>\n            A dictionary containing additional input attributes such as disabled, value and more to the root element.\n            </value>\n            <remarks>       \n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> until the user focuses or enter a value in DatePicker.\n            </summary>\n            <value>\n             Accepts a string value. The default value is <c>string.Empty</c>\n            </value>\n            <remarks> \n             The property is depending on the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> property.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Readonly\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker value cannot be edited; otherwise, <c>false</c>. The default value is <c>true</c>.  \n            </value>\n            <remark>\n            If the read-only is enabled, the popup cannot open.\n            </remark>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ShowClearButton\" /> this indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear icon was shown; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the component to act as strict So that it allows to enter of only a valid date value within a specified range, or else it will reset to the previous value.\n            </summary>\n            <value>\n            <c>true</c>, if this property won't allow to enter an invalid date; otherwise, <c>false</c> It allows invalid or out-of-range date value with highlighted error class. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Width\" /> of the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ZIndex\" /> value of the DatePicker popup element.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.TabIndex\" /> order of the DatePicker component.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable date or time value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDatePicker","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1521722403,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDatePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDatePicker","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1517505623,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfDatePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDatePicker","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1549062082,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DateRangePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DateRangePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DateRangePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateRangePicker TValue=\"DateTime?\">\n                <DateRangePickerEvents TValue=\"DateTime?\" ValueChange=\"@ValueChanged\" />\n            </SfDateRangePicker>\n            @code{\n               private void ValueChanged(RangePickerEventArgs<DateTime?> args) {\n                   Console.WriteLine(args.StartDate + \" - \" + args.EndDate);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is closed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateRangePicker TValue=\"DateTime?\">\n                <DateRangePickerEvents TValue=\"DateTime?\" OnClose=\"@PopupClose\" />\n            </SfDateRangePicker>\n            @code{\n               private void PopupClose(RangePopupEventArgs args) {\n                   args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n             Gets or sets the event callback that will be invoked when the component gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateRangePicker TValue=\"DateTime?\">\n                <DateRangePickerEvents TValue=\"DateTime?\" Navigated=\"@ViewNavigated\" />\n            </SfDateRangePicker>\n            @code{\n               private void ViewNavigated(NavigatedEventArgs args) {\n                   Console.WriteLine(args.View);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is opened.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateRangePicker TValue=\"DateTime?\">\n                <DateRangePickerEvents TValue=\"DateTime?\" OnOpen=\"@PopupClose\" />\n            </SfDateRangePicker>\n            @code{\n               private void PopupClose(RangePopupEventArgs args) {\n                   args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when each day cell of the Calendar is rendered.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateRangePicker TValue=\"DateTime?\">\n               <DateRangePickerEvents TValue=\"DateTime?\" OnRenderDayCell=\"@CellRendered\" />\n            </SfDateRangePicker>\n            @code{\n               private void CellRendered(RenderDayCellEventArgs args) {\n                   args.CellData.ClassList = \"e-custom-style\";\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"RangeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Documentation":"\n             <summary>\n            Gets or sets the event callback that will be invoked after selecting the start and end date from the component.\n             </summary>\n             <example>\n             <code><![CDATA[\n             <SfDateRangePicker TValue=\"DateTime?\">\n                 <DateRangePickerEvents TValue=\"DateTime?\" RangeSelected=\"@RangeSelected\" />\n             </SfDateRangePicker>\n             @code{\n                private void RangeSelected(RangePickerEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.StartDate + \" - \" + args.EndDate);\n                 }\n               }\n             ]]></code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"RangeSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerEvents","Components.GenericTyped":"True"}},{"HashCode":879475960,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DateRangePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DateRangePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DateRangePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateRangePicker TValue=\"DateTime?\">\n                <DateRangePickerEvents TValue=\"DateTime?\" ValueChange=\"@ValueChanged\" />\n            </SfDateRangePicker>\n            @code{\n               private void ValueChanged(RangePickerEventArgs<DateTime?> args) {\n                   Console.WriteLine(args.StartDate + \" - \" + args.EndDate);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is closed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateRangePicker TValue=\"DateTime?\">\n                <DateRangePickerEvents TValue=\"DateTime?\" OnClose=\"@PopupClose\" />\n            </SfDateRangePicker>\n            @code{\n               private void PopupClose(RangePopupEventArgs args) {\n                   args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n             Gets or sets the event callback that will be invoked when the component gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateRangePicker TValue=\"DateTime?\">\n                <DateRangePickerEvents TValue=\"DateTime?\" Navigated=\"@ViewNavigated\" />\n            </SfDateRangePicker>\n            @code{\n               private void ViewNavigated(NavigatedEventArgs args) {\n                   Console.WriteLine(args.View);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is opened.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateRangePicker TValue=\"DateTime?\">\n                <DateRangePickerEvents TValue=\"DateTime?\" OnOpen=\"@PopupClose\" />\n            </SfDateRangePicker>\n            @code{\n               private void PopupClose(RangePopupEventArgs args) {\n                   args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when each day cell of the Calendar is rendered.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateRangePicker TValue=\"DateTime?\">\n               <DateRangePickerEvents TValue=\"DateTime?\" OnRenderDayCell=\"@CellRendered\" />\n            </SfDateRangePicker>\n            @code{\n               private void CellRendered(RenderDayCellEventArgs args) {\n                   args.CellData.ClassList = \"e-custom-style\";\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"RangeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Documentation":"\n             <summary>\n            Gets or sets the event callback that will be invoked after selecting the start and end date from the component.\n             </summary>\n             <example>\n             <code><![CDATA[\n             <SfDateRangePicker TValue=\"DateTime?\">\n                 <DateRangePickerEvents TValue=\"DateTime?\" RangeSelected=\"@RangeSelected\" />\n             </SfDateRangePicker>\n             @code{\n                private void RangeSelected(RangePickerEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.StartDate + \" - \" + args.EndDate);\n                 }\n               }\n             ]]></code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"RangeSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1424961207,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows user to select the date range from the calendar.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDateRangePicker.</typeparam>\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateRangePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EndDateExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the end date of the bound.\n            </summary>\n            <value>\n            An expression that defines the end date of the bound.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EndDateExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StartDateExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the start date of the bound.\n            </summary>\n            <value>\n            An expression that defines the start date of the bound.\n            </value>\n        ","Metadata":{"Common.PropertyName":"StartDateExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets value whether the DateRangePicker allows user to change the value via typing. When set as false, the DateRangePicker allows user to change the value via picker only.\n            </summary>\n            <value>\n            <c>true</c>, If the DateRangePicker value can be edited. otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FullScreen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDateRangePicker`1.FullScreen\" /> this indicates whether to enable full screen layout for <see cref=\"T:Syncfusion.Blazor.Calendars.SfDateRangePicker`1\" /> component popup in mobile devices or not.\n            </summary>\n            <value>\n            <c>true</c>, enable full screen layout for popup in mobile devices; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Calendars.SfDateRangePicker`1.FullScreen\" /> property applicable for mobile and tablet devices only.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FullScreen","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EndDate","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the end date of the date range selection.\n            </summary>\n            <value>\n            Accepts the end date of date range selection. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EndDate","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"EndDateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Triggers when end date of the DateRangePicker is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndDateChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the DateRangePicker that the placeholder text floats above the DateRangePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DateRangePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DateRangePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DateRangePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n            <value>\n            The floating label behavior of the DateRangePicker.\n            </value>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the required date format to the start and end date string.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n            <value>\n            Accepts the string value that specified the required date format for start and end date strings. The default culture format is <c>M/d/yyyy</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n            <value>\n            A dictionary of additional HTML attributes for the root element of the DateRangePicker.\n            </value>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n            <value>\n            A dictionary containing additional input attributes such as disabled, value and others that can be added to the root element.\n            </value>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"MaxDays","TypeName":"System.Int32?","Documentation":"\n            <summary>\n             Gets or sets the maximum span of days that can be allowed in a date range selection.\n            </summary>\n            <value>\n            An integer value representing the maximum span of days that can be allowed in a date range selection.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MaxDays","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"MinDays","TypeName":"System.Int32?","Documentation":"\n            <summary>\n             Gets or sets the minimum span of days that can be allowed in date range selection.\n            </summary>\n            <value>\n            An integer value representing the minimum span of days that can be allowed in a date range selection.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MinDays","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user focuses or enter a value in DateRangePicker. The property is depending on the FloatLabelType property.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets value whether the DateRangePicker allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the DateRangePicker value cannot be edited; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets or gets the string that used between the start and end date string.\n            </summary>\n            <value>\n            Accepts the string value. The default value is \"-\".\n            </value>\n        ","Metadata":{"Common.PropertyName":"Separator","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to show or hide the clear icon in DateRangePicker.\n            </summary>\n            <value>\n            <c>true</c>, if the clear icon was shown; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StartDate","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the start date of the date range selection.\n            </summary>\n            <value>\n            Accepts the start date of date range selection, represented as a value of type `TValue`.\n            </value>\n        ","Metadata":{"Common.PropertyName":"StartDate","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StartDateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Triggers when start date of the DateRangePicker is changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"StartDateChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the DateRangePicker to act as strict. So that, it allows to enter only a valid date value within a specified range or else it will resets to previous value.\n            </summary>\n            <value>\n            <c>true</c>, if this property won't allow to enter an invalid date; otherwise, <c>false</c> It allows invalid or out-of-range date value with highlighted error class. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            By default, StrictMode is in false. It allows invalid or out-of-range date value with highlighted error class.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the DateRangePicker component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the DateRangePicker popup element.\n            </summary>\n            <value>\n            Accepts an integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Presets","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Calendars.Presets>","Documentation":"\n            <summary>\n            Gets or sets the Presets of the dateRangePicker popup element.\n            </summary>\n            <value>\n            Accepts the list of <see cref=\"T:Syncfusion.Blazor.Calendars.Presets\" /> objects. The default value is an empty list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Presets","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Calendars.Presets>"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable date or time value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker","Components.GenericTyped":"True"}},{"HashCode":-1078187555,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows user to select the date range from the calendar.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDateRangePicker.</typeparam>\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateRangePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EndDateExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the end date of the bound.\n            </summary>\n            <value>\n            An expression that defines the end date of the bound.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EndDateExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StartDateExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the start date of the bound.\n            </summary>\n            <value>\n            An expression that defines the start date of the bound.\n            </value>\n        ","Metadata":{"Common.PropertyName":"StartDateExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets value whether the DateRangePicker allows user to change the value via typing. When set as false, the DateRangePicker allows user to change the value via picker only.\n            </summary>\n            <value>\n            <c>true</c>, If the DateRangePicker value can be edited. otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FullScreen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDateRangePicker`1.FullScreen\" /> this indicates whether to enable full screen layout for <see cref=\"T:Syncfusion.Blazor.Calendars.SfDateRangePicker`1\" /> component popup in mobile devices or not.\n            </summary>\n            <value>\n            <c>true</c>, enable full screen layout for popup in mobile devices; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Calendars.SfDateRangePicker`1.FullScreen\" /> property applicable for mobile and tablet devices only.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FullScreen","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EndDate","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the end date of the date range selection.\n            </summary>\n            <value>\n            Accepts the end date of date range selection. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EndDate","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"EndDateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Triggers when end date of the DateRangePicker is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndDateChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the DateRangePicker that the placeholder text floats above the DateRangePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DateRangePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DateRangePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DateRangePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n            <value>\n            The floating label behavior of the DateRangePicker.\n            </value>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the required date format to the start and end date string.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n            <value>\n            Accepts the string value that specified the required date format for start and end date strings. The default culture format is <c>M/d/yyyy</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n            <value>\n            A dictionary of additional HTML attributes for the root element of the DateRangePicker.\n            </value>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n            <value>\n            A dictionary containing additional input attributes such as disabled, value and others that can be added to the root element.\n            </value>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"MaxDays","TypeName":"System.Int32?","Documentation":"\n            <summary>\n             Gets or sets the maximum span of days that can be allowed in a date range selection.\n            </summary>\n            <value>\n            An integer value representing the maximum span of days that can be allowed in a date range selection.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MaxDays","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"MinDays","TypeName":"System.Int32?","Documentation":"\n            <summary>\n             Gets or sets the minimum span of days that can be allowed in date range selection.\n            </summary>\n            <value>\n            An integer value representing the minimum span of days that can be allowed in a date range selection.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MinDays","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user focuses or enter a value in DateRangePicker. The property is depending on the FloatLabelType property.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets value whether the DateRangePicker allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the DateRangePicker value cannot be edited; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets or gets the string that used between the start and end date string.\n            </summary>\n            <value>\n            Accepts the string value. The default value is \"-\".\n            </value>\n        ","Metadata":{"Common.PropertyName":"Separator","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to show or hide the clear icon in DateRangePicker.\n            </summary>\n            <value>\n            <c>true</c>, if the clear icon was shown; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StartDate","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the start date of the date range selection.\n            </summary>\n            <value>\n            Accepts the start date of date range selection, represented as a value of type `TValue`.\n            </value>\n        ","Metadata":{"Common.PropertyName":"StartDate","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StartDateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Triggers when start date of the DateRangePicker is changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"StartDateChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the DateRangePicker to act as strict. So that, it allows to enter only a valid date value within a specified range or else it will resets to previous value.\n            </summary>\n            <value>\n            <c>true</c>, if this property won't allow to enter an invalid date; otherwise, <c>false</c> It allows invalid or out-of-range date value with highlighted error class. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            By default, StrictMode is in false. It allows invalid or out-of-range date value with highlighted error class.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the DateRangePicker component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the DateRangePicker popup element.\n            </summary>\n            <value>\n            Accepts an integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Presets","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Calendars.Presets>","Documentation":"\n            <summary>\n            Gets or sets the Presets of the dateRangePicker popup element.\n            </summary>\n            <value>\n            Accepts the list of <see cref=\"T:Syncfusion.Blazor.Calendars.Presets\" /> objects. The default value is an empty list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Presets","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.List<global::Syncfusion.Blazor.Calendars.Presets>"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable date or time value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1513263417,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDateRangePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1639106637,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfDateRangePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-273381112,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DateTimePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DateTimePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DateTimePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime?\">\n               <DateTimePickerEvents TValue=\"DateTime?\" ValueChange=\"@ValueChange\" />\n            </SfDateTimePicker>\n            @code{\n               private void ValueChange(ChangedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after selecting the value from the component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime?\">\n               <DateTimePickerEvents TValue=\"DateTime?\" Selected=\"@ValueSelected\" />\n            </SfDateTimePicker>\n            @code{\n               private void ValueSelected(SelectedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is closed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime?\">\n               <DateTimePickerEvents TValue=\"DateTime?\" OnClose=\"@PopupClose\" />\n            </SfDateTimePicker>\n            @code{\n               private void PopupClose(PopupObjectArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime?\">\n                <DateTimePickerEvents TValue=\"DateTime?\" Navigated=\"@ViewNavigated\" />\n            </SfDateTimePicker>\n            @code{\n               private void ViewNavigated(NavigatedEventArgs args) {\n                    Console.WriteLine(args.View);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is opened.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime?\">\n                <DateTimePickerEvents TValue=\"DateTime?\" OnOpen=\"@PopupOpen\" />\n            </SfDateTimePicker>\n            @code{\n               private void PopupOpen(PopupObjectArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when each day cell of the Calendar is rendered.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime?\">\n               <DateTimePickerEvents TValue=\"DateTime?\" OnRenderDayCell=\"CellRendered\" />\n            </SfDateTimePicker>\n            @code{\n               private void CellRendered(RenderDayCellEventArgs args) {\n                    args.CellData.ClassList = \"e-custom-style\";\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateTimePickerEvents","Components.GenericTyped":"True"}},{"HashCode":-422761889,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DateTimePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DateTimePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DateTimePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime?\">\n               <DateTimePickerEvents TValue=\"DateTime?\" ValueChange=\"@ValueChange\" />\n            </SfDateTimePicker>\n            @code{\n               private void ValueChange(ChangedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after selecting the value from the component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime?\">\n               <DateTimePickerEvents TValue=\"DateTime?\" Selected=\"@ValueSelected\" />\n            </SfDateTimePicker>\n            @code{\n               private void ValueSelected(SelectedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is closed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime?\">\n               <DateTimePickerEvents TValue=\"DateTime?\" OnClose=\"@PopupClose\" />\n            </SfDateTimePicker>\n            @code{\n               private void PopupClose(PopupObjectArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime?\">\n                <DateTimePickerEvents TValue=\"DateTime?\" Navigated=\"@ViewNavigated\" />\n            </SfDateTimePicker>\n            @code{\n               private void ViewNavigated(NavigatedEventArgs args) {\n                    Console.WriteLine(args.View);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Navigated","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is opened.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime?\">\n                <DateTimePickerEvents TValue=\"DateTime?\" OnOpen=\"@PopupOpen\" />\n            </SfDateTimePicker>\n            @code{\n               private void PopupOpen(PopupObjectArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupObjectArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when each day cell of the Calendar is rendered.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime?\">\n               <DateTimePickerEvents TValue=\"DateTime?\" OnRenderDayCell=\"CellRendered\" />\n            </SfDateTimePicker>\n            @code{\n               private void CellRendered(RenderDayCellEventArgs args) {\n                    args.CellData.ClassList = \"e-custom-style\";\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateTimePickerEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":790073450,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateTimePickerMaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder based on the specified format until the user enters a value in the <see cref=\"T:Syncfusion.Blazor.Calendars.DateTimePickerMaskPlaceholder\" />\n            </summary>\n            <remarks>\n            The <c>DateTimePickerMaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.EnableMask\" /> property. \n             <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" />\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime\" EnableMask=true >\n                <DateTimePickerMaskPlaceholder Day=\"day\" Month= \"month\" Year= \"year\" Hour= \"hour\" Minute= \"minute\" Second=\"second\" DayOfWeek=\"dayofweek\" ></DateTimePickerMaskPlaceholder>\n            </SfDateTimePicker>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DateTimePickerMaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateTimePickerMaskPlaceholder","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateTimePickerMaskPlaceholder"}},{"HashCode":-1622817522,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateTimePickerMaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder based on the specified format until the user enters a value in the <see cref=\"T:Syncfusion.Blazor.Calendars.DateTimePickerMaskPlaceholder\" />\n            </summary>\n            <remarks>\n            The <c>DateTimePickerMaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.EnableMask\" /> property. \n             <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" />\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime\" EnableMask=true >\n                <DateTimePickerMaskPlaceholder Day=\"day\" Month= \"month\" Year= \"year\" Hour= \"hour\" Minute= \"minute\" Second=\"second\" DayOfWeek=\"dayofweek\" ></DateTimePickerMaskPlaceholder>\n            </SfDateTimePicker>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DateTimePickerMaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateTimePickerMaskPlaceholder","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateTimePickerMaskPlaceholder","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-671956135,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DateTimePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDateTimePicker.</typeparam>\n            <summary>\n            The DateTimePicker is a graphical user interface component that allows to select a date and time value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateTimePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ScrollTo","TypeName":"System.DateTime?","Documentation":"\n            <summary>\n            Gets or sets the scroll bar position, if there is no value is selected in the DateTimePicker popup list or\n            the given value is not present in the DateTimePicker popup list.\n            </summary>\n            <value>\n            A DateTime value is set to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDateTimePicker`1.ScrollTo\" /> property. If there is no value is selected in the popup list or the given value is not present in the popup list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ScrollTo","Common.GloballyQualifiedTypeName":"global::System.DateTime?"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum time value that can be allowed to select in DateTimePicker.\n            </summary>\n            <value>\n            The DateTime value that represents the maximum time that can be selected in the DateTimePicker.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the minimum time value that can be allowed to select in DateTimePicker.\n            </summary>\n            <value>\n            The DateTime value that represents the minimum time that can be selected in the DateTimePicker.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the time interval between the two adjacent time values in the time popup list .\n            </summary>\n            <value>\n            Accepts an integer value that specifies the time interval between two adjacent time values in the time popup list. The default value is <c>30</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TimeFormat","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the format of the time value that to be displayed in time popup list.\n            </summary>\n            <value>\n            Accepts time format value as string type. The default value is \"\".\n            </value>\n        ","Metadata":{"Common.PropertyName":"TimeFormat","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OnKeyDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets keydown.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnKeyDown","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.AllowEdit\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows user to change the value via typing. \n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker allows user to change the value via typing; otherwise, <c>false</c>  user to change the value via picker only. The default value is <c>true</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FullScreen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FullScreen\" /> this indicates whether to enable full screen layout for <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component popup in mobile devices or not.\n            </summary>\n            <value>\n            <c>true</c>, enable full screen layout for popup in mobile devices; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FullScreen\" /> property applicable for mobile and tablet devices only.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FullScreen","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableMask","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets mask rendering in the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the component render with mask format; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The Enable mask property restricts the user to type the unwanted characters in the text area. It allows only eligible characters to type.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableMask","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> behavior of the DatePicker that the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> text floats above the DatePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DatePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DatePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DatePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n            <value>\n            A value of the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> enum representing the behavior of the floating label in the DatePicker.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\" FloatLabelType=\"Syncfusion.Blazor.Inputs.FloatLabelType.Auto\">\n            </SfDatePicker>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> of the value that to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n            <value>\n            Accepts format value in string type. The default culture format is <c>M/d/yyyy</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.HtmlAttributes\" /> such as styles, class, and more to the root element.\n            </summary>\n            <value>\n            A dictionary containing additional html attributes such as styles, class and more to the root element.\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying an inline attribute or by specifying @attributes directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDatePicker>\n            @code{\n               Dictionary<string, object> CustomAttribute = new Dictionary<string, object>() {\n                    { \"title\", \"Select a Date\" }\n                };\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.InputAttributes\" /> such as disabled, value, and more to the root element.\n            </summary>\n            <value>\n            A dictionary containing additional input attributes such as disabled, value and more to the root element.\n            </value>\n            <remarks>       \n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> until the user focuses or enter a value in DatePicker.\n            </summary>\n            <value>\n             Accepts a string value. The default value is <c>string.Empty</c>\n            </value>\n            <remarks> \n             The property is depending on the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> property.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Readonly\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker value cannot be edited; otherwise, <c>false</c>. The default value is <c>true</c>.  \n            </value>\n            <remark>\n            If the read-only is enabled, the popup cannot open.\n            </remark>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ShowClearButton\" /> this indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear icon was shown; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the component to act as strict So that it allows to enter of only a valid date value within a specified range, or else it will reset to the previous value.\n            </summary>\n            <value>\n            <c>true</c>, if this property won't allow to enter an invalid date; otherwise, <c>false</c> It allows invalid or out-of-range date value with highlighted error class. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Width\" /> of the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ZIndex\" /> value of the DatePicker popup element.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.TabIndex\" /> order of the DatePicker component.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateTimePicker","Components.GenericTyped":"True"}},{"HashCode":-235233655,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DateTimePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDateTimePicker.</typeparam>\n            <summary>\n            The DateTimePicker is a graphical user interface component that allows to select a date and time value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateTimePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ScrollTo","TypeName":"System.DateTime?","Documentation":"\n            <summary>\n            Gets or sets the scroll bar position, if there is no value is selected in the DateTimePicker popup list or\n            the given value is not present in the DateTimePicker popup list.\n            </summary>\n            <value>\n            A DateTime value is set to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDateTimePicker`1.ScrollTo\" /> property. If there is no value is selected in the popup list or the given value is not present in the popup list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ScrollTo","Common.GloballyQualifiedTypeName":"global::System.DateTime?"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum time value that can be allowed to select in DateTimePicker.\n            </summary>\n            <value>\n            The DateTime value that represents the maximum time that can be selected in the DateTimePicker.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the minimum time value that can be allowed to select in DateTimePicker.\n            </summary>\n            <value>\n            The DateTime value that represents the minimum time that can be selected in the DateTimePicker.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the time interval between the two adjacent time values in the time popup list .\n            </summary>\n            <value>\n            Accepts an integer value that specifies the time interval between two adjacent time values in the time popup list. The default value is <c>30</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TimeFormat","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the format of the time value that to be displayed in time popup list.\n            </summary>\n            <value>\n            Accepts time format value as string type. The default value is \"\".\n            </value>\n        ","Metadata":{"Common.PropertyName":"TimeFormat","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"OnKeyDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets keydown.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnKeyDown","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.AllowEdit\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows user to change the value via typing. \n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker allows user to change the value via typing; otherwise, <c>false</c>  user to change the value via picker only. The default value is <c>true</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FullScreen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FullScreen\" /> this indicates whether to enable full screen layout for <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component popup in mobile devices or not.\n            </summary>\n            <value>\n            <c>true</c>, enable full screen layout for popup in mobile devices; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FullScreen\" /> property applicable for mobile and tablet devices only.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FullScreen","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableMask","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets mask rendering in the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the component render with mask format; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The Enable mask property restricts the user to type the unwanted characters in the text area. It allows only eligible characters to type.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableMask","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> behavior of the DatePicker that the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> text floats above the DatePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DatePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DatePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DatePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n            <value>\n            A value of the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> enum representing the behavior of the floating label in the DatePicker.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\" FloatLabelType=\"Syncfusion.Blazor.Inputs.FloatLabelType.Auto\">\n            </SfDatePicker>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> of the value that to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n            <value>\n            Accepts format value in string type. The default culture format is <c>M/d/yyyy</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.HtmlAttributes\" /> such as styles, class, and more to the root element.\n            </summary>\n            <value>\n            A dictionary containing additional html attributes such as styles, class and more to the root element.\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying an inline attribute or by specifying @attributes directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime?\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDatePicker>\n            @code{\n               Dictionary<string, object> CustomAttribute = new Dictionary<string, object>() {\n                    { \"title\", \"Select a Date\" }\n                };\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.InputAttributes\" /> such as disabled, value, and more to the root element.\n            </summary>\n            <value>\n            A dictionary containing additional input attributes such as disabled, value and more to the root element.\n            </value>\n            <remarks>       \n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> until the user focuses or enter a value in DatePicker.\n            </summary>\n            <value>\n             Accepts a string value. The default value is <c>string.Empty</c>\n            </value>\n            <remarks> \n             The property is depending on the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> property.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Readonly\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker value cannot be edited; otherwise, <c>false</c>. The default value is <c>true</c>.  \n            </value>\n            <remark>\n            If the read-only is enabled, the popup cannot open.\n            </remark>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ShowClearButton\" /> this indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear icon was shown; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the component to act as strict So that it allows to enter of only a valid date value within a specified range, or else it will reset to the previous value.\n            </summary>\n            <value>\n            <c>true</c>, if this property won't allow to enter an invalid date; otherwise, <c>false</c> It allows invalid or out-of-range date value with highlighted error class. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Width\" /> of the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ZIndex\" /> value of the DatePicker popup element.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.TabIndex\" /> order of the DatePicker component.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateTimePicker","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1005232732,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDateTimePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateTimePicker","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1649280421,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfDateTimePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateTimePicker","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":10023930,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTimePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfTimePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.AllowEdit\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> allows user to change the value via typing. \n            </summary>\n            <value>\n            <c>true</c>, if the TimePicker allows user to change the value via typing; otherwise, <c>false</c> user to change the value via picker only. The default value is <c>true</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FullScreen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.FullScreen\" /> this indicates whether to enable full screen layout for <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component popup in mobile devices or not.\n            </summary>\n            <value>\n            <c>true</c>, enable full screen layout for popup in mobile devices; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.FullScreen\" /> property applicable for mobile and tablet devices only.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FullScreen","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.FloatLabelType\" /> behavior of the TextBox that the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Placeholder\" /> text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Placeholder\" /> until the user focuses or enter a value in TimePicker.\n            </summary>\n            <value>\n             Accepts a string value. The default value is <c>string.Empty</c>\n            </value>\n            <remarks> \n             The property is depending on the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.FloatLabelType\" /> property.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Readonly\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the TimePicker value cannot be edited; otherwise, <c>false</c>. The default value is <c>true</c>.  \n            </value>\n            <remark>\n            If the read-only is enabled, the popup cannot open.\n            </remark>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableMask","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets mask rendering in the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the component render with mask format; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The Enable mask property restricts the user to type the unwanted characters in the text area. It allows only eligible characters to type.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableMask","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.ShowClearButton\" /> this indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear icon was shown; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.HtmlAttributes\" /> such as styles, class, and more to the root element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying an inline attribute or by specifying @attributes directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.InputAttributes\" /> such as disabled, value, and more to the root element.\n            </summary>\n            <remarks>       \n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Width\" /> of the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.TabIndex\" /> order of the TimePicker component.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the required time <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Format\" /> of value that is to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            </summary>\n            <value>\n            Accepts format value in string type. The default culture format is <c>h:mm tt</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the shortcuts keys <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.KeyConfigs\" /> in <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component. \n            </summary>\n            <remarks>\n            When using German keyboard, the key actions can be customized using these shortcuts.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum time value that can be allowed to select in TimePicker.\n            </summary>\n            <value>\n            The maximum time that can be allowed to select in TimePicker.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the minimum time value that can be allowed to select in TimePicker.\n            </summary>\n            <value>\n            The minimum time that value must be less than or equal to the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Max\" /> value in TimePicker.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"ScrollTo","TypeName":"System.DateTime?","Documentation":"\n            <summary>\n            Gets or sets the scroll bar position.\n            </summary>\n            <value>\n            A Datetime value is set to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.ScrollTo\" /> property. If there is no value is selected in the popup list or the given value is not present in the popup list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ScrollTo","Common.GloballyQualifiedTypeName":"global::System.DateTime?"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the time interval. This time interval between the two adjacent time values in the popup list.\n            </summary>\n            <value>\n            Accepts a integer value. The default value is <c>30</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the component to act as strict So that it allows to enter of only a valid date value within a specified range, or else it will reset to the previous value.\n            </summary>\n            <value>\n            <c>true</c>, if this property won't allow to enter an invalid date; otherwise, <c>false</c> It allows invalid or out-of-range date value with highlighted error class. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.ZIndex\" /> value of the TimePicker popup element.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfTimePicker","Components.GenericTyped":"True"}},{"HashCode":-1375226553,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfTimePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfTimePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.AllowEdit\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> allows user to change the value via typing. \n            </summary>\n            <value>\n            <c>true</c>, if the TimePicker allows user to change the value via typing; otherwise, <c>false</c> user to change the value via picker only. The default value is <c>true</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowEdit","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FullScreen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.FullScreen\" /> this indicates whether to enable full screen layout for <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component popup in mobile devices or not.\n            </summary>\n            <value>\n            <c>true</c>, enable full screen layout for popup in mobile devices; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.FullScreen\" /> property applicable for mobile and tablet devices only.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FullScreen","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.FloatLabelType\" /> behavior of the TextBox that the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Placeholder\" /> text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Placeholder\" /> until the user focuses or enter a value in TimePicker.\n            </summary>\n            <value>\n             Accepts a string value. The default value is <c>string.Empty</c>\n            </value>\n            <remarks> \n             The property is depending on the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.FloatLabelType\" /> property.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Readonly\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the TimePicker value cannot be edited; otherwise, <c>false</c>. The default value is <c>true</c>.  \n            </value>\n            <remark>\n            If the read-only is enabled, the popup cannot open.\n            </remark>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableMask","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets mask rendering in the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the component render with mask format; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The Enable mask property restricts the user to type the unwanted characters in the text area. It allows only eligible characters to type.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableMask","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.ShowClearButton\" /> this indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear icon was shown; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.HtmlAttributes\" /> such as styles, class, and more to the root element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying an inline attribute or by specifying @attributes directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.InputAttributes\" /> such as disabled, value, and more to the root element.\n            </summary>\n            <remarks>       \n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Width\" /> of the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.TabIndex\" /> order of the TimePicker component.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the required time <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Format\" /> of value that is to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            </summary>\n            <value>\n            Accepts format value in string type. The default culture format is <c>h:mm tt</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Format","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the shortcuts keys <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.KeyConfigs\" /> in <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component. \n            </summary>\n            <remarks>\n            When using German keyboard, the key actions can be customized using these shortcuts.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum time value that can be allowed to select in TimePicker.\n            </summary>\n            <value>\n            The maximum time that can be allowed to select in TimePicker.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the minimum time value that can be allowed to select in TimePicker.\n            </summary>\n            <value>\n            The minimum time that value must be less than or equal to the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Max\" /> value in TimePicker.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"ScrollTo","TypeName":"System.DateTime?","Documentation":"\n            <summary>\n            Gets or sets the scroll bar position.\n            </summary>\n            <value>\n            A Datetime value is set to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.ScrollTo\" /> property. If there is no value is selected in the popup list or the given value is not present in the popup list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ScrollTo","Common.GloballyQualifiedTypeName":"global::System.DateTime?"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the time interval. This time interval between the two adjacent time values in the popup list.\n            </summary>\n            <value>\n            Accepts a integer value. The default value is <c>30</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"Step","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the component to act as strict So that it allows to enter of only a valid date value within a specified range, or else it will reset to the previous value.\n            </summary>\n            <value>\n            <c>true</c>, if this property won't allow to enter an invalid date; otherwise, <c>false</c> It allows invalid or out-of-range date value with highlighted error class. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"StrictMode","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.ZIndex\" /> value of the TimePicker popup element.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfTimePicker","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1718333198,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfTimePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfTimePicker","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":53027585,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfTimePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfTimePicker","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1512285108,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.TimePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the TimePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of TimePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TimePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.TimePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfTimePicker TValue=\"DateTime?\">\n                <TimePickerEvents TValue=\"DateTime?\" ValueChange=\"@ValueChange\" />\n            </SfTimePicker>\n            @code{\n               private void ValueChange(ChangeEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after selecting the value from the component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfTimePicker TValue=\"DateTime?\">\n                <TimePickerEvents TValue=\"DateTime?\" Selected=\"@ValueSelected\" />\n            </SfTimePicker>\n            @code{\n               private void ValueSelected(SelectedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is closed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfTimePicker TValue=\"DateTime?\">\n                <TimePickerEvents TValue=\"DateTime?\" OnClose=\"@PopupClose\" />\n            </SfTimePicker>\n            @code{\n               private void PopupClose(PopupEventArgs args) {\n                   args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ItemEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked while rendering the each popup list item.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfTimePicker TValue=\"DateTime?\">\n                <TimePickerEvents TValue=\"DateTime?\" OnItemRender=\"@ItemRender\" />\n            </SfTimePicker>\n            @code{\n               private void ItemRender(ItemEventArgs<DateTime?> args) {\n                   Console.WriteLine(args.Text);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ItemEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is opened.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfTimePicker TValue=\"DateTime?\">\n                <TimePickerEvents TValue=\"DateTime?\" OnOpen=\"@PopupOpen\" />\n            </SfTimePicker>\n            @code{\n               private void PopupOpen(PopupEventArgs args) {\n                   args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.TimePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"TimePickerEvents","Components.GenericTyped":"True"}},{"HashCode":1735113969,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.TimePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the TimePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of TimePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.TimePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.TimePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.BlurEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is changed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfTimePicker TValue=\"DateTime?\">\n                <TimePickerEvents TValue=\"DateTime?\" ValueChange=\"@ValueChange\" />\n            </SfTimePicker>\n            @code{\n               private void ValueChange(ChangeEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after selecting the value from the component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfTimePicker TValue=\"DateTime?\">\n                <TimePickerEvents TValue=\"DateTime?\" Selected=\"@ValueSelected\" />\n            </SfTimePicker>\n            @code{\n               private void ValueSelected(SelectedEventArgs<DateTime?> args) {\n                    Console.WriteLine(args.Value);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Selected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ClearedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is closed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfTimePicker TValue=\"DateTime?\">\n                <TimePickerEvents TValue=\"DateTime?\" OnClose=\"@PopupClose\" />\n            </SfTimePicker>\n            @code{\n               private void PopupClose(PopupEventArgs args) {\n                   args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ItemEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked while rendering the each popup list item.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfTimePicker TValue=\"DateTime?\">\n                <TimePickerEvents TValue=\"DateTime?\" OnItemRender=\"@ItemRender\" />\n            </SfTimePicker>\n            @code{\n               private void ItemRender(ItemEventArgs<DateTime?> args) {\n                   Console.WriteLine(args.Text);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.ItemEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the popup is opened.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfTimePicker TValue=\"DateTime?\">\n                <TimePickerEvents TValue=\"DateTime?\" OnOpen=\"@PopupOpen\" />\n            </SfTimePicker>\n            @code{\n               private void PopupOpen(PopupEventArgs args) {\n                   args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.PopupEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.TimePickerEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"TimePickerEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":206807626,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.TimePickerMaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder based on the specified format until the user enters a value in the <see cref=\"T:Syncfusion.Blazor.Calendars.TimePickerMaskPlaceholder\" />\n            </summary>\n            <remarks>\n            The <c>TimePickerMaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.EnableMask\" /> property. \n             <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" />\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfTimePicker TValue=\"DateTime\" EnableMask=true >\n                <TimePickerMaskPlaceholder Hour= \"hour\" Minute= \"minute\" Second=\"second\"></TimePickerMaskPlaceholder>\n            </SfTimePicker>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TimePickerMaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.TimePickerMaskPlaceholder","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"TimePickerMaskPlaceholder"}},{"HashCode":-1479360113,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.TimePickerMaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder based on the specified format until the user enters a value in the <see cref=\"T:Syncfusion.Blazor.Calendars.TimePickerMaskPlaceholder\" />\n            </summary>\n            <remarks>\n            The <c>TimePickerMaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.EnableMask\" /> property. \n             <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" />\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfTimePicker TValue=\"DateTime\" EnableMask=true >\n                <TimePickerMaskPlaceholder Hour= \"hour\" Minute= \"minute\" Second=\"second\"></TimePickerMaskPlaceholder>\n            </SfTimePicker>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.TimePickerMaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.TimePickerMaskPlaceholder","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"TimePickerMaskPlaceholder","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1612948776,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPreset","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DateRangePickerPreset"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"End","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Defines the end date of the preset range\n            </summary>\n        ","Metadata":{"Common.PropertyName":"End","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the label string of the preset range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Start","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Defines the start date of the preset range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::System.DateTime"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPreset"}},{"HashCode":-1510376217,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPreset","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"End","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Defines the end date of the preset range\n            </summary>\n        ","Metadata":{"Common.PropertyName":"End","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the label string of the preset range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Label","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Start","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Defines the start date of the preset range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::System.DateTime"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPreset","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1764578470,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPreset.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DateRangePickerPreset"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPreset","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1231293336,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPreset.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.DateRangePickerPreset"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPreset","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":568647203,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPresets","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DateRangePickerPresets"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPresets"}},{"HashCode":156556820,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPresets","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPresets","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-642695290,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPresets.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DateRangePickerPresets"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPresets","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-592641773,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPresets.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.DateRangePickerPresets"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"DateRangePickerPresets","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":499647849,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars._Imports","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":-1745502979,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars._Imports","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1003838338,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"TValue\">Soecifies the type of CalendarBaseRender.</typeparam>\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBaseRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the option to enable the multiple dates selection of the calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MultiSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CellClickHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.CellDetails>","Documentation":"\n            <summary>\n            Specifies the cell click event.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CellClickHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.CellDetails>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"IsFocusTodayCell","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the current day is focused or not.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsFocusTodayCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CurrentDateValue","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies current date value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentDateValue","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"MultiValues","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Gets or sets multiple selected dates of the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MultiValues","Common.GloballyQualifiedTypeName":"global::System.DateTime[]"}},{"Kind":"Components.Component","Name":"MultiValuesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"\n            <summary>\n            Gets or sets a callback of value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MultiValuesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.DateTime[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PrevIconClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a previous icon state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PrevIconClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NextIconClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a next icon state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NextIconClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable date or time value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarBaseRender","Components.GenericTyped":"True"}},{"HashCode":2010809209,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"TValue\">Soecifies the type of CalendarBaseRender.</typeparam>\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the option to enable the multiple dates selection of the calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MultiSelection","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CellClickHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.CellDetails>","Documentation":"\n            <summary>\n            Specifies the cell click event.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CellClickHandler","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.CellDetails>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"IsFocusTodayCell","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the current day is focused or not.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsFocusTodayCell","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CurrentDateValue","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies current date value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentDateValue","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"MultiValues","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Gets or sets multiple selected dates of the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MultiValues","Common.GloballyQualifiedTypeName":"global::System.DateTime[]"}},{"Kind":"Components.Component","Name":"MultiValuesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"\n            <summary>\n            Gets or sets a callback of value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MultiValuesChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.DateTime[]>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PrevIconClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a previous icon state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PrevIconClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"NextIconClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a next icon state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NextIconClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable date or time value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarBaseRender","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":675942527,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"TCalendarCell\">Specifies the type of CalendarDayCell.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarDayCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCalendarCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCalendarCell for the Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell> component.","Metadata":{"Common.PropertyName":"TCalendarCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnCellClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.CellDetails>","Documentation":"\n            <summary>\n            Bind the cell click for calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnCellClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.CellDetails>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CurrentCellDate","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the current date.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentCellDate","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"LocalDates","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the local date.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"LocalDates","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"CellClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the class of cell.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFocusTodayDate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the current date is focused or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFocusTodayDate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Cells","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Get or Set Cell value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Cells","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TodayCellDate","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the today date value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TodayCellDate","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"IsNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or Set calendar navigation.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsNavigation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CalendarRenderView","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Get or Set current calendar view.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CalendarRenderView","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"IsSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or Set the calendar cell selection.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsSelect","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsMultiSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the option to enable the multiple dates selection of the calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsMultiSelect","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MultiselectValues","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Get or Set calendar values.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MultiselectValues","Common.GloballyQualifiedTypeName":"global::System.DateTime[]"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable date or time value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TCalendarCell","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TCalendarCell","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TCalendarCell>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TCalendarCell>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarDayCell","Components.GenericTyped":"True"}},{"HashCode":-1481511294,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"TCalendarCell\">Specifies the type of CalendarDayCell.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCalendarCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCalendarCell for the Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell> component.","Metadata":{"Common.PropertyName":"TCalendarCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnCellClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.CellDetails>","Documentation":"\n            <summary>\n            Bind the cell click for calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnCellClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Calendars.CellDetails>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CurrentCellDate","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the current date.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentCellDate","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"LocalDates","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the local date.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"LocalDates","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"CellClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the class of cell.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFocusTodayDate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the current date is focused or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFocusTodayDate","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Cells","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Get or Set Cell value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Cells","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"TodayCellDate","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the today date value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TodayCellDate","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"IsNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or Set calendar navigation.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsNavigation","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CalendarRenderView","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Get or Set current calendar view.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CalendarRenderView","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"IsSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or Set the calendar cell selection.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsSelect","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsMultiSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the option to enable the multiple dates selection of the calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsMultiSelect","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MultiselectValues","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Get or Set calendar values.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MultiselectValues","Common.GloballyQualifiedTypeName":"global::System.DateTime[]"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable date or time value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TCalendarCell","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TCalendarCell","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TCalendarCell>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TCalendarCell>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarDayCell","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2116471703,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar day is show in header.\n            </summary>\n            <typeparam name=\"TCalendarHeader\">Specifies the type of CalendarTableHeader.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarTableHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCalendarHeader","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCalendarHeader for the Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader> component.","Metadata":{"Common.PropertyName":"TCalendarHeader","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CalendarRenderView","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the calendar view .\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CalendarRenderView","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable date or time value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TCalendarHeader","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TCalendarHeader","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TCalendarHeader>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TCalendarHeader>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarTableHeader","Components.GenericTyped":"True"}},{"HashCode":1251673801,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar day is show in header.\n            </summary>\n            <typeparam name=\"TCalendarHeader\">Specifies the type of CalendarTableHeader.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCalendarHeader","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCalendarHeader for the Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader> component.","Metadata":{"Common.PropertyName":"TCalendarHeader","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CalendarRenderView","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the calendar view .\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CalendarRenderView","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum allowable date or time value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Common.GloballyQualifiedTypeName":"global::System.DateTime"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarType"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.DayHeaderFormats"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Calendars.CalendarView"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule","Common.GloballyQualifiedTypeName":"global::System.Globalization.CalendarWeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the component.\n            </summary>\n            <value>\n            A string representing the identifier of the component.\n            </value>\n            <remarks>\n            The ID property allows you to uniquely identify the component in the rendered HTML markup.\n            If you don't set a custom ID, the component's ID will be auto-generated, and it\n            may not be as descriptive as you require.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TCalendarHeader","Documentation":"\n            <summary>\n            Gets or sets the value of the component.\n            </summary>\n            <value>\n            The current value of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TCalendarHeader","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the value changes.\n            </summary>\n            <value>\n            Event callback\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TCalendarHeader>>","Documentation":"\n            <summary>\n            Gets or sets the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TCalendarHeader>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfInputTextBase`1.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the component. \n            </summary>\n            <value>\n            <c>true</c>, if the component is enabled; otherwise, it is disabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether validation should be performed on each input.\n            </summary>\n            <value>\n            <c>true</c> if validation should be performed on each input; otherwise, <c>false</c>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The <c>ValueChange</c> event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarTableHeader","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1421009561,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DataManager","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            The DataManager is a data management component used for performing data operations in applications.\n            It acts as an abstraction for using local data source - IEnumerable and remote data source - web services returning JSON or oData.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DataManager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HttpClientInstance","TypeName":"System.Net.Http.HttpClient","Documentation":"\n            <summary>\n            Specifies the HttpClient instance to be used  by DataManager.\n            </summary>\n            <remarks>Use HttpClientInstance property to inject named HttpClient into DataManager.</remarks>\n        ","Metadata":{"Common.PropertyName":"HttpClientInstance","Common.GloballyQualifiedTypeName":"global::System.Net.Http.HttpClient"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the endpoint URL. DataManager requests this URL when data is needed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdaptorInstance","TypeName":"System.Type","Documentation":"\n            <summary>\n            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class.\n            </summary>\n            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance.\n            Injecting services into custom adaptor class, is not supported while using this approach.\n            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>\n        ","Metadata":{"Common.PropertyName":"AdaptorInstance","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Adaptor","TypeName":"Syncfusion.Blazor.Adaptors","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the data adaptor to be used by <see cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" /> component.\n            <list type=\"bullet\">\n            <item>\n            <term>BlazorAdaptor</term>\n            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>\n            </item>\n            <item>\n            <term>ODataAdaptor</term>\n            <description>\n            OData Adaptor provies ability to consume and manipulate data from OData services.\n            </description>\n            </item>\n            <item>\n            <term>ODataV4Adaptor</term>\n            <description>\n            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services\n            </description>\n            </item>\n            <item>\n            <term>WebApiAdaptor</term>\n            <description>\n            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.\n            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n            </description>\n            </item>\n            <item>\n            <term>UrlAdaptor</term>\n            <description>\n            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.\n            </description>\n            </item>\n            <item>\n            <term>RemoteSaveAdaptor</term>\n            <description>\n            Remote Save Adaptor is used for binding JSON data.\n            It interacts with remote services only for CRUD operations.\n            </description>\n            </item>\n            <item>\n            <term>CustomAdaptor</term>\n            <description>\n            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component\n            extended from DataAdaptor class.\n            </description>\n            </item>\n            <item>\n            <term>JsonAdaptor</term>\n            <description>\n            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.\n            </description>\n            </item>\n            <item>\n            <term>GraphQLAdaptor</term>\n            <description>\n            GraphQLAdaptor provides ability to consume and manipulate data from GraphQL services.\n            </description>\n            </item>\n            <item>\n            <term>GraphQLAdaptor</term>\n            <description> GraphQLAdaptor provides ability to consume and manipulate data from GraphQL service.\n            </description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Adaptors"}},{"Kind":"Components.Component","Name":"GraphQLAdaptorOptions","TypeName":"Syncfusion.Blazor.Data.GraphQLAdaptorOptions","Documentation":"\n            <summary>\n            Gets or Sets the properties to be specified for GraphQLAdaptor.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GraphQLAdaptorOptions","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.GraphQLAdaptorOptions"}},{"Kind":"Components.Component","Name":"DataAdaptor","TypeName":"Syncfusion.Blazor.Data.IAdaptor","Documentation":"\n            <summary>\n            Holds adaptor instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"DataAdaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.IAdaptor"}},{"Kind":"Components.Component","Name":"InsertUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the insert URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert method is called, request will be made to InsertUrl.\n            If InsertUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"InsertUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the remove URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Remove method is called, request will be made to RemoveUrl.\n            If RemoveUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"UpdateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the update URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Update method is called, request will be made to UpdateUrl.\n            If UpdateUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"UpdateUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrudUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CRUD URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert, Remove or Update method is called, request will be made to CrudUrl.\n            If CrudUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"CrudUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"BatchUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the batch url.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When SaveChanges method is called, request will be made to BatchUrl.\n            If BatchUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"BatchUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Json","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Documentation":"\n            <summary>\n            Specifies the IEnumerable collection. This data could be queried and manipulated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Json","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"Headers","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Specifies the key/value pair of headers.\n            </summary>\n            <remarks>\n            Use Headers to add any custom headers to the request made by DataManager.\n            Users can also send authentication bearer token using Headers property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Headers","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.String>"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the accept type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Accept","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the IEnumerale data.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"TimeTillExpiration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time limit to clear the cached data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeTillExpiration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CachingPageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the caching page size.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CachingPageSize","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EnableCaching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables data caching.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaching","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequestType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the request type for sending data fetching.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RequestType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the primary key value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrossDomain","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When true, then indicates that the request is a cross-domain request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CrossDomain","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Jsonp","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the jsonp request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Jsonp","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the data type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Offline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables offline mode in datamanager.\n            </summary>\n            <remarks>\n            Applicable for remote data source. If offline is true then initial request will be made to fetch\n            data. Further actions will be handled at the in-memory data and no more request will be made to the service.\n            Cached data is stored in the JSON property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Offline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequiresFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Sepcifies requires format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RequiresFormat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DataManager","Common.TypeNamespace":"Syncfusion.Blazor","Common.TypeNameIdentifier":"DataManager"}},{"HashCode":-1196177499,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DataManager","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            The DataManager is a data management component used for performing data operations in applications.\n            It acts as an abstraction for using local data source - IEnumerable and remote data source - web services returning JSON or oData.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DataManager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HttpClientInstance","TypeName":"System.Net.Http.HttpClient","Documentation":"\n            <summary>\n            Specifies the HttpClient instance to be used  by DataManager.\n            </summary>\n            <remarks>Use HttpClientInstance property to inject named HttpClient into DataManager.</remarks>\n        ","Metadata":{"Common.PropertyName":"HttpClientInstance","Common.GloballyQualifiedTypeName":"global::System.Net.Http.HttpClient"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the endpoint URL. DataManager requests this URL when data is needed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdaptorInstance","TypeName":"System.Type","Documentation":"\n            <summary>\n            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class.\n            </summary>\n            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance.\n            Injecting services into custom adaptor class, is not supported while using this approach.\n            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>\n        ","Metadata":{"Common.PropertyName":"AdaptorInstance","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Adaptor","TypeName":"Syncfusion.Blazor.Adaptors","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the data adaptor to be used by <see cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" /> component.\n            <list type=\"bullet\">\n            <item>\n            <term>BlazorAdaptor</term>\n            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>\n            </item>\n            <item>\n            <term>ODataAdaptor</term>\n            <description>\n            OData Adaptor provies ability to consume and manipulate data from OData services.\n            </description>\n            </item>\n            <item>\n            <term>ODataV4Adaptor</term>\n            <description>\n            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services\n            </description>\n            </item>\n            <item>\n            <term>WebApiAdaptor</term>\n            <description>\n            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.\n            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n            </description>\n            </item>\n            <item>\n            <term>UrlAdaptor</term>\n            <description>\n            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.\n            </description>\n            </item>\n            <item>\n            <term>RemoteSaveAdaptor</term>\n            <description>\n            Remote Save Adaptor is used for binding JSON data.\n            It interacts with remote services only for CRUD operations.\n            </description>\n            </item>\n            <item>\n            <term>CustomAdaptor</term>\n            <description>\n            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component\n            extended from DataAdaptor class.\n            </description>\n            </item>\n            <item>\n            <term>JsonAdaptor</term>\n            <description>\n            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.\n            </description>\n            </item>\n            <item>\n            <term>GraphQLAdaptor</term>\n            <description>\n            GraphQLAdaptor provides ability to consume and manipulate data from GraphQL services.\n            </description>\n            </item>\n            <item>\n            <term>GraphQLAdaptor</term>\n            <description> GraphQLAdaptor provides ability to consume and manipulate data from GraphQL service.\n            </description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Adaptors"}},{"Kind":"Components.Component","Name":"GraphQLAdaptorOptions","TypeName":"Syncfusion.Blazor.Data.GraphQLAdaptorOptions","Documentation":"\n            <summary>\n            Gets or Sets the properties to be specified for GraphQLAdaptor.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GraphQLAdaptorOptions","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.GraphQLAdaptorOptions"}},{"Kind":"Components.Component","Name":"DataAdaptor","TypeName":"Syncfusion.Blazor.Data.IAdaptor","Documentation":"\n            <summary>\n            Holds adaptor instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"DataAdaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.IAdaptor"}},{"Kind":"Components.Component","Name":"InsertUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the insert URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert method is called, request will be made to InsertUrl.\n            If InsertUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"InsertUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the remove URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Remove method is called, request will be made to RemoveUrl.\n            If RemoveUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"UpdateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the update URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Update method is called, request will be made to UpdateUrl.\n            If UpdateUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"UpdateUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrudUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CRUD URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert, Remove or Update method is called, request will be made to CrudUrl.\n            If CrudUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"CrudUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"BatchUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the batch url.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When SaveChanges method is called, request will be made to BatchUrl.\n            If BatchUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"BatchUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Json","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Documentation":"\n            <summary>\n            Specifies the IEnumerable collection. This data could be queried and manipulated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Json","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"Headers","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Specifies the key/value pair of headers.\n            </summary>\n            <remarks>\n            Use Headers to add any custom headers to the request made by DataManager.\n            Users can also send authentication bearer token using Headers property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Headers","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.String>"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the accept type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Accept","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the IEnumerale data.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"TimeTillExpiration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time limit to clear the cached data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeTillExpiration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CachingPageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the caching page size.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CachingPageSize","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EnableCaching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables data caching.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaching","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequestType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the request type for sending data fetching.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RequestType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the primary key value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrossDomain","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When true, then indicates that the request is a cross-domain request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CrossDomain","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Jsonp","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the jsonp request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Jsonp","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the data type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Offline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables offline mode in datamanager.\n            </summary>\n            <remarks>\n            Applicable for remote data source. If offline is true then initial request will be made to fetch\n            data. Further actions will be handled at the in-memory data and no more request will be made to the service.\n            Cached data is stored in the JSON property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Offline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequiresFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Sepcifies requires format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RequiresFormat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DataManager","Common.TypeNamespace":"Syncfusion.Blazor","Common.TypeNameIdentifier":"DataManager","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":423464841,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DataManager.ChildContent","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DataManager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DataManager.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor","Common.TypeNameIdentifier":"DataManager","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-487425865,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DataManager.ChildContent","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DataManager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DataManager.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor","Common.TypeNameIdentifier":"DataManager","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":844310269,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Data.SfDataManager","AssemblyName":"Syncfusion.Blazor.Data","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDataManager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HttpClientInstance","TypeName":"System.Net.Http.HttpClient","Documentation":"\n            <summary>\n            Specifies the HttpClient instance to be used  by DataManager.\n            </summary>\n            <remarks>Use HttpClientInstance property to inject named HttpClient into DataManager.</remarks>\n        ","Metadata":{"Common.PropertyName":"HttpClientInstance","Common.GloballyQualifiedTypeName":"global::System.Net.Http.HttpClient"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the endpoint URL. DataManager requests this URL when data is needed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdaptorInstance","TypeName":"System.Type","Documentation":"\n            <summary>\n            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class.\n            </summary>\n            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance.\n            Injecting services into custom adaptor class, is not supported while using this approach.\n            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>\n        ","Metadata":{"Common.PropertyName":"AdaptorInstance","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Adaptor","TypeName":"Syncfusion.Blazor.Adaptors","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the data adaptor to be used by <see cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" /> component.\n            <list type=\"bullet\">\n            <item>\n            <term>BlazorAdaptor</term>\n            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>\n            </item>\n            <item>\n            <term>ODataAdaptor</term>\n            <description>\n            OData Adaptor provies ability to consume and manipulate data from OData services.\n            </description>\n            </item>\n            <item>\n            <term>ODataV4Adaptor</term>\n            <description>\n            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services\n            </description>\n            </item>\n            <item>\n            <term>WebApiAdaptor</term>\n            <description>\n            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.\n            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n            </description>\n            </item>\n            <item>\n            <term>UrlAdaptor</term>\n            <description>\n            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.\n            </description>\n            </item>\n            <item>\n            <term>RemoteSaveAdaptor</term>\n            <description>\n            Remote Save Adaptor is used for binding JSON data.\n            It interacts with remote services only for CRUD operations.\n            </description>\n            </item>\n            <item>\n            <term>CustomAdaptor</term>\n            <description>\n            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component\n            extended from DataAdaptor class.\n            </description>\n            </item>\n            <item>\n            <term>JsonAdaptor</term>\n            <description>\n            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.\n            </description>\n            </item>\n            <item>\n            <term>GraphQLAdaptor</term>\n            <description>\n            GraphQLAdaptor provides ability to consume and manipulate data from GraphQL services.\n            </description>\n            </item>\n            <item>\n            <term>GraphQLAdaptor</term>\n            <description> GraphQLAdaptor provides ability to consume and manipulate data from GraphQL service.\n            </description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Adaptors"}},{"Kind":"Components.Component","Name":"GraphQLAdaptorOptions","TypeName":"Syncfusion.Blazor.Data.GraphQLAdaptorOptions","Documentation":"\n            <summary>\n            Gets or Sets the properties to be specified for GraphQLAdaptor.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GraphQLAdaptorOptions","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.GraphQLAdaptorOptions"}},{"Kind":"Components.Component","Name":"DataAdaptor","TypeName":"Syncfusion.Blazor.Data.IAdaptor","Documentation":"\n            <summary>\n            Holds adaptor instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"DataAdaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.IAdaptor"}},{"Kind":"Components.Component","Name":"InsertUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the insert URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert method is called, request will be made to InsertUrl.\n            If InsertUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"InsertUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the remove URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Remove method is called, request will be made to RemoveUrl.\n            If RemoveUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"UpdateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the update URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Update method is called, request will be made to UpdateUrl.\n            If UpdateUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"UpdateUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrudUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CRUD URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert, Remove or Update method is called, request will be made to CrudUrl.\n            If CrudUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"CrudUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"BatchUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the batch url.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When SaveChanges method is called, request will be made to BatchUrl.\n            If BatchUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"BatchUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Json","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Documentation":"\n            <summary>\n            Specifies the IEnumerable collection. This data could be queried and manipulated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Json","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"Headers","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Specifies the key/value pair of headers.\n            </summary>\n            <remarks>\n            Use Headers to add any custom headers to the request made by DataManager.\n            Users can also send authentication bearer token using Headers property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Headers","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.String>"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the accept type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Accept","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the IEnumerale data.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"TimeTillExpiration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time limit to clear the cached data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeTillExpiration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CachingPageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the caching page size.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CachingPageSize","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EnableCaching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables data caching.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaching","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequestType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the request type for sending data fetching.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RequestType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the primary key value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrossDomain","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When true, then indicates that the request is a cross-domain request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CrossDomain","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Jsonp","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the jsonp request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Jsonp","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the data type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Offline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables offline mode in datamanager.\n            </summary>\n            <remarks>\n            Applicable for remote data source. If offline is true then initial request will be made to fetch\n            data. Further actions will be handled at the in-memory data and no more request will be made to the service.\n            Cached data is stored in the JSON property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Offline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequiresFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Sepcifies requires format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RequiresFormat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Data.SfDataManager","Common.TypeNamespace":"Syncfusion.Blazor.Data","Common.TypeNameIdentifier":"SfDataManager"}},{"HashCode":-35877819,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Data.SfDataManager","AssemblyName":"Syncfusion.Blazor.Data","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Data.SfDataManager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HttpClientInstance","TypeName":"System.Net.Http.HttpClient","Documentation":"\n            <summary>\n            Specifies the HttpClient instance to be used  by DataManager.\n            </summary>\n            <remarks>Use HttpClientInstance property to inject named HttpClient into DataManager.</remarks>\n        ","Metadata":{"Common.PropertyName":"HttpClientInstance","Common.GloballyQualifiedTypeName":"global::System.Net.Http.HttpClient"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the endpoint URL. DataManager requests this URL when data is needed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"AdaptorInstance","TypeName":"System.Type","Documentation":"\n            <summary>\n            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class.\n            </summary>\n            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance.\n            Injecting services into custom adaptor class, is not supported while using this approach.\n            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>\n        ","Metadata":{"Common.PropertyName":"AdaptorInstance","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Adaptor","TypeName":"Syncfusion.Blazor.Adaptors","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the data adaptor to be used by <see cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" /> component.\n            <list type=\"bullet\">\n            <item>\n            <term>BlazorAdaptor</term>\n            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>\n            </item>\n            <item>\n            <term>ODataAdaptor</term>\n            <description>\n            OData Adaptor provies ability to consume and manipulate data from OData services.\n            </description>\n            </item>\n            <item>\n            <term>ODataV4Adaptor</term>\n            <description>\n            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services\n            </description>\n            </item>\n            <item>\n            <term>WebApiAdaptor</term>\n            <description>\n            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.\n            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n            </description>\n            </item>\n            <item>\n            <term>UrlAdaptor</term>\n            <description>\n            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.\n            </description>\n            </item>\n            <item>\n            <term>RemoteSaveAdaptor</term>\n            <description>\n            Remote Save Adaptor is used for binding JSON data.\n            It interacts with remote services only for CRUD operations.\n            </description>\n            </item>\n            <item>\n            <term>CustomAdaptor</term>\n            <description>\n            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component\n            extended from DataAdaptor class.\n            </description>\n            </item>\n            <item>\n            <term>JsonAdaptor</term>\n            <description>\n            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.\n            </description>\n            </item>\n            <item>\n            <term>GraphQLAdaptor</term>\n            <description>\n            GraphQLAdaptor provides ability to consume and manipulate data from GraphQL services.\n            </description>\n            </item>\n            <item>\n            <term>GraphQLAdaptor</term>\n            <description> GraphQLAdaptor provides ability to consume and manipulate data from GraphQL service.\n            </description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Adaptors"}},{"Kind":"Components.Component","Name":"GraphQLAdaptorOptions","TypeName":"Syncfusion.Blazor.Data.GraphQLAdaptorOptions","Documentation":"\n            <summary>\n            Gets or Sets the properties to be specified for GraphQLAdaptor.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GraphQLAdaptorOptions","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.GraphQLAdaptorOptions"}},{"Kind":"Components.Component","Name":"DataAdaptor","TypeName":"Syncfusion.Blazor.Data.IAdaptor","Documentation":"\n            <summary>\n            Holds adaptor instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"DataAdaptor","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.IAdaptor"}},{"Kind":"Components.Component","Name":"InsertUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the insert URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert method is called, request will be made to InsertUrl.\n            If InsertUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"InsertUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the remove URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Remove method is called, request will be made to RemoveUrl.\n            If RemoveUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"UpdateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the update URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Update method is called, request will be made to UpdateUrl.\n            If UpdateUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"UpdateUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrudUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CRUD URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert, Remove or Update method is called, request will be made to CrudUrl.\n            If CrudUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"CrudUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"BatchUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the batch url.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When SaveChanges method is called, request will be made to BatchUrl.\n            If BatchUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"BatchUrl","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Json","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Documentation":"\n            <summary>\n            Specifies the IEnumerable collection. This data could be queried and manipulated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Json","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Object>"}},{"Kind":"Components.Component","Name":"Headers","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Specifies the key/value pair of headers.\n            </summary>\n            <remarks>\n            Use Headers to add any custom headers to the request made by DataManager.\n            Users can also send authentication bearer token using Headers property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Headers","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.String>"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the accept type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Accept","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the IEnumerale data.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Data","Common.GloballyQualifiedTypeName":"global::System.Object"}},{"Kind":"Components.Component","Name":"TimeTillExpiration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time limit to clear the cached data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeTillExpiration","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"CachingPageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the caching page size.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CachingPageSize","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"EnableCaching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables data caching.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaching","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequestType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the request type for sending data fetching.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RequestType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the primary key value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CrossDomain","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When true, then indicates that the request is a cross-domain request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CrossDomain","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Jsonp","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the jsonp request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Jsonp","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DataType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the data type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataType","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Offline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables offline mode in datamanager.\n            </summary>\n            <remarks>\n            Applicable for remote data source. If offline is true then initial request will be made to fetch\n            data. Further actions will be handled at the in-memory data and no more request will be made to the service.\n            Cached data is stored in the JSON property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Offline","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"RequiresFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Sepcifies requires format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RequiresFormat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Data.SfDataManager","Common.TypeNamespace":"Syncfusion.Blazor.Data","Common.TypeNameIdentifier":"SfDataManager","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-987552661,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Data.SfDataManager.ChildContent","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDataManager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Data.SfDataManager.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Data","Common.TypeNameIdentifier":"SfDataManager","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2060924556,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Data.SfDataManager.ChildContent","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Data.SfDataManager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Data.SfDataManager.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Data","Common.TypeNameIdentifier":"SfDataManager","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2066678741,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.JSInteropAdaptor","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Custom handler of JSInterop to invoke the JavaScript methods with DotNetObjectReference.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"JSInteropAdaptor"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.JSInteropAdaptor","Common.TypeNamespace":"Syncfusion.Blazor.Internal","Common.TypeNameIdentifier":"JSInteropAdaptor"}},{"HashCode":-1831138289,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.JSInteropAdaptor","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Custom handler of JSInterop to invoke the JavaScript methods with DotNetObjectReference.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Internal.JSInteropAdaptor"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.JSInteropAdaptor","Common.TypeNamespace":"Syncfusion.Blazor.Internal","Common.TypeNameIdentifier":"JSInteropAdaptor","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1014829049,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogAnimationSettings","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            A class used for configuring the animation properties in the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" />.\n            </summary>\n            <example>\n            In the following example, change the animation effect and delay time while opening the dialog.\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n                <DialogAnimationSettings Delay=\"400\" Effect=\"DialogEffect.SlideTop\">\n               </DialogAnimationSettings>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the delay in milliseconds before the animation begins.\n            </summary>\n            <value>\n            The animation delay is used for showing or hiding the dialog.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Delay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the duration in milliseconds that the animation takes to open or close the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" />.\n            </summary>\n            <value>\n            The animation duration for showing or hiding the dialog. The default value is <c>400</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Popups.DialogEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the name of the animation that should be used when opening and closing the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" />.\n            The following are the list of animation effects available to configure to the dialog:\n            1. Fade\n            2. FadeZoom\n            3. FlipLeftDown\n            4. FlipLeftUp\n            5. FlipRightDown\n            6. FlipRightUp\n            7. FlipXDown\n            8. FlipXUp\n            9. FlipYLeft\n            10. FlipYRight\n            11. SlideBottom\n            12. SlideLeft\n            13. SlideRight\n            14. SlideTop\n            15. Zoom\n            16. None.\n            </summary>\n            <value>\n            The animation effect for showing or hiding the dialog.\n            </value>        \n            <remarks>\n            If the Fade animation is enabled, the dialog will open with the 'FadeIn' effect and close with the 'FadeOut' effect.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.DialogEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogAnimationSettings"}},{"HashCode":-1002236011,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogAnimationSettings","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            A class used for configuring the animation properties in the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" />.\n            </summary>\n            <example>\n            In the following example, change the animation effect and delay time while opening the dialog.\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n                <DialogAnimationSettings Delay=\"400\" Effect=\"DialogEffect.SlideTop\">\n               </DialogAnimationSettings>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the delay in milliseconds before the animation begins.\n            </summary>\n            <value>\n            The animation delay is used for showing or hiding the dialog.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Delay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the duration in milliseconds that the animation takes to open or close the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" />.\n            </summary>\n            <value>\n            The animation duration for showing or hiding the dialog. The default value is <c>400</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Duration","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Popups.DialogEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the name of the animation that should be used when opening and closing the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" />.\n            The following are the list of animation effects available to configure to the dialog:\n            1. Fade\n            2. FadeZoom\n            3. FlipLeftDown\n            4. FlipLeftUp\n            5. FlipRightDown\n            6. FlipRightUp\n            7. FlipXDown\n            8. FlipXUp\n            9. FlipYLeft\n            10. FlipYRight\n            11. SlideBottom\n            12. SlideLeft\n            13. SlideRight\n            14. SlideTop\n            15. Zoom\n            16. None.\n            </summary>\n            <value>\n            The animation effect for showing or hiding the dialog.\n            </value>        \n            <remarks>\n            If the Fade animation is enabled, the dialog will open with the 'FadeIn' effect and close with the 'FadeOut' effect.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Effect","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.DialogEffect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogAnimationSettings","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2092851258,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogButton","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            A class used for configuring the button properties in the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component.\n            </summary>\n            <example>\n            In the following code example, a basic DialogButton has been rendered using the tag directive.\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogButtons>\n                  <DialogButton IsPrimary=\"true\" Content=\"Ok\" OnClick=\"@OnBtnClick\" />\n                  <DialogButton Content=\"Cancel\" OnClick=\"@OnBtnClick\" />\n             </DialogButtons>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, the button is rendered using the property.\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content specified within the tag directive is either a string or HTML Element. \n            The string content is also specified using the property.\n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of button element. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right-to-left direction for the button.\n            </summary> \n            <value> \n            <c>true</c>, if the right-to-left direction is enabled for the button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Popups.DialogButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the primary style for button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is triggered when the button is clicked.\n            </summary> \n            <remarks> \n            The event is triggered for UI-based clicks only.\n            </remarks> \n            <example> \n            <code><![CDATA[ \n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogButtons>\n                  <DialogButton IsPrimary=\"true\" Content=\"Ok\" OnClick=\"@OnBtnClick\" />\n             </DialogButtons>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Popups.ButtonType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the type of button.\n            </summary>\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Button</term>\n            <description>Perform a standard button click action.</description>\n            </item>\n            <item>\n            <term>Submit</term>\n            <description>Sends form data to a server for processing.</description>\n            </item>\n            <item>\n            <term>Reset</term>\n            <description>Reset the filled values of a form to its initial values.</description>\n            </item>\n            </list>\n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Popups.ButtonType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Popups.ButtonType.Button\" /> \n            </value>\n            <example> \n            <code><![CDATA[ \n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogButtons>\n                  <DialogButton Type=\"ButtonType.Submit\" Content=\"Submit\" OnClick=\"@OnBtnClick\" />\n             </DialogButtons>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.ButtonType"}},{"Kind":"Components.Component","Name":"IsFlat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether to enable or disable the flat appearance of the dialog buttons.\n            </summary>\n            <value> \n            <c>true</c>, if the flat appearence is enabled for dialog button. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsFlat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButton","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButton"}},{"HashCode":915101643,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogButton","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            A class used for configuring the button properties in the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component.\n            </summary>\n            <example>\n            In the following code example, a basic DialogButton has been rendered using the tag directive.\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogButtons>\n                  <DialogButton IsPrimary=\"true\" Content=\"Ok\" OnClick=\"@OnBtnClick\" />\n                  <DialogButton Content=\"Cancel\" OnClick=\"@OnBtnClick\" />\n             </DialogButtons>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, the button is rendered using the property.\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content specified within the tag directive is either a string or HTML Element. \n            The string content is also specified using the property.\n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of button element. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right-to-left direction for the button.\n            </summary> \n            <value> \n            <c>true</c>, if the right-to-left direction is enabled for the button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Popups.DialogButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Buttons.IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the primary style for button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is triggered when the button is clicked.\n            </summary> \n            <remarks> \n            The event is triggered for UI-based clicks only.\n            </remarks> \n            <example> \n            <code><![CDATA[ \n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogButtons>\n                  <DialogButton IsPrimary=\"true\" Content=\"Ok\" OnClick=\"@OnBtnClick\" />\n             </DialogButtons>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Popups.ButtonType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the type of button.\n            </summary>\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Button</term>\n            <description>Perform a standard button click action.</description>\n            </item>\n            <item>\n            <term>Submit</term>\n            <description>Sends form data to a server for processing.</description>\n            </item>\n            <item>\n            <term>Reset</term>\n            <description>Reset the filled values of a form to its initial values.</description>\n            </item>\n            </list>\n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Popups.ButtonType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Popups.ButtonType.Button\" /> \n            </value>\n            <example> \n            <code><![CDATA[ \n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogButtons>\n                  <DialogButton Type=\"ButtonType.Submit\" Content=\"Submit\" OnClick=\"@OnBtnClick\" />\n             </DialogButtons>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.ButtonType"}},{"Kind":"Components.Component","Name":"IsFlat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether to enable or disable the flat appearance of the dialog buttons.\n            </summary>\n            <value> \n            <c>true</c>, if the flat appearence is enabled for dialog button. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsFlat","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButton","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1545239343,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogButton.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, the button is rendered using the property.\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content specified within the tag directive is either a string or HTML Element. \n            The string content is also specified using the property.\n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DialogButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButton","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":347335812,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogButton.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, the button is rendered using the property.\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content specified within the tag directive is either a string or HTML Element. \n            The string content is also specified using the property.\n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.DialogButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButton.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButton","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-737480717,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogButtons","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Popups.DialogButton\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Popups.DialogButton\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Popups.DialogButtons\" /> tag directive.\n            </remarks>\n            <example>\n            In the following code example, a basic has been rendered using the tag directive.\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogButtons>\n                  <DialogButton IsPrimary=\"true\" Content=\"Ok\" OnClick=\"@OnBtnClick\" />\n                  <DialogButton Content=\"Cancel\" OnClick=\"@OnBtnClick\" />\n             </DialogButtons>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Dialog Button element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButtons","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButtons"}},{"HashCode":-1869991592,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogButtons","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Popups.DialogButton\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Popups.DialogButton\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Popups.DialogButtons\" /> tag directive.\n            </remarks>\n            <example>\n            In the following code example, a basic has been rendered using the tag directive.\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogButtons>\n                  <DialogButton IsPrimary=\"true\" Content=\"Ok\" OnClick=\"@OnBtnClick\" />\n                  <DialogButton Content=\"Cancel\" OnClick=\"@OnBtnClick\" />\n             </DialogButtons>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Dialog Button element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButtons","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButtons","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-316659603,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets the content of the Dialog Button element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DialogButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButtons.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButtons","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":474493173,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets the content of the Dialog Button element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.DialogButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButtons.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogButtons","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1867944281,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogEvents","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            A class used for configuring the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.CloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is closed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents Closed=\"OnClosedHandler\"></DialogEvents>\n              <DialogButtons>\n                  <DialogButton Content=\"Ok\" OnClick=\"@OnBtnClick\" />\n             </DialogButtons>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnClosedHandler(CloseEventArgs args)\n              {\n                 //Write your code here.\n              }\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.CloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> rendering is completed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> disposing is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.BeforeCloseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is closed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnClose=\"OnCloseHandler\"></DialogEvents>\n              <DialogButtons>\n                  <DialogButton Content=\"Ok\" OnClick=\"@OnBtnClick\" />\n             </DialogButtons>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnCloseHandler(BeforeCloseEventArgs args)\n              {\n                 //Write your code here.\n              }\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.BeforeCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDrag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is dragging.  \n            </summary>\n            <value>\n            An event callback function.\n            </value> \n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnDrag=\"OnDragHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnDragHandler(DragEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnDrag","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.DragEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragStartEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the drag of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is initiated.\n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnDragStart=\"OnDragStartHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnDragStartHandler(DragEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnDragStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.DragStartEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragStopEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the drag of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is stopped.\n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnDragStop=\"OnDragStopHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnDragStopHandler(DragStopEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnDragStop","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.DragStopEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is opening.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnOpen=\"OnOpenHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnOpenHandler(BeforeOpenEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOverlayModalClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.OverlayModalClickEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> modal overlay is clicked.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\" IsModal=\"true\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnOverlayModalClick=\"OnOverlayModalClickHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnOverlayModalClickHandler(OverlayModalClickEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOverlayModalClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.OverlayModalClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResizeStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when resize of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is initiated.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnResizeStart=\"OnOnResizeStartHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnOnResizeStartHandler(MouseEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnResizeStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResizeStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when resize of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is stopped.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnResizeStop=\"OnResizeStopHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnResizeStopHandler(MouseEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnResizeStop","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.OpenEventArgs>","Documentation":"\n            <summary>\n            Event triggers when a dialog is opened.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.OpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Resizing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is resizing.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents Resizing=\"OnResizingHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnResizingHandler(MouseEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Resizing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogEvents","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogEvents"}},{"HashCode":1558993774,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogEvents","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            A class used for configuring the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.CloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is closed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents Closed=\"OnClosedHandler\"></DialogEvents>\n              <DialogButtons>\n                  <DialogButton Content=\"Ok\" OnClick=\"@OnBtnClick\" />\n             </DialogButtons>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnClosedHandler(CloseEventArgs args)\n              {\n                 //Write your code here.\n              }\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.CloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> rendering is completed.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> disposing is completed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.BeforeCloseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is closed.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnClose=\"OnCloseHandler\"></DialogEvents>\n              <DialogButtons>\n                  <DialogButton Content=\"Ok\" OnClick=\"@OnBtnClick\" />\n             </DialogButtons>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnCloseHandler(BeforeCloseEventArgs args)\n              {\n                 //Write your code here.\n              }\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.BeforeCloseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDrag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is dragging.  \n            </summary>\n            <value>\n            An event callback function.\n            </value> \n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnDrag=\"OnDragHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnDragHandler(DragEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnDrag","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.DragEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragStartEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the drag of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is initiated.\n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnDragStart=\"OnDragStartHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnDragStartHandler(DragEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnDragStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.DragStartEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragStopEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the drag of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is stopped.\n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnDragStop=\"OnDragStopHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnDragStopHandler(DragStopEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnDragStop","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.DragStopEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is opening.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnOpen=\"OnOpenHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnOpenHandler(BeforeOpenEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOverlayModalClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.OverlayModalClickEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> modal overlay is clicked.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\" IsModal=\"true\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnOverlayModalClick=\"OnOverlayModalClickHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnOverlayModalClickHandler(OverlayModalClickEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOverlayModalClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.OverlayModalClickEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResizeStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when resize of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is initiated.  \n            </summary> \n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnResizeStart=\"OnOnResizeStartHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnOnResizeStartHandler(MouseEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnResizeStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResizeStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when resize of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is stopped.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents OnResizeStop=\"OnResizeStopHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnResizeStopHandler(MouseEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnResizeStop","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.OpenEventArgs>","Documentation":"\n            <summary>\n            Event triggers when a dialog is opened.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.OpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Resizing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is resizing.  \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogEvents Resizing=\"OnResizingHandler\"></DialogEvents>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnResizingHandler(MouseEventArgs args)\n              {\n                 //Write your code here.\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Resizing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogEvents","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1543972209,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogPositionData","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            A class used in the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> to configure the custom position within the document or target.\n            </summary>\n            <example>\n            In the following example, change the animation effect and delay time while opening the dialog.\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogPositionData X=\"center\" Y=\"top\">\n              </DialogPositionData>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogPositionData"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"X","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the offset left value for positioning the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" />.\n            </summary>\n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"X","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Y","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the offset top value for positioning the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" />.\n            </summary>\n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Y","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogPositionData","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogPositionData"}},{"HashCode":2034968019,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogPositionData","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            A class used in the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> to configure the custom position within the document or target.\n            </summary>\n            <example>\n            In the following example, change the animation effect and delay time while opening the dialog.\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              <DialogPositionData X=\"center\" Y=\"top\">\n              </DialogPositionData>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogPositionData"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"X","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the offset left value for positioning the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" />.\n            </summary>\n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"X","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Y","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the offset top value for positioning the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" />.\n            </summary>\n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Y","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogPositionData","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogPositionData","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-375493740,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogTemplates","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            A class used in the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> to configure templates to display within a header, content, and footer section of Dialog.\n            </summary>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Header><h1>Dialog Heade</h1></Header>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n                <FooterTemplate>\n                   <button class=\"e-btn\" style=\"background-color:#8A2BE2;\" onclick=\"@OnBtnClick\">OK</button>\n                </FooterTemplate>\n              </DialogTemplates>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Header","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" /> that defines the custom appearance of title area.\n            </summary>\n            <value>\n            A template content that specifies the visualization of dialog title area. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>Header</c> is used to define the appearance of the dialog title area. Specify <see cref=\"P:Syncfusion.Blazor.Popups.DialogTemplates.Header\" /> within <see cref=\"T:Syncfusion.Blazor.Popups.DialogTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Header><h1>Dialog Heade</h1></Header>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" /> that defines the custom appearance of content area.\n            </summary>\n            <value>\n            A template content that specifies the visualization of dialog content area. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>Content</c> is used to define the appearance of the dialog content area. Specify <see cref=\"P:Syncfusion.Blazor.Popups.DialogTemplates.Content\" /> within <see cref=\"T:Syncfusion.Blazor.Popups.DialogTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" /> that defines the custom appearance of footer area.\n            </summary>\n            <value>\n            The action buttons are enabled by default in the footer. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            The <c>FooterTemplate</c> is used to define the appearance of the dialog footer area. Specify <see cref=\"P:Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Popups.DialogTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n                <FooterTemplate>\n                   <button class=\"e-btn\" style=\"background-color:#8A2BE2;\" onclick=\"@OnBtnClick\">OK</button>\n                </FooterTemplate>\n              </DialogTemplates>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates"}},{"HashCode":-1489655410,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogTemplates","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            A class used in the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> to configure templates to display within a header, content, and footer section of Dialog.\n            </summary>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Header><h1>Dialog Heade</h1></Header>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n                <FooterTemplate>\n                   <button class=\"e-btn\" style=\"background-color:#8A2BE2;\" onclick=\"@OnBtnClick\">OK</button>\n                </FooterTemplate>\n              </DialogTemplates>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Header","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" /> that defines the custom appearance of title area.\n            </summary>\n            <value>\n            A template content that specifies the visualization of dialog title area. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>Header</c> is used to define the appearance of the dialog title area. Specify <see cref=\"P:Syncfusion.Blazor.Popups.DialogTemplates.Header\" /> within <see cref=\"T:Syncfusion.Blazor.Popups.DialogTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Header><h1>Dialog Heade</h1></Header>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" /> that defines the custom appearance of content area.\n            </summary>\n            <value>\n            A template content that specifies the visualization of dialog content area. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>Content</c> is used to define the appearance of the dialog content area. Specify <see cref=\"P:Syncfusion.Blazor.Popups.DialogTemplates.Content\" /> within <see cref=\"T:Syncfusion.Blazor.Popups.DialogTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" /> that defines the custom appearance of footer area.\n            </summary>\n            <value>\n            The action buttons are enabled by default in the footer. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            The <c>FooterTemplate</c> is used to define the appearance of the dialog footer area. Specify <see cref=\"P:Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Popups.DialogTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n                <FooterTemplate>\n                   <button class=\"e-btn\" style=\"background-color:#8A2BE2;\" onclick=\"@OnBtnClick\">OK</button>\n                </FooterTemplate>\n              </DialogTemplates>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":642950431,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.Header","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" /> that defines the custom appearance of title area.\n            </summary>\n            <value>\n            A template content that specifies the visualization of dialog title area. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>Header</c> is used to define the appearance of the dialog title area. Specify <see cref=\"P:Syncfusion.Blazor.Popups.DialogTemplates.Header\" /> within <see cref=\"T:Syncfusion.Blazor.Popups.DialogTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Header><h1>Dialog Heade</h1></Header>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Header","ParentTag":"DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.Header","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1659875864,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.Header","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" /> that defines the custom appearance of title area.\n            </summary>\n            <value>\n            A template content that specifies the visualization of dialog title area. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>Header</c> is used to define the appearance of the dialog title area. Specify <see cref=\"P:Syncfusion.Blazor.Popups.DialogTemplates.Header\" /> within <see cref=\"T:Syncfusion.Blazor.Popups.DialogTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Header><h1>Dialog Heade</h1></Header>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Header","ParentTag":"Syncfusion.Blazor.Popups.DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.Header","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":93918627,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.Content","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" /> that defines the custom appearance of content area.\n            </summary>\n            <value>\n            A template content that specifies the visualization of dialog content area. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>Content</c> is used to define the appearance of the dialog content area. Specify <see cref=\"P:Syncfusion.Blazor.Popups.DialogTemplates.Content\" /> within <see cref=\"T:Syncfusion.Blazor.Popups.DialogTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.Content","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1372351159,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.Content","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" /> that defines the custom appearance of content area.\n            </summary>\n            <value>\n            A template content that specifies the visualization of dialog content area. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>Content</c> is used to define the appearance of the dialog content area. Specify <see cref=\"P:Syncfusion.Blazor.Popups.DialogTemplates.Content\" /> within <see cref=\"T:Syncfusion.Blazor.Popups.DialogTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"Syncfusion.Blazor.Popups.DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.Content","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-347937369,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" /> that defines the custom appearance of footer area.\n            </summary>\n            <value>\n            The action buttons are enabled by default in the footer. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            The <c>FooterTemplate</c> is used to define the appearance of the dialog footer area. Specify <see cref=\"P:Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Popups.DialogTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n                <FooterTemplate>\n                   <button class=\"e-btn\" style=\"background-color:#8A2BE2;\" onclick=\"@OnBtnClick\">OK</button>\n                </FooterTemplate>\n              </DialogTemplates>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1281202398,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" /> that defines the custom appearance of footer area.\n            </summary>\n            <value>\n            The action buttons are enabled by default in the footer. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            The <c>FooterTemplate</c> is used to define the appearance of the dialog footer area. Specify <see cref=\"P:Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Popups.DialogTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n                <FooterTemplate>\n                   <button class=\"e-btn\" style=\"background-color:#8A2BE2;\" onclick=\"@OnBtnClick\">OK</button>\n                </FooterTemplate>\n              </DialogTemplates>\n              </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private void OnBtnClick()\n              {\n               this.Visibility = false;\n              }\n             }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.Popups.DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"DialogTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1060824265,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfDialog","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            The Blazor Dialog is a user interface (UI) component that displays critical information, errors, warnings, and questions to users, as well as confirms decisions and collects input from the users.\n            Based on user interactions, the dialog is classified as modal or non-modal (modeless).\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDialog"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the dialog element.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"T:Syncfusion.Blazor.Popups.Position\" />, <see cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Width\" /> and <see cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Height\" /> properties values are persisted\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"T:Syncfusion.Blazor.Popups.Position\" />, <see cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Width\" /> and <see cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Height\" /> properties will be stored in browser local storage to persist component's state when page reloads. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowDragging","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component can be dragged by the user. \n            </summary>\n            <value>\n            <c>true</c>, if the dragging is enabled for dialog component. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            You can reposition the dialog by clicking and dragging the header. You can only drag the dialog within the container element.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowDragging","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CloseOnEscape","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value whether the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component can be closed on pressing the escape <c>(ESC)</c> key.\n            </summary>\n            <value>\n            <c>true</c>, if the dialog closing by pressing the escap key. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CloseOnEscape","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value that can be displayed in the content section of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component.\n            </summary>\n            <value>\n            The content displayed in the dialog component.The default value is <c>string.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\" Content=\"@DialogContent\">\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private string DialogContent { get; set; } = \"<p> Dialog content </p>\";\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the custom classes to customize the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component.  \n            </summary> \n            <value> \n            If we set the css class, then the custom class is applied for dialog. The default value is <c>string.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n            <style>\n            .custom-class .e-dlg-content{\n               background-color: #e0f6ff;\n             }\n            </style>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableResize","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the user can resize the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the dialog component creates a grip to resize it in a diagonal direction. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            You can't able to resize the dialog below the value specified in the <see cref=\"P:Syncfusion.Blazor.Popups.SfDialog.MinHeight\" /> property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableResize","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ResizeHandles","TypeName":"Syncfusion.Blazor.Popups.ResizeDirection[]","Documentation":"\n            <summary>\n            Gets or sets the resize handles direction in the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component that the user can resize.\n            </summary>\n            <value>\n            You can set the resize direction for dialog component. The default value is <c>new ResizeDirection[] { ResizeDirection.SouthEast }</c>.\n            </value>\n            <remarks>\n            To resize the dialog in a specific direction, enable <see cref=\"P:Syncfusion.Blazor.Popups.SfDialog.EnableResize\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\" ResizeHandles=\"ResizeHandles\" EnableResize=\"true\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private ResizeDirection[] ResizeHandles { get; set; }\n              protected override void OnInitialized()\n              {\n                ResizeHandles = new ResizeDirection[] { ResizeDirection.NorthEast };\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ResizeHandles","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.ResizeDirection[]"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component.\n            </summary>\n            <value> \n            <c>true</c>, if the right to left direction is enabled for dialog component. The default value is `false`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets template as string, that defines custom appearance of <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> footer area.\n            </summary>\n            <value> \n            The action buttons are enabled by default in the footer. The default value is `string.Empty`. \n            </value>\n            <remarks>\n             This is an optional property and can be used only when the footer is occupied with information or custom components.\n             If the footer template is configured to the dialog, the <see cref=\"T:Syncfusion.Blazor.Popups.DialogButtons\" /> tag will be disabled.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\" FooterTemplate=\"@FoooterTemplate\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private string FoooterTemplate { get; set; } = \"<p>Footer content</p>\";\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Header","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets template as string, that defines custom appearance of <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> title area.\n            </summary>\n            <value> \n            <c>string.Empty</c>, if dialog will be displayed without the header. The default value is `string.Empty`. \n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\" Header=\"@HeaderTemplate\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private string HeaderTemplate { get; set; } = \"<p>Header content</p>\";\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the height of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> in pixels/number/percentage. Number value is considered as pixels. \n            </summary> \n            <value> \n            If we set the height value, then the dialog will render based on specified height otherwise the default height value `auto` is set.  \n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\"  Height=\"150px\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n            <seealso cref=\"P:Syncfusion.Blazor.Popups.SfDialog.MinHeight\" />\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional Html attributes such as id, title, etc., to the dialog element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"IsModal","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> can be displayed as modal.\n            </summary>\n            <value> \n            <c>true</c>, if the modal dialog is enabled. The default value is `false`. \n            </value> \n            <remarks>\n            <c>Modal</c>: It creates an overlay that prevents interaction with the parent application and the user.\n            <c>Modeless</c>: It does not prevent the user from interacting with the parent application.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"IsModal","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MinHeight","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the min-height of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> in pixels/number/percentage. Number value is considered as pixels. \n            </summary> \n            <value> \n            If we set the min-height value, then the dialog will render based on specified min-height. The default value is <c>string.Empty</c>.\n            </value>\n            <remarks>\n            The dialog's minimum height can be adjusted using the MinHeight property.\n            The dialog size will be limited to the MinHeight setting if the user attempts to resize it below this threshold.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\"  MinHeight=\"150px\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n            <seealso cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Height\" />\n        ","Metadata":{"Common.PropertyName":"MinHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowCloseIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value that represents whether the close icon can be displayed in the dialog's title section.\n            </summary>\n            <value>\n            <c>true</c>, if the close icon in dialog component is enabled. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCloseIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n             Gets or sets the target element in which the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> should be displayed. \n            </summary>\n            <value>\n            The default value is null, which refers to the `Document.body` element.\n            </value>\n            <remarks>\n             You can use this property to specify the CSS selector.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <div id=\"target\" style=\"width:100%; height:300px;\"></div>\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\" Target=\"#target\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value that represents whether the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component is visible.\n            </summary>\n            <value>\n            <c>true</c>, if the dialog will be open at initially. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component is visible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> in pixels/number/percentage. Number value is considered as pixels. \n            </summary> \n            <value> \n            If we set the width value, then the dialog will render based on specified width otherwise the default width value <c>100%</c> is set.  \n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\"  Width=\"150px\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the ZIndex that determines whether the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is displayed in front of or behind another component.\n            </summary>\n            <value>\n            The dialog will display in front of other component. The default value is <c>1000</c>.\n            </value>\n            <remarks>\n             Set the ZIndex to the dialog by obtaining all of the ZIndex elements from a page and calculating the maximum ZIndex.\n            </remarks>    \n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"AllowPrerender","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component re-render or not when the dialog gets open.\n            </summary>\n            <value>\n            <c>true</c>, if dialog component elements are maintained on the DOM when closing and opening it; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Disabling this property, the Dialog component DOM element will be destroyed when closing and re-rendered the dialog DOM element while opening it. Otherwise, the dialog will be shown when opening it and remain hidden while closing it when enabled.\n            </remarks>\n            <seealso cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Visible\" />\n        ","Metadata":{"Common.PropertyName":"AllowPrerender","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialog"}},{"HashCode":-1627944761,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfDialog","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            The Blazor Dialog is a user interface (UI) component that displays critical information, errors, warnings, and questions to users, as well as confirms decisions and collects input from the users.\n            Based on user interactions, the dialog is classified as modal or non-modal (modeless).\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.SfDialog"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the dialog element.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"T:Syncfusion.Blazor.Popups.Position\" />, <see cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Width\" /> and <see cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Height\" /> properties values are persisted\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"T:Syncfusion.Blazor.Popups.Position\" />, <see cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Width\" /> and <see cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Height\" /> properties will be stored in browser local storage to persist component's state when page reloads. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowDragging","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component can be dragged by the user. \n            </summary>\n            <value>\n            <c>true</c>, if the dragging is enabled for dialog component. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            You can reposition the dialog by clicking and dragging the header. You can only drag the dialog within the container element.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowDragging","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CloseOnEscape","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value whether the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component can be closed on pressing the escape <c>(ESC)</c> key.\n            </summary>\n            <value>\n            <c>true</c>, if the dialog closing by pressing the escap key. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CloseOnEscape","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value that can be displayed in the content section of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component.\n            </summary>\n            <value>\n            The content displayed in the dialog component.The default value is <c>string.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\" Content=\"@DialogContent\">\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private string DialogContent { get; set; } = \"<p> Dialog content </p>\";\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the custom classes to customize the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component.  \n            </summary> \n            <value> \n            If we set the css class, then the custom class is applied for dialog. The default value is <c>string.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n            <style>\n            .custom-class .e-dlg-content{\n               background-color: #e0f6ff;\n             }\n            </style>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableResize","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the user can resize the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the dialog component creates a grip to resize it in a diagonal direction. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            You can't able to resize the dialog below the value specified in the <see cref=\"P:Syncfusion.Blazor.Popups.SfDialog.MinHeight\" /> property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableResize","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ResizeHandles","TypeName":"Syncfusion.Blazor.Popups.ResizeDirection[]","Documentation":"\n            <summary>\n            Gets or sets the resize handles direction in the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component that the user can resize.\n            </summary>\n            <value>\n            You can set the resize direction for dialog component. The default value is <c>new ResizeDirection[] { ResizeDirection.SouthEast }</c>.\n            </value>\n            <remarks>\n            To resize the dialog in a specific direction, enable <see cref=\"P:Syncfusion.Blazor.Popups.SfDialog.EnableResize\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\" ResizeHandles=\"ResizeHandles\" EnableResize=\"true\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private ResizeDirection[] ResizeHandles { get; set; }\n              protected override void OnInitialized()\n              {\n                ResizeHandles = new ResizeDirection[] { ResizeDirection.NorthEast };\n              }\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ResizeHandles","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.ResizeDirection[]"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component.\n            </summary>\n            <value> \n            <c>true</c>, if the right to left direction is enabled for dialog component. The default value is `false`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets template as string, that defines custom appearance of <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> footer area.\n            </summary>\n            <value> \n            The action buttons are enabled by default in the footer. The default value is `string.Empty`. \n            </value>\n            <remarks>\n             This is an optional property and can be used only when the footer is occupied with information or custom components.\n             If the footer template is configured to the dialog, the <see cref=\"T:Syncfusion.Blazor.Popups.DialogButtons\" /> tag will be disabled.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\" FooterTemplate=\"@FoooterTemplate\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private string FoooterTemplate { get; set; } = \"<p>Footer content</p>\";\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Header","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets template as string, that defines custom appearance of <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> title area.\n            </summary>\n            <value> \n            <c>string.Empty</c>, if dialog will be displayed without the header. The default value is `string.Empty`. \n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\" Header=\"@HeaderTemplate\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n              private string HeaderTemplate { get; set; } = \"<p>Header content</p>\";\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Header","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the height of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> in pixels/number/percentage. Number value is considered as pixels. \n            </summary> \n            <value> \n            If we set the height value, then the dialog will render based on specified height otherwise the default height value `auto` is set.  \n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\"  Height=\"150px\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n            <seealso cref=\"P:Syncfusion.Blazor.Popups.SfDialog.MinHeight\" />\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional Html attributes such as id, title, etc., to the dialog element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"IsModal","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> can be displayed as modal.\n            </summary>\n            <value> \n            <c>true</c>, if the modal dialog is enabled. The default value is `false`. \n            </value> \n            <remarks>\n            <c>Modal</c>: It creates an overlay that prevents interaction with the parent application and the user.\n            <c>Modeless</c>: It does not prevent the user from interacting with the parent application.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"IsModal","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MinHeight","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the min-height of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> in pixels/number/percentage. Number value is considered as pixels. \n            </summary> \n            <value> \n            If we set the min-height value, then the dialog will render based on specified min-height. The default value is <c>string.Empty</c>.\n            </value>\n            <remarks>\n            The dialog's minimum height can be adjusted using the MinHeight property.\n            The dialog size will be limited to the MinHeight setting if the user attempts to resize it below this threshold.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\"  MinHeight=\"150px\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n            <seealso cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Height\" />\n        ","Metadata":{"Common.PropertyName":"MinHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowCloseIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value that represents whether the close icon can be displayed in the dialog's title section.\n            </summary>\n            <value>\n            <c>true</c>, if the close icon in dialog component is enabled. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCloseIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n             Gets or sets the target element in which the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> should be displayed. \n            </summary>\n            <value>\n            The default value is null, which refers to the `Document.body` element.\n            </value>\n            <remarks>\n             You can use this property to specify the CSS selector.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <div id=\"target\" style=\"width:100%; height:300px;\"></div>\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\" Target=\"#target\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value that represents whether the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component is visible.\n            </summary>\n            <value>\n            <c>true</c>, if the dialog will be open at initially. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Visible","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component is visible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Boolean>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> in pixels/number/percentage. Number value is considered as pixels. \n            </summary> \n            <value> \n            If we set the width value, then the dialog will render based on specified width otherwise the default width value <c>100%</c> is set.  \n            </value>\n            <example>\n            <code><![CDATA[\n            @using Syncfusion.Blazor.Popups\n            <SfDialog Width=\"500px\" @bind-Visible=\"Visibility\"  Width=\"150px\">\n              <DialogTemplates>\n                <Content>\n                    <p>\n                       Dialog content\n                      </p>\n                  </Content>\n              </DialogTemplates>\n            </SfDialog>\n             @code {\n              private bool Visibility { get; set; } = true;\n             }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the ZIndex that determines whether the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> is displayed in front of or behind another component.\n            </summary>\n            <value>\n            The dialog will display in front of other component. The default value is <c>1000</c>.\n            </value>\n            <remarks>\n             Set the ZIndex to the dialog by obtaining all of the ZIndex elements from a page and calculating the maximum ZIndex.\n            </remarks>    \n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"AllowPrerender","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component re-render or not when the dialog gets open.\n            </summary>\n            <value>\n            <c>true</c>, if dialog component elements are maintained on the DOM when closing and opening it; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Disabling this property, the Dialog component DOM element will be destroyed when closing and re-rendered the dialog DOM element while opening it. Otherwise, the dialog will be shown when opening it and remain hidden while closing it when enabled.\n            </remarks>\n            <seealso cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Visible\" />\n        ","Metadata":{"Common.PropertyName":"AllowPrerender","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialog","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1360958407,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.SfDialog.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets the child content of <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDialog"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialog","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-49887417,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.SfDialog.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets the child content of <see cref=\"T:Syncfusion.Blazor.Popups.SfDialog\" /> component.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.SfDialog"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialog","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1841956254,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfDialogProvider","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            DialogProvider is a target element where the built-in dialogs are shown using <see cref=\"M:Syncfusion.Blazor.Popups.SfDialogService.ConfirmAsync(System.String,System.String,Syncfusion.Blazor.Popups.DialogOptions)\" />,\n            <see cref=\"M:Syncfusion.Blazor.Popups.SfDialogService.AlertAsync(System.String,System.String,Syncfusion.Blazor.Popups.DialogOptions)\" /> and <see cref=\"M:Syncfusion.Blazor.Popups.SfDialogService.PromptAsync(System.String,System.String,Syncfusion.Blazor.Popups.DialogOptions)\" /> \n            methods that are appended to this element. \n            </summary>\n            <remarks>\n            It is recommended to add this component in `MainLayout.razor` to show utility dialogs from anywhere in the application.\n            If you add this to any particular page, the utility dialogs can then be displayed only for that page.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDialogProvider"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialogProvider","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialogProvider"}},{"HashCode":144758031,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfDialogProvider","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            DialogProvider is a target element where the built-in dialogs are shown using <see cref=\"M:Syncfusion.Blazor.Popups.SfDialogService.ConfirmAsync(System.String,System.String,Syncfusion.Blazor.Popups.DialogOptions)\" />,\n            <see cref=\"M:Syncfusion.Blazor.Popups.SfDialogService.AlertAsync(System.String,System.String,Syncfusion.Blazor.Popups.DialogOptions)\" /> and <see cref=\"M:Syncfusion.Blazor.Popups.SfDialogService.PromptAsync(System.String,System.String,Syncfusion.Blazor.Popups.DialogOptions)\" /> \n            methods that are appended to this element. \n            </summary>\n            <remarks>\n            It is recommended to add this component in `MainLayout.razor` to show utility dialogs from anywhere in the application.\n            If you add this to any particular page, the utility dialogs can then be displayed only for that page.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.SfDialogProvider"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialogProvider","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialogProvider","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":122802443,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfTooltip","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n             <summary>\n             The SfTooltip component displays a tooltip that appears as a pop-up containing information or a message when you hover, click, focus, or touch an element.\n             </summary>\n             <remarks>\n             The SfTooltip component can be customized with various properties such as content, position, and animation. \n             The Tooltip can be triggered by various events including hover, click and focus. \n             The component can be used to provide additional context or information about an element on a web page.\n             </remarks>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the Tooltip component is closed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event is useful for performing additional actions when the Tooltip is closed, such as updating the UI or performing cleanup tasks.\n            The event callback function takes a TooltipEventArgs parameter, which provides information about the Tooltip that was closed.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the Tooltip component is opened.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event is useful for performing additional actions when the Tooltip is opened, such as updating the UI or tracking user interactions.\n            The event callback function takes a TooltipEventArgs parameter, which provides information about the Tooltip that was opened.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the Tooltip hides from the screen.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event is useful for performing additional actions before the Tooltip is closed, such as updating the UI or validating user input.\n            The event callback function takes a TooltipEventArgs parameter, which provides information about the Tooltip that is about to be closed.\n            To prevent the Tooltip from closing, set the cancel property of the TooltipEventArgs parameter to true.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnCollision","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised for every collision fit calculation.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event is useful for fine-tuning the placement of the Tooltip on the screen and avoiding overlaps with other UI elements.\n            The event callback function takes a TooltipEventArgs parameter, which provides information about the Tooltip and its placement.\n            The TooltipEventArgs parameter includes the target element and collisionInfo object, which describe the Tooltip's position and collision detection results.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnCollision","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the Tooltip is displayed over the target element.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event is useful for customizing the Tooltip's appearance or behavior before it is displayed.\n            The event callback function takes a TooltipEventArgs parameter, which provides information about the Tooltip and its target element.\n            The TooltipEventArgs parameter includes the target element and an optional cancel argument, which can be set to true to prevent the Tooltip from being displayed.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the Tooltip and its contents will be added to the DOM.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            When one of its arguments `cancel` is set to true, the Tooltip can be prevented from rendering on the page.\n            This event is mainly used to customize the Tooltip before it shows up on the screen.\n            For example, to load the AJAX content or to set new animation effects on the Tooltip, this event can be opted.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after the Tooltip component is created.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the Tooltip component is destroyed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <exclude />\n            <summary>\n            Defines the Id of the Tooltip component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the template that defines the content of the component.\n            </summary>\n            <remarks>\n            The ContentTemplate is a RenderFragment that allows developers to customize the appearance and content of the component. \n            This property can be used to define custom HTML or Razor markup to be rendered as the content of the component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ContentTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Popups.AnimationModel","Documentation":"\n             <summary>\n             Gets or sets the animation settings for the opening and closing of the Tooltip.\n             </summary>\n             <remarks>\n             The animation property allows you to customize the animation of the Tooltip component, including the delay, duration, and various other effects of your choice. \n             You can set the same or different animation options to the Tooltip when it is in the open or close state.\n             </remarks>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" Animation=\"@Animation\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n            @code {\n              public AnimationModel Animation { get; set; } = new AnimationModel\n             {\n                Open = new TooltipAnimationSettings {Delay = 0, Duration = 500, Effect = Effect.ZoomIn },\n                Close = new TooltipAnimationSettings{Delay=0,Duration=500,Effect=Effect.ZoomOut}\n             };\n             }\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Animation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.AnimationModel"}},{"Kind":"Components.Component","Name":"CloseDelay","TypeName":"System.Double","Documentation":"\n             <summary>\n             Gets or sets the delay in milliseconds before the Tooltip closes.\n             </summary>\n             <remarks>\n             The CloseDelay property is used to specify the delay in milliseconds before the Tooltip closes. If no delay is needed, the default value of 0 can be used.\n             </remarks>\n             <value>\n             Accepts a double value representing the delay in milliseconds. The default value is 0.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" CloseDelay=\"2000\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CloseDelay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n             <summary>\n             Gets or sets the content of the Tooltip component.\n             </summary>\n             <remarks>\n             The Content property is used to specify the content of the Tooltip component as a string element.\n             </remarks>\n             <value>\n             Accepts a string value representing the content of the Tooltip component.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n             <summary>\n             Gets or sets the CSS classes to be applied to the Tooltip component.\n             </summary>\n             <remarks>\n             The CssClass property is used to apply custom CSS class names that define specific user-defined styles and themes to be applied to the Tooltip element. Multiple class names can be specified by separating them with a space.\n             </remarks>\n             <value>\n             Accepts a CSS class string separated by space to customize the appearance of the component.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" CssClass=\"customtip\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether to enable or disable the rendering of the component in right-to-left (RTL) direction.\n            </summary>\n            <remarks>\n            The EnableRtl property is used to render the Tooltip component from right to left direction.\n            </remarks>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled; Otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WindowCollision","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether to set the collision target element as the page viewport (window) or the Tooltip element, when using the target.\n            </summary>\n            <remarks>\n            The WindowCollision property is used to enable or disable the collision calculation between the target elements and viewport (window) instead of the Tooltip element. \n            If the value is set to <c>true</c>, the collision will be calculated between the target and the viewport (window). Otherwise, the collision will be calculated between the target and the Tooltip element.\n            </remarks>\n            <value>\n            <c>true</c>, if the window collision can be enabled; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"WindowCollision","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n             <summary>\n             Gets or sets the height of the Tooltip component.\n             </summary>\n             <remarks>\n             The Height property is used to specify the height of the Tooltip component. \n             If no height is specified, the Tooltip height will be set based on its content.\n             When the content of the Tooltip exceeds the height value, the scroll mode will be enabled. \n             The value can be any valid CSS height value, such as \"100px\" or \"50%\".\n             </remarks>\n             <value>\n             Accepts the string value. The default value is <c>auto</c>.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" Height=\"40px\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsSticky","TypeName":"System.Boolean","Documentation":"\n             <summary>\n             Gets or sets a value indicating whether the Tooltip should be displayed in an open state until it is closed manually.\n             </summary>\n             <remarks>\n             The IsSticky property is used to set the behavior of the Tooltip when it is displayed.\n             If the value is set to true, the Tooltip will be displayed in an open state until it is closed manually, regardless of the user interaction that triggered the Tooltip. \n             If the value is set to false, the Tooltip will be displayed for a specified duration based on the Animation property and then automatically closed.\n            </remarks>\n             <value>\n             <c>true</c>, if the Tooltip should be displayed in an open state until it is closed manually. Otherwise, <c>false</c>. The default value is <c>false</c>.\n             </value>\n        ","Metadata":{"Common.PropertyName":"IsSticky","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MouseTrail","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables the ability for the Tooltip to follow the mouse pointer as it moves over the specified target element.\n            </summary>\n            <value>\n            <c>true</c>, if the Tooltip should be shown when the mouse pointer moves over the specific target. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MouseTrail","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"OffsetX","TypeName":"System.Double","Documentation":"\n             <summary>\n             Gets or sets the X-axis offset between the target and Tooltip element.\n             </summary>\n             <value>\n             A double value representing the space between the target and Tooltip element in X-axis.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" OffsetX=\"20\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OffsetX","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"OffsetY","TypeName":"System.Double","Documentation":"\n             <summary>\n             Gets or sets the space between the target and Tooltip element in the Y-axis.\n             </summary>\n             <value>\n             Accepts a double value representing the space between the target and Tooltip element in the Y-axis.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" OffsetY=\"70\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OffsetY","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"OpenDelay","TypeName":"System.Double","Documentation":"\n             <summary>\n             Gets or sets the delay time in milliseconds for opening the Tooltip after the user hovers over the target element.\n             </summary>\n             <value>\n             A double value representing the delay time in milliseconds. The default value is 0, which means that the Tooltip opens immediately after the user hovers over the target element.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" OpenDelay=\"2000\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OpenDelay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"OpensOn","TypeName":"System.String","Documentation":"\n             <summary>\n             Determines the type of open mode to display the Tooltip content.\n             The available open modes are Auto, Hover, Click, Focus, and Custom.\n             </summary>\n             <value>\n             Accepts the string value. The default value is <c>Auto</c>.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" OpensOn=\"Click\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OpensOn","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Popups.Position","IsEnum":true,"Documentation":"\n             <summary>\n             To set the position of the Tooltip element with respect to the Target element.\n             </summary>\n             <value>\n             A value of the <see cref=\"P:Syncfusion.Blazor.Popups.SfTooltip.Position\" /> enumeration that specifies the position of Tooltip element. The default value is <see cref=\"F:Syncfusion.Blazor.Popups.Position.TopCenter\" />.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" Position=Position.LeftBottom>\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.Position"}},{"Kind":"Components.Component","Name":"ShowTipPointer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            To show or hide the tip pointer of the Tooltip.\n            </summary>\n            <value>\n            <c>true</c>, if the tip pointer should be shown. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowTipPointer","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n             <summary>\n             Gets or sets the target selector where the Tooltip needs to be displayed.\n             </summary>\n             <value>\n             A string value representing the target selector. The target element is considered as the parent container.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" Target=\"#btn\" >\n              <SfButton ID=\"btn\" Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Container","TypeName":"System.String","Documentation":"\n             <summary>\n             Gets or sets the container element in which the Tooltip's pop-up will be appended.\n             </summary>\n             <value>\n             A string value that represents the container element selector. The default value is <c>body</c>\".\n             </value>\n             <example>\n             <code><![CDATA[\n             <div class=\"parent\">\n             <SfTooltip Content=\"Let's go green to save the planet!!\" Container=\".parent\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             </div>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Container","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TipPointerPosition","TypeName":"Syncfusion.Blazor.Popups.TipPointerPosition","IsEnum":true,"Documentation":"\n             <summary>\n             It is used to customize the position of the tip pointer on the tooltip. The available options are Auto, Start, Middle, and End.\n             When set to auto, the tip pointer gets auto adjusted within the space of the target's length and does not point outside.\n             </summary>\n             <value>\n             A value of the <see cref=\"P:Syncfusion.Blazor.Popups.SfTooltip.TipPointerPosition\" /> enumeration that specifies the position of the tip pointer. The default value is <see cref=\"F:Syncfusion.Blazor.Popups.TipPointerPosition.Auto\" />.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" TipPointerPosition=TipPointerPosition.End>\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"TipPointerPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.TipPointerPosition"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n             <summary>\n             To set the width of the Tooltip component which accepts a string value.\n             </summary>\n             <remarks>\n             When set to auto, the Tooltip width gets auto adjusted to display its content within the viewable screen.\n            </remarks>\n             <value>\n             Accepts the string value.The default value is <c>auto</c>.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" Width=\"100px\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfTooltip","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfTooltip"}},{"HashCode":-1517214029,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfTooltip","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n             <summary>\n             The SfTooltip component displays a tooltip that appears as a pop-up containing information or a message when you hover, click, focus, or touch an element.\n             </summary>\n             <remarks>\n             The SfTooltip component can be customized with various properties such as content, position, and animation. \n             The Tooltip can be triggered by various events including hover, click and focus. \n             The component can be used to provide additional context or information about an element on a web page.\n             </remarks>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.SfTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the Tooltip component is closed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event is useful for performing additional actions when the Tooltip is closed, such as updating the UI or performing cleanup tasks.\n            The event callback function takes a TooltipEventArgs parameter, which provides information about the Tooltip that was closed.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the Tooltip component is opened.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event is useful for performing additional actions when the Tooltip is opened, such as updating the UI or tracking user interactions.\n            The event callback function takes a TooltipEventArgs parameter, which provides information about the Tooltip that was opened.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the Tooltip hides from the screen.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event is useful for performing additional actions before the Tooltip is closed, such as updating the UI or validating user input.\n            The event callback function takes a TooltipEventArgs parameter, which provides information about the Tooltip that is about to be closed.\n            To prevent the Tooltip from closing, set the cancel property of the TooltipEventArgs parameter to true.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnCollision","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised for every collision fit calculation.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event is useful for fine-tuning the placement of the Tooltip on the screen and avoiding overlaps with other UI elements.\n            The event callback function takes a TooltipEventArgs parameter, which provides information about the Tooltip and its placement.\n            The TooltipEventArgs parameter includes the target element and collisionInfo object, which describe the Tooltip's position and collision detection results.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnCollision","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the Tooltip is displayed over the target element.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event is useful for customizing the Tooltip's appearance or behavior before it is displayed.\n            The event callback function takes a TooltipEventArgs parameter, which provides information about the Tooltip and its target element.\n            The TooltipEventArgs parameter includes the target element and an optional cancel argument, which can be set to true to prevent the Tooltip from being displayed.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the Tooltip and its contents will be added to the DOM.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            When one of its arguments `cancel` is set to true, the Tooltip can be prevented from rendering on the page.\n            This event is mainly used to customize the Tooltip before it shows up on the screen.\n            For example, to load the AJAX content or to set new animation effects on the Tooltip, this event can be opted.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.Popups.TooltipEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after the Tooltip component is created.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the Tooltip component is destroyed.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <exclude />\n            <summary>\n            Defines the Id of the Tooltip component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the template that defines the content of the component.\n            </summary>\n            <remarks>\n            The ContentTemplate is a RenderFragment that allows developers to customize the appearance and content of the component. \n            This property can be used to define custom HTML or Razor markup to be rendered as the content of the component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ContentTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Popups.AnimationModel","Documentation":"\n             <summary>\n             Gets or sets the animation settings for the opening and closing of the Tooltip.\n             </summary>\n             <remarks>\n             The animation property allows you to customize the animation of the Tooltip component, including the delay, duration, and various other effects of your choice. \n             You can set the same or different animation options to the Tooltip when it is in the open or close state.\n             </remarks>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" Animation=\"@Animation\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n            @code {\n              public AnimationModel Animation { get; set; } = new AnimationModel\n             {\n                Open = new TooltipAnimationSettings {Delay = 0, Duration = 500, Effect = Effect.ZoomIn },\n                Close = new TooltipAnimationSettings{Delay=0,Duration=500,Effect=Effect.ZoomOut}\n             };\n             }\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Animation","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.AnimationModel"}},{"Kind":"Components.Component","Name":"CloseDelay","TypeName":"System.Double","Documentation":"\n             <summary>\n             Gets or sets the delay in milliseconds before the Tooltip closes.\n             </summary>\n             <remarks>\n             The CloseDelay property is used to specify the delay in milliseconds before the Tooltip closes. If no delay is needed, the default value of 0 can be used.\n             </remarks>\n             <value>\n             Accepts a double value representing the delay in milliseconds. The default value is 0.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" CloseDelay=\"2000\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CloseDelay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n             <summary>\n             Gets or sets the content of the Tooltip component.\n             </summary>\n             <remarks>\n             The Content property is used to specify the content of the Tooltip component as a string element.\n             </remarks>\n             <value>\n             Accepts a string value representing the content of the Tooltip component.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n             <summary>\n             Gets or sets the CSS classes to be applied to the Tooltip component.\n             </summary>\n             <remarks>\n             The CssClass property is used to apply custom CSS class names that define specific user-defined styles and themes to be applied to the Tooltip element. Multiple class names can be specified by separating them with a space.\n             </remarks>\n             <value>\n             Accepts a CSS class string separated by space to customize the appearance of the component.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" CssClass=\"customtip\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether to enable or disable the rendering of the component in right-to-left (RTL) direction.\n            </summary>\n            <remarks>\n            The EnableRtl property is used to render the Tooltip component from right to left direction.\n            </remarks>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled; Otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"WindowCollision","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether to set the collision target element as the page viewport (window) or the Tooltip element, when using the target.\n            </summary>\n            <remarks>\n            The WindowCollision property is used to enable or disable the collision calculation between the target elements and viewport (window) instead of the Tooltip element. \n            If the value is set to <c>true</c>, the collision will be calculated between the target and the viewport (window). Otherwise, the collision will be calculated between the target and the Tooltip element.\n            </remarks>\n            <value>\n            <c>true</c>, if the window collision can be enabled; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"WindowCollision","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n             <summary>\n             Gets or sets the height of the Tooltip component.\n             </summary>\n             <remarks>\n             The Height property is used to specify the height of the Tooltip component. \n             If no height is specified, the Tooltip height will be set based on its content.\n             When the content of the Tooltip exceeds the height value, the scroll mode will be enabled. \n             The value can be any valid CSS height value, such as \"100px\" or \"50%\".\n             </remarks>\n             <value>\n             Accepts the string value. The default value is <c>auto</c>.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" Height=\"40px\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsSticky","TypeName":"System.Boolean","Documentation":"\n             <summary>\n             Gets or sets a value indicating whether the Tooltip should be displayed in an open state until it is closed manually.\n             </summary>\n             <remarks>\n             The IsSticky property is used to set the behavior of the Tooltip when it is displayed.\n             If the value is set to true, the Tooltip will be displayed in an open state until it is closed manually, regardless of the user interaction that triggered the Tooltip. \n             If the value is set to false, the Tooltip will be displayed for a specified duration based on the Animation property and then automatically closed.\n            </remarks>\n             <value>\n             <c>true</c>, if the Tooltip should be displayed in an open state until it is closed manually. Otherwise, <c>false</c>. The default value is <c>false</c>.\n             </value>\n        ","Metadata":{"Common.PropertyName":"IsSticky","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MouseTrail","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables the ability for the Tooltip to follow the mouse pointer as it moves over the specified target element.\n            </summary>\n            <value>\n            <c>true</c>, if the Tooltip should be shown when the mouse pointer moves over the specific target. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MouseTrail","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"OffsetX","TypeName":"System.Double","Documentation":"\n             <summary>\n             Gets or sets the X-axis offset between the target and Tooltip element.\n             </summary>\n             <value>\n             A double value representing the space between the target and Tooltip element in X-axis.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" OffsetX=\"20\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OffsetX","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"OffsetY","TypeName":"System.Double","Documentation":"\n             <summary>\n             Gets or sets the space between the target and Tooltip element in the Y-axis.\n             </summary>\n             <value>\n             Accepts a double value representing the space between the target and Tooltip element in the Y-axis.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" OffsetY=\"70\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OffsetY","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"OpenDelay","TypeName":"System.Double","Documentation":"\n             <summary>\n             Gets or sets the delay time in milliseconds for opening the Tooltip after the user hovers over the target element.\n             </summary>\n             <value>\n             A double value representing the delay time in milliseconds. The default value is 0, which means that the Tooltip opens immediately after the user hovers over the target element.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" OpenDelay=\"2000\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OpenDelay","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"OpensOn","TypeName":"System.String","Documentation":"\n             <summary>\n             Determines the type of open mode to display the Tooltip content.\n             The available open modes are Auto, Hover, Click, Focus, and Custom.\n             </summary>\n             <value>\n             Accepts the string value. The default value is <c>Auto</c>.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" OpensOn=\"Click\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OpensOn","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Popups.Position","IsEnum":true,"Documentation":"\n             <summary>\n             To set the position of the Tooltip element with respect to the Target element.\n             </summary>\n             <value>\n             A value of the <see cref=\"P:Syncfusion.Blazor.Popups.SfTooltip.Position\" /> enumeration that specifies the position of Tooltip element. The default value is <see cref=\"F:Syncfusion.Blazor.Popups.Position.TopCenter\" />.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" Position=Position.LeftBottom>\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.Position"}},{"Kind":"Components.Component","Name":"ShowTipPointer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            To show or hide the tip pointer of the Tooltip.\n            </summary>\n            <value>\n            <c>true</c>, if the tip pointer should be shown. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowTipPointer","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n             <summary>\n             Gets or sets the target selector where the Tooltip needs to be displayed.\n             </summary>\n             <value>\n             A string value representing the target selector. The target element is considered as the parent container.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" Target=\"#btn\" >\n              <SfButton ID=\"btn\" Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Container","TypeName":"System.String","Documentation":"\n             <summary>\n             Gets or sets the container element in which the Tooltip's pop-up will be appended.\n             </summary>\n             <value>\n             A string value that represents the container element selector. The default value is <c>body</c>\".\n             </value>\n             <example>\n             <code><![CDATA[\n             <div class=\"parent\">\n             <SfTooltip Content=\"Let's go green to save the planet!!\" Container=\".parent\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             </div>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Container","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TipPointerPosition","TypeName":"Syncfusion.Blazor.Popups.TipPointerPosition","IsEnum":true,"Documentation":"\n             <summary>\n             It is used to customize the position of the tip pointer on the tooltip. The available options are Auto, Start, Middle, and End.\n             When set to auto, the tip pointer gets auto adjusted within the space of the target's length and does not point outside.\n             </summary>\n             <value>\n             A value of the <see cref=\"P:Syncfusion.Blazor.Popups.SfTooltip.TipPointerPosition\" /> enumeration that specifies the position of the tip pointer. The default value is <see cref=\"F:Syncfusion.Blazor.Popups.TipPointerPosition.Auto\" />.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" TipPointerPosition=TipPointerPosition.End>\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"TipPointerPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Popups.TipPointerPosition"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n             <summary>\n             To set the width of the Tooltip component which accepts a string value.\n             </summary>\n             <remarks>\n             When set to auto, the Tooltip width gets auto adjusted to display its content within the viewable screen.\n            </remarks>\n             <value>\n             Accepts the string value.The default value is <c>auto</c>.\n             </value>\n             <example>\n             <code><![CDATA[\n             <SfTooltip Content=\"Let's go green to save the planet!!\" Width=\"100px\">\n              <SfButton Content=\"Show Tooltip\"></SfButton>\n             </SfTooltip>\n             ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfTooltip","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfTooltip","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-886979828,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.SfTooltip.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfTooltip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.SfTooltip.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfTooltip","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1602658603,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.SfTooltip.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.SfTooltip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.SfTooltip.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfTooltip","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1181088979,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.SfTooltip.ContentTemplate","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the template that defines the content of the component.\n            </summary>\n            <remarks>\n            The ContentTemplate is a RenderFragment that allows developers to customize the appearance and content of the component. \n            This property can be used to define custom HTML or Razor markup to be rendered as the content of the component.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"SfTooltip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.SfTooltip.ContentTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfTooltip","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-746831722,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.SfTooltip.ContentTemplate","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the template that defines the content of the component.\n            </summary>\n            <remarks>\n            The ContentTemplate is a RenderFragment that allows developers to customize the appearance and content of the component. \n            This property can be used to define custom HTML or Razor markup to be rendered as the content of the component.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"Syncfusion.Blazor.Popups.SfTooltip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.SfTooltip.ContentTemplate","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfTooltip","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":460095686,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.TooltipTemplates","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configure templates to display content within the tooltip component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TooltipTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"TooltipTemplates"}},{"HashCode":-1093664539,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.TooltipTemplates","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configure templates to display content within the tooltip component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.TooltipTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"TooltipTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1787287530,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.TooltipTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TooltipTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"TooltipTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1664566992,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.TooltipTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.TooltipTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"TooltipTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":102176546,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.TooltipTemplates.Content","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"TooltipTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates.Content","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"TooltipTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-457005329,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.TooltipTemplates.Content","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"Syncfusion.Blazor.Popups.TooltipTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates.Content","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"TooltipTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":774748886,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups._Imports","AssemblyName":"Syncfusion.Blazor.Popups","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":2137905190,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups._Imports","AssemblyName":"Syncfusion.Blazor.Popups","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups._Imports","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1261480640,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Represents the event handlers for a AutoComplete component in the Blazor framework.\n            </summary>\n            <typeparam name=\"TValue\">The type of value associated with the AutoComplete.</typeparam>\n            <typeparam name=\"TItem\">The type of item associated with the AutoComplete.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AutoCompleteEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before fetching data from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the evnet callback that will be invoked after data is fetched sucaction from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data fetch request fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the suggestions popup before it opens\n            </summary>\n            <remarks>\n            Prevent the suggestions popup open action using <see cref=\"P:Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAutoComplete TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <AutoCompleteEvents TValue=\"string\" TItem=\"string\" OnOpen=\"@OnOpenHandler\"/>\n            </SfAutoComplete>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpenHandler(BeforeOpenEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the AutoComplete component loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property changed.\n            </summary>\n            <remarks>\n            This event triggers when an item in a popup is selected or when the user changes the model value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAutoComplete TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <AutoCompleteEvents TValue=\"string\" TItem=\"string\" ValueChange=\"@OnChange\"/>\n            </SfAutoComplete>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args) {\n                    var NewValue = args.Value;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the suggestions popup is closed.\n            </summary>\n            <remarks>\n            Prevent the suggestions popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAutoComplete TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <AutoCompleteEvents TValue=\"string\" TItem=\"string\" OnClose=\"@OnCloseHandler\"/>\n            </SfAutoComplete>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnCloseHandler(PopupEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback for the custom value specifier event of the AutoComplete.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data source is populated in the suggestion list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked on typing a character in the AutoComplete.\n            </summary>\n            <remarks>\n            Prevent the default filter action and make your query enable the <see cref=\"P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.PreventDefaultAction\" /> event argument, and pass the modified data source and query in the <see cref=\"M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterAsync(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)\" /> method.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAutoComplete @ref=\"AutoCompleteObj\" TItem=\"string\" TValue=\"string\" AllowFiltering=\"true\" DataSource=\"@MyList\">\n                <AutoCompleteEvents TValue=\"string\" TItem=\"string\" Filtering=\"@OnFilteringHandler\" />\n            </SfAutoComplete>\n            @code{\n                SfAutoComplete<string, string> AutoCompleteObj { get; set; }\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(FilteringEventArgs args) {\n                    args.PreventDefaultAction = true;\n                    var query = new Query().Where(new WhereFilter() { Field = \"Text\", Operator = \"contains\", value = args.Text, IgnoreCase = true });\n                    await AutoCompleteObj.FilterAsync(MyList, query);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the suggestions popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the suggestions popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when an item is selected from the suggestions popup by the user either with a mouse tap or with a keyboard navigation.\n            </summary>\n            <remarks>\n            Prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAutoComplete TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <AutoCompleteEvents TValue=\"string\" TItem=\"string\" OnValueSelect=\"@OnSelectHandler\" />\n            </SfAutoComplete>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnSelectHandler(SelectEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteEvents","Components.GenericTyped":"True"}},{"HashCode":-167184278,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Represents the event handlers for a AutoComplete component in the Blazor framework.\n            </summary>\n            <typeparam name=\"TValue\">The type of value associated with the AutoComplete.</typeparam>\n            <typeparam name=\"TItem\">The type of item associated with the AutoComplete.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before fetching data from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the evnet callback that will be invoked after data is fetched sucaction from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data fetch request fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the suggestions popup before it opens\n            </summary>\n            <remarks>\n            Prevent the suggestions popup open action using <see cref=\"P:Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAutoComplete TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <AutoCompleteEvents TValue=\"string\" TItem=\"string\" OnOpen=\"@OnOpenHandler\"/>\n            </SfAutoComplete>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpenHandler(BeforeOpenEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the AutoComplete component loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property changed.\n            </summary>\n            <remarks>\n            This event triggers when an item in a popup is selected or when the user changes the model value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAutoComplete TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <AutoCompleteEvents TValue=\"string\" TItem=\"string\" ValueChange=\"@OnChange\"/>\n            </SfAutoComplete>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args) {\n                    var NewValue = args.Value;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the suggestions popup is closed.\n            </summary>\n            <remarks>\n            Prevent the suggestions popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAutoComplete TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <AutoCompleteEvents TValue=\"string\" TItem=\"string\" OnClose=\"@OnCloseHandler\"/>\n            </SfAutoComplete>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnCloseHandler(PopupEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback for the custom value specifier event of the AutoComplete.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data source is populated in the suggestion list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked on typing a character in the AutoComplete.\n            </summary>\n            <remarks>\n            Prevent the default filter action and make your query enable the <see cref=\"P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.PreventDefaultAction\" /> event argument, and pass the modified data source and query in the <see cref=\"M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterAsync(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)\" /> method.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAutoComplete @ref=\"AutoCompleteObj\" TItem=\"string\" TValue=\"string\" AllowFiltering=\"true\" DataSource=\"@MyList\">\n                <AutoCompleteEvents TValue=\"string\" TItem=\"string\" Filtering=\"@OnFilteringHandler\" />\n            </SfAutoComplete>\n            @code{\n                SfAutoComplete<string, string> AutoCompleteObj { get; set; }\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(FilteringEventArgs args) {\n                    args.PreventDefaultAction = true;\n                    var query = new Query().Where(new WhereFilter() { Field = \"Text\", Operator = \"contains\", value = args.Text, IgnoreCase = true });\n                    await AutoCompleteObj.FilterAsync(MyList, query);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the suggestions popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the suggestions popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when an item is selected from the suggestions popup by the user either with a mouse tap or with a keyboard navigation.\n            </summary>\n            <remarks>\n            Prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAutoComplete TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <AutoCompleteEvents TValue=\"string\" TItem=\"string\" OnValueSelect=\"@OnSelectHandler\" />\n            </SfAutoComplete>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnSelectHandler(SelectEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1350887724,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Represents the Fields property mapping the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AutoCompleteFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the field's name to group the AutoComplete items.\n            </summary>\n            <value>\n            The name of the field to group.\n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the CSS class(es) for the icon displayed for each list item in the suggestion popup.\n            </summary>\n            <value>\n            The CSS class(es) name for the icon.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the text displayed for each list item in the suggestion popup.\n            </summary>\n            <value>\n            The column name used as the text displayed for each list item.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the value for each list item in the suggestion popup.\n            </summary>\n            <value>\n            The name of the column to map as the value for each list item.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteFieldSettings"}},{"HashCode":1594231331,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Represents the Fields property mapping the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the field's name to group the AutoComplete items.\n            </summary>\n            <value>\n            The name of the field to group.\n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the CSS class(es) for the icon displayed for each list item in the suggestion popup.\n            </summary>\n            <value>\n            The CSS class(es) name for the icon.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the text displayed for each list item in the suggestion popup.\n            </summary>\n            <value>\n            The column name used as the text displayed for each list item.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the value for each list item in the suggestion popup.\n            </summary>\n            <value>\n            The name of the column to map as the value for each list item.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-892659568,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The AutoComplete has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            /// <typeparam name=\"TItem\">Specifies the type of AutoCompleteTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.GenericTyped":"True"}},{"HashCode":855852601,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The AutoComplete has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            /// <typeparam name=\"TItem\">Specifies the type of AutoCompleteTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1419307676,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-410528803,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1903840576,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1220375906,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2043942615,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1440178729,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":177117445,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-745562352,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1080675135,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1592517119,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1744107166,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1520222382,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"AutoCompleteTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":892949069,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.\n            </summary>\n            <summary>\n            The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Highlight","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the searched characters on the suggested list items should highlight matched portions of the text.\n            </summary>\n            <value>\n            <c>true</c> if the searched characters should be highlighted; otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Highlight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MinLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the minimum length of input characters required for the search action to perform suggestions.\n            </summary>\n            <value>\n            An integer value representing the minimum length of search characters. The default value is <c>1</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MinLength","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the type of filtering to be applied for the AutoComplete items.\n            </summary>\n            <value>\n            The default filter type is <see cref=\"F:Syncfusion.Blazor.DropDowns.FilterType.Contains\" />.\n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the AutoComplete should display a clear button to clear the selected value.\n            </summary>\n            <value>\n            <c>true</c> if the clear button is visible; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n            <remarks>\n            When the clear button is clicked, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" />, and <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Index\" /> and properties are reset to <c>null</c>. This allows users to clear the selected value and start fresh easily.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowPopupButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the popup button should be displayed in the AutoComplete.\n            </summary>\n            <value>\n            <c>true</c>, if the popup button should be shown. Otherwise, <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowPopupButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SuggestionCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the maximum number of suggestions list to be displayed in the AutoComplete dropdown.\n            </summary>\n            <value>\n            The maximum number of items that will be displayed in the suggestion list. The default value is <c>20</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"SuggestionCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"AllowCustom","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the ComboBox allows custom values to be entered.\n            </summary>\n            <value>\n              <c>true</c> if custom values are allowed the user to enter a value that does not exist in the data source; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowCustom","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Autofill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the ComboBox automatically fills the input with the first matched item while typing.\n            </summary>\n            <value>\n            <c>true</c> if autofill is enabled; otherwise, <c>false</c>. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Autofill","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the ComboBox should perform validation when input is entered.\n            </summary>\n            <value>\n            <c>true</c> if input validation is enabled; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. \n            The <see cref=\"P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.ValueChange\" /> event will be fired after the component loses its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique identifier for <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only unique value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value in the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the filtering option is enabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering option is enabled and show the filter bar (search box) in the pop-up; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The filter action retrieves the matched items using the <see cref=\"P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Filtering\" /> event based on the characters typed in the search textbox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the drop-down list component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for dropdown list component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the Dropdown list component is enabled; otherwise, it is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the filter textbox has no text and removes the focus.\n            </summary>\n            <value>\n            The text that is displayed when the filter text box has no text. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            This property value is updated only when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AllowFiltering\" /> is enabled.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the dropdown list. The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the DropDownList component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the DropDownList component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" Placeholder=\"Select a value\" FloatLabelType=\"FloatLabelType.Auto\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the dropdown list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Select T-shirt size\" }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as disabled, value, and more that will be applied to the dropdown list input element.\n            </summary>\n            <value>\n            The value as dictionary collection. The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both the property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the dropdown list component.\n            </summary>\n            <value>\n            The index of the selected items in the list. The default value is <c>null</c> which indicates that nothing is selected.\n            </value>\n            <exception cref=\"T:System.ArgumentOutOfRangeException\">The index was set to less than -1, or greater than or equal to the number of items on the list at the time the list is rendered.</exception>\n            <remarks>\n            Use this property to determine the index of the currently selected item in the list if the dropdown list component allows only one selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the index changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32?>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the dropdown list has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the dropdown list has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list.\n            </summary>\n            <value>\n            The preferred height of the popup list in pixels or percentage of the dropdown list. The default value is <c>300px</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list. By default, the popup width sets based on the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the popup list in pixels or percentage of the dropdown list. The default value is <c>100%</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> is in read-only mode or not.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown list is in read-only mode; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            In read-only mode, the dropdown list popup can not be opened on click.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the virtual scrolling is enabled or not.\n            </summary>\n            <value>\n            <c>true</c> if the virtual scrolling for dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            To improve performance, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is set to <c>true</c>. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items to be fetched in the popup when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is enabled.\n            </summary>\n            <value>\n            The number of list items to be fetched in dropdown list component. The default value is <c>5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets the value of the selected item in the dropdown list component. This will be used with two-way binding.\n            </summary>\n            <value>\n            The value of the selected item in the dropdown list component. The default is <c>null</c>.\n            </value>\n            <remarks>\n            Use the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property to specify or determine the value displayed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that trigger when the value changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the dropdown list in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the location of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component in the tab order.\n            </summary>\n            <value>\n            The numeric index of the dropdown list in the tab order. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.GenericTyped":"True"}},{"HashCode":665687117,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.\n            </summary>\n            <summary>\n            The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Highlight","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the searched characters on the suggested list items should highlight matched portions of the text.\n            </summary>\n            <value>\n            <c>true</c> if the searched characters should be highlighted; otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Highlight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"MinLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the minimum length of input characters required for the search action to perform suggestions.\n            </summary>\n            <value>\n            An integer value representing the minimum length of search characters. The default value is <c>1</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MinLength","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the type of filtering to be applied for the AutoComplete items.\n            </summary>\n            <value>\n            The default filter type is <see cref=\"F:Syncfusion.Blazor.DropDowns.FilterType.Contains\" />.\n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the AutoComplete should display a clear button to clear the selected value.\n            </summary>\n            <value>\n            <c>true</c> if the clear button is visible; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n            <remarks>\n            When the clear button is clicked, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" />, and <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Index\" /> and properties are reset to <c>null</c>. This allows users to clear the selected value and start fresh easily.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowPopupButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the popup button should be displayed in the AutoComplete.\n            </summary>\n            <value>\n            <c>true</c>, if the popup button should be shown. Otherwise, <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowPopupButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SuggestionCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the maximum number of suggestions list to be displayed in the AutoComplete dropdown.\n            </summary>\n            <value>\n            The maximum number of items that will be displayed in the suggestion list. The default value is <c>20</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"SuggestionCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"AllowCustom","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the ComboBox allows custom values to be entered.\n            </summary>\n            <value>\n              <c>true</c> if custom values are allowed the user to enter a value that does not exist in the data source; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowCustom","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Autofill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the ComboBox automatically fills the input with the first matched item while typing.\n            </summary>\n            <value>\n            <c>true</c> if autofill is enabled; otherwise, <c>false</c>. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Autofill","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the ComboBox should perform validation when input is entered.\n            </summary>\n            <value>\n            <c>true</c> if input validation is enabled; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. \n            The <see cref=\"P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.ValueChange\" /> event will be fired after the component loses its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique identifier for <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only unique value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value in the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the filtering option is enabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering option is enabled and show the filter bar (search box) in the pop-up; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The filter action retrieves the matched items using the <see cref=\"P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Filtering\" /> event based on the characters typed in the search textbox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the drop-down list component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for dropdown list component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the Dropdown list component is enabled; otherwise, it is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the filter textbox has no text and removes the focus.\n            </summary>\n            <value>\n            The text that is displayed when the filter text box has no text. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            This property value is updated only when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AllowFiltering\" /> is enabled.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the dropdown list. The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the DropDownList component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the DropDownList component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" Placeholder=\"Select a value\" FloatLabelType=\"FloatLabelType.Auto\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the dropdown list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Select T-shirt size\" }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as disabled, value, and more that will be applied to the dropdown list input element.\n            </summary>\n            <value>\n            The value as dictionary collection. The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both the property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the dropdown list component.\n            </summary>\n            <value>\n            The index of the selected items in the list. The default value is <c>null</c> which indicates that nothing is selected.\n            </value>\n            <exception cref=\"T:System.ArgumentOutOfRangeException\">The index was set to less than -1, or greater than or equal to the number of items on the list at the time the list is rendered.</exception>\n            <remarks>\n            Use this property to determine the index of the currently selected item in the list if the dropdown list component allows only one selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the index changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32?>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the dropdown list has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the dropdown list has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list.\n            </summary>\n            <value>\n            The preferred height of the popup list in pixels or percentage of the dropdown list. The default value is <c>300px</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list. By default, the popup width sets based on the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the popup list in pixels or percentage of the dropdown list. The default value is <c>100%</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> is in read-only mode or not.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown list is in read-only mode; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            In read-only mode, the dropdown list popup can not be opened on click.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the virtual scrolling is enabled or not.\n            </summary>\n            <value>\n            <c>true</c> if the virtual scrolling for dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            To improve performance, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is set to <c>true</c>. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items to be fetched in the popup when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is enabled.\n            </summary>\n            <value>\n            The number of list items to be fetched in dropdown list component. The default value is <c>5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets the value of the selected item in the dropdown list component. This will be used with two-way binding.\n            </summary>\n            <value>\n            The value of the selected item in the dropdown list component. The default is <c>null</c>.\n            </value>\n            <remarks>\n            Use the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property to specify or determine the value displayed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that trigger when the value changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the dropdown list in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the location of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component in the tab order.\n            </summary>\n            <value>\n            The numeric index of the dropdown list in the tab order. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1554504905,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":991271957,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2127665615,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1987564424,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1224995429,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-212165901,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":289079059,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1613508707,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-492189102,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1341500880,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1486624758,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2070240824,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1228722755,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-564437668,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-959506711,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":849380913,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-524521618,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownBase can be created data source and fetch the list of data from data bound component.\n            </summary>\n            <summary>\n            The DropDownBase can be created data source and fetch the list of data from data bound component.\n            </summary>\n            <typeparam name=\"T\">Specifies the type of SfDropDownBase.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.DropDowns.SfDropDownBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<T>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<T>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<T>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<T>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.GenericTyped":"True"}},{"HashCode":1795113827,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownBase can be created data source and fetch the list of data from data bound component.\n            </summary>\n            <summary>\n            The DropDownBase can be created data source and fetch the list of data from data bound component.\n            </summary>\n            <typeparam name=\"T\">Specifies the type of SfDropDownBase.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.DropDowns.SfDropDownBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<T>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<T>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<T>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<T>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<T>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-227291324,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1860335572,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1542036040,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1046673903,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2033615211,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfDropDownBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-391393507,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-630365651,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfDropDownBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":253633694,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownBase","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2134996838,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Represents the event handlers for a ComboBox component in the Blazor framework.\n            </summary>\n            <typeparam name=\"TValue\">The type of value associated with the ComboBox.</typeparam>\n            <typeparam name=\"TItem\">The type of item associated with the ComboBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ComboBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before fetching data from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after data is fetched suction from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data fetch request fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup before it opens.\n            </summary>\n            <remarks>\n            Prevent the dropdown popup open action using <see cref=\"P:Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfComboBox TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <ComboBoxEvents TValue=\"string\" TItem=\"string\" OnOpen=\"@OnOpenHandler\"/>\n            </SfComboBox>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpenHandler(BeforeOpenEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the ComboBox component loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property changed.\n            </summary>\n            <remarks>\n             This event triggers when an item in a popup is selected or when the user changes the model value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfComboBox TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <ComboBoxEvents TValue=\"string\" TItem=\"string\" ValueChange=\"@OnChange\"/>\n            </SfComboBox>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args) {\n                    var NewValue = args.Value;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the dropdown popup is closed.\n            </summary>\n            <remarks>\n            Prevent the dropdown popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfComboBox TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <ComboBoxEvents TValue=\"string\" TItem=\"string\" OnClose=\"@OnCloseHandler\"/>\n            </SfComboBox>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnCloseHandler(PopupEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when custom values (not present in the data source) are selected in the ComboBox component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfComboBox TValue=\"int\" TItem=\"Countries\" DataSource=\"@CountryList\">\n               <ComboBoxEvents TValue=\"int\" TItem=\"Countries\" CustomValueSpecifier=\"@customValue\"></ComboBoxEvents>\n               <ComboBoxFieldSettings Text=\"Name\" Value=\"Code\"></ComboBoxFieldSettings>\n            </SfComboBox>\n            @code{\n                public class Countries {\n                    public string Name { get; set; }\n                    public int Code { get; set; }\n                }\n                private List<Countries> CountryList = new List<Countries>() {\n                    new Countries(){ Code= 101, Name= \"Australia\" },\n                    new Countries(){ Code= 102, Name= \"Canada\" }\n                 }\n                private void customValue(CustomValueSpecifierEventArgs<Countries> args) {\n                    args.Item = new Countries() { Code = 103, Name = args.Text };\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked on typing a character in the ComboBox.\n            </summary>\n            <remarks>\n            Prevent the default filter action and make your query enable the <see cref=\"P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.PreventDefaultAction\" /> event argument, and pass the modified data source and query in the <see cref=\"M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterAsync(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)\" /> method.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfComboBox @ref=\"ComboBoxObj\" TItem=\"string\" TValue=\"string\" AllowFiltering=\"true\" DataSource=\"@MyList\">\n                <ComboBoxEvents TValue=\"string\" TItem=\"string\" Filtering=\"@OnFilteringHandler\" />\n            </SfComboBox>\n            @code{\n                SfComboBox<string, string> ComboBoxObj { get; set; }\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(FilteringEventArgs args) {\n                    args.PreventDefaultAction = true;\n                    var query = new Query().Where(new WhereFilter() { Field = \"Text\", Operator = \"contains\", value = args.Text, IgnoreCase = true });\n                    await ComboBoxObj.FilterAsync(MyList, query);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the dropdown popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when an item is selected from the dropdown popup by the user either with a mouse tap or with a keyboard navigation.\n            </summary>\n            <remarks>\n            Prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfComboBox TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <ComboBoxEvents TValue=\"string\" TItem=\"string\" OnValueSelect=\"@OnSelectHandler\" />\n            </SfComboBox>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnSelectHandler(SelectEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxEvents","Components.GenericTyped":"True"}},{"HashCode":73557199,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Represents the event handlers for a ComboBox component in the Blazor framework.\n            </summary>\n            <typeparam name=\"TValue\">The type of value associated with the ComboBox.</typeparam>\n            <typeparam name=\"TItem\">The type of item associated with the ComboBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ComboBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before fetching data from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after data is fetched suction from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data fetch request fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup before it opens.\n            </summary>\n            <remarks>\n            Prevent the dropdown popup open action using <see cref=\"P:Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfComboBox TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <ComboBoxEvents TValue=\"string\" TItem=\"string\" OnOpen=\"@OnOpenHandler\"/>\n            </SfComboBox>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpenHandler(BeforeOpenEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the ComboBox component loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property changed.\n            </summary>\n            <remarks>\n             This event triggers when an item in a popup is selected or when the user changes the model value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfComboBox TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <ComboBoxEvents TValue=\"string\" TItem=\"string\" ValueChange=\"@OnChange\"/>\n            </SfComboBox>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args) {\n                    var NewValue = args.Value;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the dropdown popup is closed.\n            </summary>\n            <remarks>\n            Prevent the dropdown popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfComboBox TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <ComboBoxEvents TValue=\"string\" TItem=\"string\" OnClose=\"@OnCloseHandler\"/>\n            </SfComboBox>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnCloseHandler(PopupEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when custom values (not present in the data source) are selected in the ComboBox component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfComboBox TValue=\"int\" TItem=\"Countries\" DataSource=\"@CountryList\">\n               <ComboBoxEvents TValue=\"int\" TItem=\"Countries\" CustomValueSpecifier=\"@customValue\"></ComboBoxEvents>\n               <ComboBoxFieldSettings Text=\"Name\" Value=\"Code\"></ComboBoxFieldSettings>\n            </SfComboBox>\n            @code{\n                public class Countries {\n                    public string Name { get; set; }\n                    public int Code { get; set; }\n                }\n                private List<Countries> CountryList = new List<Countries>() {\n                    new Countries(){ Code= 101, Name= \"Australia\" },\n                    new Countries(){ Code= 102, Name= \"Canada\" }\n                 }\n                private void customValue(CustomValueSpecifierEventArgs<Countries> args) {\n                    args.Item = new Countries() { Code = 103, Name = args.Text };\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked on typing a character in the ComboBox.\n            </summary>\n            <remarks>\n            Prevent the default filter action and make your query enable the <see cref=\"P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.PreventDefaultAction\" /> event argument, and pass the modified data source and query in the <see cref=\"M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterAsync(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)\" /> method.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfComboBox @ref=\"ComboBoxObj\" TItem=\"string\" TValue=\"string\" AllowFiltering=\"true\" DataSource=\"@MyList\">\n                <ComboBoxEvents TValue=\"string\" TItem=\"string\" Filtering=\"@OnFilteringHandler\" />\n            </SfComboBox>\n            @code{\n                SfComboBox<string, string> ComboBoxObj { get; set; }\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(FilteringEventArgs args) {\n                    args.PreventDefaultAction = true;\n                    var query = new Query().Where(new WhereFilter() { Field = \"Text\", Operator = \"contains\", value = args.Text, IgnoreCase = true });\n                    await ComboBoxObj.FilterAsync(MyList, query);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the dropdown popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when an item is selected from the dropdown popup by the user either with a mouse tap or with a keyboard navigation.\n            </summary>\n            <remarks>\n            Prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfComboBox TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <ComboBoxEvents TValue=\"string\" TItem=\"string\" OnValueSelect=\"@OnSelectHandler\" />\n            </SfComboBox>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnSelectHandler(SelectEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1189244262,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Represents the Fields property mapping the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ComboBoxFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the field's name to group the ComboBox items.\n            </summary>\n            <value>\n            The name of the field to group.\n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the CSS class(es) for the icon displayed for each list item in the ComboBox popup.\n            </summary>\n            <value>\n            The CSS class(es) name for the icon.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the text displayed for each list item in the ComboBox popup.\n            </summary>\n            <value>\n            The column name used as the text displayed for each list item.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the value for each list item in the ComboBox popup\n            </summary>\n            <value>\n            The column name to map as the value for each list item.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxFieldSettings"}},{"HashCode":1016025941,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Represents the Fields property mapping the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the field's name to group the ComboBox items.\n            </summary>\n            <value>\n            The name of the field to group.\n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the CSS class(es) for the icon displayed for each list item in the ComboBox popup.\n            </summary>\n            <value>\n            The CSS class(es) name for the icon.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the text displayed for each list item in the ComboBox popup.\n            </summary>\n            <value>\n            The column name used as the text displayed for each list item.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the value for each list item in the ComboBox popup\n            </summary>\n            <value>\n            The column name to map as the value for each list item.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1988453633,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The ComboBox has been provided with several options to customize each list item, group title, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of ComboBoxTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.GenericTyped":"True"}},{"HashCode":1157960360,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The ComboBox has been provided with several options to customize each list item, group title, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of ComboBoxTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1357522530,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-787077836,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1909050073,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1627461575,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1285106108,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":51090845,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1258785142,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1979224545,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":526485738,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-37310484,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2039366935,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1998364074,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ComboBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":867963148,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n            </summary>\n            <typeparam name=\"TValue\">The type of value that will be selected or entered in the ComboBox.</typeparam>\n            <typeparam name=\"TItem\">The type of items that will be displayed in the ComboBox dropdown list.</typeparam>\n            <summary>\n            The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfComboBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AllowCustom","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the ComboBox allows custom values to be entered.\n            </summary>\n            <value>\n              <c>true</c> if custom values are allowed the user to enter a value that does not exist in the data source; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowCustom","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Autofill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the ComboBox automatically fills the input with the first matched item while typing.\n            </summary>\n            <value>\n            <c>true</c> if autofill is enabled; otherwise, <c>false</c>. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Autofill","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value indicating whether the ComboBox should display a clear button to clear the selected value.\n            </summary>\n            <value>\n            <c>true</c> if the clear button is visible; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n            <remarks>\n             When you click the clear button, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" />, and <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Index\" /> properties are reset to <c>null</c>. This allows users to easily clear the selected value and start fresh.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the ComboBox should perform validation when input is entered.\n            </summary>\n            <value>\n            <c>true</c> if input validation is enabled; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. \n            The <see cref=\"P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.ValueChange\" /> event will be fired after the component loses its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique identifier for <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only unique value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value in the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the filtering option is enabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering option is enabled and show the filter bar (search box) in the pop-up; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The filter action retrieves the matched items using the <see cref=\"P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Filtering\" /> event based on the characters typed in the search textbox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the drop-down list component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for dropdown list component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the Dropdown list component is enabled; otherwise, it is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the filter textbox has no text and removes the focus.\n            </summary>\n            <value>\n            The text that is displayed when the filter text box has no text. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            This property value is updated only when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AllowFiltering\" /> is enabled.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the dropdown list. The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the DropDownList component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the DropDownList component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" Placeholder=\"Select a value\" FloatLabelType=\"FloatLabelType.Auto\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the dropdown list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Select T-shirt size\" }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as disabled, value, and more that will be applied to the dropdown list input element.\n            </summary>\n            <value>\n            The value as dictionary collection. The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both the property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the dropdown list component.\n            </summary>\n            <value>\n            The index of the selected items in the list. The default value is <c>null</c> which indicates that nothing is selected.\n            </value>\n            <exception cref=\"T:System.ArgumentOutOfRangeException\">The index was set to less than -1, or greater than or equal to the number of items on the list at the time the list is rendered.</exception>\n            <remarks>\n            Use this property to determine the index of the currently selected item in the list if the dropdown list component allows only one selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the index changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32?>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the dropdown list has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the dropdown list has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list.\n            </summary>\n            <value>\n            The preferred height of the popup list in pixels or percentage of the dropdown list. The default value is <c>300px</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list. By default, the popup width sets based on the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the popup list in pixels or percentage of the dropdown list. The default value is <c>100%</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> is in read-only mode or not.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown list is in read-only mode; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            In read-only mode, the dropdown list popup can not be opened on click.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the virtual scrolling is enabled or not.\n            </summary>\n            <value>\n            <c>true</c> if the virtual scrolling for dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            To improve performance, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is set to <c>true</c>. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items to be fetched in the popup when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is enabled.\n            </summary>\n            <value>\n            The number of list items to be fetched in dropdown list component. The default value is <c>5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets the value of the selected item in the dropdown list component. This will be used with two-way binding.\n            </summary>\n            <value>\n            The value of the selected item in the dropdown list component. The default is <c>null</c>.\n            </value>\n            <remarks>\n            Use the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property to specify or determine the value displayed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that trigger when the value changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the dropdown list in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the location of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component in the tab order.\n            </summary>\n            <value>\n            The numeric index of the dropdown list in the tab order. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.GenericTyped":"True"}},{"HashCode":-551911301,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n            </summary>\n            <typeparam name=\"TValue\">The type of value that will be selected or entered in the ComboBox.</typeparam>\n            <typeparam name=\"TItem\">The type of items that will be displayed in the ComboBox dropdown list.</typeparam>\n            <summary>\n            The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AllowCustom","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the ComboBox allows custom values to be entered.\n            </summary>\n            <value>\n              <c>true</c> if custom values are allowed the user to enter a value that does not exist in the data source; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowCustom","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Autofill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the ComboBox automatically fills the input with the first matched item while typing.\n            </summary>\n            <value>\n            <c>true</c> if autofill is enabled; otherwise, <c>false</c>. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Autofill","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value indicating whether the ComboBox should display a clear button to clear the selected value.\n            </summary>\n            <value>\n            <c>true</c> if the clear button is visible; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n            <remarks>\n             When you click the clear button, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" />, and <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Index\" /> properties are reset to <c>null</c>. This allows users to easily clear the selected value and start fresh.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the ComboBox should perform validation when input is entered.\n            </summary>\n            <value>\n            <c>true</c> if input validation is enabled; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. \n            The <see cref=\"P:Syncfusion.Blazor.DropDowns.ComboBoxEvents`2.ValueChange\" /> event will be fired after the component loses its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique identifier for <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only unique value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value in the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the filtering option is enabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering option is enabled and show the filter bar (search box) in the pop-up; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The filter action retrieves the matched items using the <see cref=\"P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Filtering\" /> event based on the characters typed in the search textbox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the drop-down list component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for dropdown list component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the Dropdown list component is enabled; otherwise, it is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the filter textbox has no text and removes the focus.\n            </summary>\n            <value>\n            The text that is displayed when the filter text box has no text. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            This property value is updated only when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AllowFiltering\" /> is enabled.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the dropdown list. The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the DropDownList component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the DropDownList component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" Placeholder=\"Select a value\" FloatLabelType=\"FloatLabelType.Auto\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the dropdown list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Select T-shirt size\" }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as disabled, value, and more that will be applied to the dropdown list input element.\n            </summary>\n            <value>\n            The value as dictionary collection. The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both the property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the dropdown list component.\n            </summary>\n            <value>\n            The index of the selected items in the list. The default value is <c>null</c> which indicates that nothing is selected.\n            </value>\n            <exception cref=\"T:System.ArgumentOutOfRangeException\">The index was set to less than -1, or greater than or equal to the number of items on the list at the time the list is rendered.</exception>\n            <remarks>\n            Use this property to determine the index of the currently selected item in the list if the dropdown list component allows only one selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the index changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32?>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the dropdown list has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the dropdown list has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list.\n            </summary>\n            <value>\n            The preferred height of the popup list in pixels or percentage of the dropdown list. The default value is <c>300px</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list. By default, the popup width sets based on the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the popup list in pixels or percentage of the dropdown list. The default value is <c>100%</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> is in read-only mode or not.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown list is in read-only mode; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            In read-only mode, the dropdown list popup can not be opened on click.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the virtual scrolling is enabled or not.\n            </summary>\n            <value>\n            <c>true</c> if the virtual scrolling for dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            To improve performance, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is set to <c>true</c>. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items to be fetched in the popup when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is enabled.\n            </summary>\n            <value>\n            The number of list items to be fetched in dropdown list component. The default value is <c>5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets the value of the selected item in the dropdown list component. This will be used with two-way binding.\n            </summary>\n            <value>\n            The value of the selected item in the dropdown list component. The default is <c>null</c>.\n            </value>\n            <remarks>\n            Use the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property to specify or determine the value displayed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that trigger when the value changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the dropdown list in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the location of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component in the tab order.\n            </summary>\n            <value>\n            The numeric index of the dropdown list in the tab order. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1538744638,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":331332456,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1879896606,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":877476532,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":350588557,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1745180863,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2002488660,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-571542504,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-58480775,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1765990052,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1604952354,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1508872674,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1034085078,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1873578523,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1174732705,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1410562376,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-800137571,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Defines the SfDropDownList events of the component.\n            </summary>\n            <typeparam name=\"TValue\">A type which provides for the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> poperty type.</typeparam>\n            <typeparam name=\"TItem\">A type which provides data list schema for the dropdown list events.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownListEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before fetching data from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the evnet callback that will be invoked after data is fetched successfully from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data fetch request fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup before opens.\n            </summary>\n            <remarks>\n            You can prevent the dropdown popup open action using <see cref=\"P:Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnOpen=\"@OnOpenHandler\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpenHandler(BeforeOpenEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown list loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property changed.\n            </summary>\n            <remarks>\n            This event triggers when an item in a popup is selected or when the model value is changed by user.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" ValueChange=\"@OnChange\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args) {\n                    var DDLValue = args.Value;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the dropdown popup is close.\n            </summary>\n            <remarks>\n            You can prevent the dropdown popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnClose=\"@OnCloseHandler\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnCloseHandler(PopupEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked on typing a character in the filter textbox.\n            </summary>\n            <remarks>\n            You can prevent the default filter action and make your query enable the <see cref=\"P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.PreventDefaultAction\" /> event argument, and pass the modify data source and query in <see cref=\"M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterAsync(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)\" /> method.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList @ref=\"DDLObj\" TItem=\"string\" TValue=\"string\" AllowFiltering=\"true\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" Filtering=\"@OnFilteringHandler\" />\n            </SfDropDownList>\n            @code{\n                SfDropDownList<string, string> DDLObj { get; set; }\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(FilteringEventArgs args) {\n                    args.PreventDefaultAction = true;\n                    var query = new Query().Where(new WhereFilter() { Field = \"Text\", Operator = \"contains\", value = args.Text, IgnoreCase = true });\n                    await DDLObj.FilterAsync(MyList, query);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the dropdown popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be when an item is selected from the dropdown popup by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n            <remarks>\n            You can prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnValueSelect=\"@OnSelectHandler\" />\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnSelectHandler(SelectEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListEvents","Components.GenericTyped":"True"}},{"HashCode":1827361139,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Defines the SfDropDownList events of the component.\n            </summary>\n            <typeparam name=\"TValue\">A type which provides for the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> poperty type.</typeparam>\n            <typeparam name=\"TItem\">A type which provides data list schema for the dropdown list events.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.DropDownListEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before fetching data from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the evnet callback that will be invoked after data is fetched successfully from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data fetch request fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup before opens.\n            </summary>\n            <remarks>\n            You can prevent the dropdown popup open action using <see cref=\"P:Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnOpen=\"@OnOpenHandler\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpenHandler(BeforeOpenEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown list loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property changed.\n            </summary>\n            <remarks>\n            This event triggers when an item in a popup is selected or when the model value is changed by user.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" ValueChange=\"@OnChange\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args) {\n                    var DDLValue = args.Value;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the dropdown popup is close.\n            </summary>\n            <remarks>\n            You can prevent the dropdown popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnClose=\"@OnCloseHandler\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnCloseHandler(PopupEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked on typing a character in the filter textbox.\n            </summary>\n            <remarks>\n            You can prevent the default filter action and make your query enable the <see cref=\"P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.PreventDefaultAction\" /> event argument, and pass the modify data source and query in <see cref=\"M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterAsync(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)\" /> method.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList @ref=\"DDLObj\" TItem=\"string\" TValue=\"string\" AllowFiltering=\"true\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" Filtering=\"@OnFilteringHandler\" />\n            </SfDropDownList>\n            @code{\n                SfDropDownList<string, string> DDLObj { get; set; }\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(FilteringEventArgs args) {\n                    args.PreventDefaultAction = true;\n                    var query = new Query().Where(new WhereFilter() { Field = \"Text\", Operator = \"contains\", value = args.Text, IgnoreCase = true });\n                    await DDLObj.FilterAsync(MyList, query);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the dropdown popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be when an item is selected from the dropdown popup by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n            <remarks>\n            You can prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnValueSelect=\"@OnSelectHandler\" />\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnSelectHandler(SelectEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1823197029,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            A class that represents the Dropdown list fields to map with the data source and binds the data to the component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TValue=\"string\" TItem=\"Country\" Placeholder=\"Select a country\" DataSource=\"@Countries\">\n                <DropDownListFieldSettings Text=\"Name\" Value=\"Code\"/>\n            </SfDropDownList>\n            @code{\n                public class Country\n                {\n                    public string Name { get; set; }\n                    public string Code { get; set; }\n                }\n                List<Country> Countries = new List<Country> {\n                    new Country() { Name = \"Australia\", Code = \"AU\" },\n                    new Country() { Name = \"Bermuda\", Code = \"BM\" },\n                    new Country() { Name = \"Canada\", Code = \"CA\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownListFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets filed names to display the list in category-wise.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TValue=\"string\" TItem=\"Vegetables\" Placeholder=\"Select a country\" DataSource=\"@VegetablesList\">\n                <DropDownListFieldSettings Text=\"Name\" Value=\"ID\" GroupBy=\"Category\" />\n            </SfDropDownList>\n            @code{\n                public class Vegetables\n                {\n                    public string ID { get; set; }\n                    public string Name { get; set; }\n                    public string Category { get; set; }\n                }\n                List<Vegetables> VegetablesList = new List<Vegetables> {\n                    new Vegetables { Name = \"Cabbage\", Category = \"Leafy and Salad\", ID = \"item1\" },\n                    new Vegetables { Name = \"Chickpea\", Category = \"Beans\", ID = \"item2\" },\n                    new Vegetables { Name = \"Green bean\", Category = \"Beans\", ID = \"item4\" },\n                    new Vegetables { Name = \"Spinach\", Category = \"Leafy and Salad\", ID = \"item9\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, classes, and more that will be applied to the pop-up list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to include an icon or image for the dropdown list item. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for the dropdown list item. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that maps the text field from the data source model for each list item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            If not mapped, the text field in the drop-down list item show as an empty text for each list item.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value that maps the value field from the data source for each list item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            If not mapped the text filed in the dropdown list item show as empty popup.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListFieldSettings"}},{"HashCode":1947759050,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            A class that represents the Dropdown list fields to map with the data source and binds the data to the component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TValue=\"string\" TItem=\"Country\" Placeholder=\"Select a country\" DataSource=\"@Countries\">\n                <DropDownListFieldSettings Text=\"Name\" Value=\"Code\"/>\n            </SfDropDownList>\n            @code{\n                public class Country\n                {\n                    public string Name { get; set; }\n                    public string Code { get; set; }\n                }\n                List<Country> Countries = new List<Country> {\n                    new Country() { Name = \"Australia\", Code = \"AU\" },\n                    new Country() { Name = \"Bermuda\", Code = \"BM\" },\n                    new Country() { Name = \"Canada\", Code = \"CA\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets filed names to display the list in category-wise.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TValue=\"string\" TItem=\"Vegetables\" Placeholder=\"Select a country\" DataSource=\"@VegetablesList\">\n                <DropDownListFieldSettings Text=\"Name\" Value=\"ID\" GroupBy=\"Category\" />\n            </SfDropDownList>\n            @code{\n                public class Vegetables\n                {\n                    public string ID { get; set; }\n                    public string Name { get; set; }\n                    public string Category { get; set; }\n                }\n                List<Vegetables> VegetablesList = new List<Vegetables> {\n                    new Vegetables { Name = \"Cabbage\", Category = \"Leafy and Salad\", ID = \"item1\" },\n                    new Vegetables { Name = \"Chickpea\", Category = \"Beans\", ID = \"item2\" },\n                    new Vegetables { Name = \"Green bean\", Category = \"Beans\", ID = \"item4\" },\n                    new Vegetables { Name = \"Spinach\", Category = \"Leafy and Salad\", ID = \"item9\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, classes, and more that will be applied to the pop-up list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to include an icon or image for the dropdown list item. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for the dropdown list item. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that maps the text field from the data source model for each list item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            If not mapped, the text field in the drop-down list item show as an empty text for each list item.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value that maps the value field from the data source for each list item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            If not mapped the text filed in the dropdown list item show as empty popup.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1943115729,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownList has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of DropDownListTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.GenericTyped":"True"}},{"HashCode":1377971915,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownList has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of DropDownListTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1266472528,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2029917844,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1507869700,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":936482728,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-829036675,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":363688356,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-418299678,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1185772273,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1050213767,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":278302076,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-892521253,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":154643823,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":183074894,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1282445532,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"DropDownListTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-949856077,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownList component allows users to select a single value that is non-editable from a list of predefined values.\n            </summary>\n            <example>\n            In the following code example, a basic DropDownList component is initialized with simple list items.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n            <summary>\n            The DropDownList component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <summary>\n            The DropDownList component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfDropDownList.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique identifier for <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only unique value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value in the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the filtering option is enabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering option is enabled and show the filter bar (search box) in the pop-up; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The filter action retrieves the matched items using the <see cref=\"P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Filtering\" /> event based on the characters typed in the search textbox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the drop-down list component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for dropdown list component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the Dropdown list component is enabled; otherwise, it is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the filter textbox has no text and removes the focus.\n            </summary>\n            <value>\n            The text that is displayed when the filter text box has no text. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            This property value is updated only when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AllowFiltering\" /> is enabled.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the dropdown list. The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the DropDownList component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the DropDownList component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" Placeholder=\"Select a value\" FloatLabelType=\"FloatLabelType.Auto\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the dropdown list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Select T-shirt size\" }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as disabled, value, and more that will be applied to the dropdown list input element.\n            </summary>\n            <value>\n            The value as dictionary collection. The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both the property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the dropdown list component.\n            </summary>\n            <value>\n            The index of the selected items in the list. The default value is <c>null</c> which indicates that nothing is selected.\n            </value>\n            <exception cref=\"T:System.ArgumentOutOfRangeException\">The index was set to less than -1, or greater than or equal to the number of items on the list at the time the list is rendered.</exception>\n            <remarks>\n            Use this property to determine the index of the currently selected item in the list if the dropdown list component allows only one selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the index changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32?>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the dropdown list has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the dropdown list has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list.\n            </summary>\n            <value>\n            The preferred height of the popup list in pixels or percentage of the dropdown list. The default value is <c>300px</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list. By default, the popup width sets based on the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the popup list in pixels or percentage of the dropdown list. The default value is <c>100%</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> is in read-only mode or not.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown list is in read-only mode; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            In read-only mode, the dropdown list popup can not be opened on click.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether to show or hide the clear button in the dropdown list. It helps to clear the selected value of a dropdown list on user intraction.\n            </summary>\n            <value>\n            <c>true</c> if show the clear button in the dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            When the clear button is clicked, <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" />, and <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Index\" /> properties are reset to null.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the virtual scrolling is enabled or not.\n            </summary>\n            <value>\n            <c>true</c> if the virtual scrolling for dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            To improve performance, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is set to <c>true</c>. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items to be fetched in the popup when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is enabled.\n            </summary>\n            <value>\n            The number of list items to be fetched in dropdown list component. The default value is <c>5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets the value of the selected item in the dropdown list component. This will be used with two-way binding.\n            </summary>\n            <value>\n            The value of the selected item in the dropdown list component. The default is <c>null</c>.\n            </value>\n            <remarks>\n            Use the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property to specify or determine the value displayed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that trigger when the value changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the dropdown list in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the location of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component in the tab order.\n            </summary>\n            <value>\n            The numeric index of the dropdown list in the tab order. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.GenericTyped":"True"}},{"HashCode":-1029636896,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownList component allows users to select a single value that is non-editable from a list of predefined values.\n            </summary>\n            <example>\n            In the following code example, a basic DropDownList component is initialized with simple list items.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n            <summary>\n            The DropDownList component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <summary>\n            The DropDownList component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfDropDownList.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique identifier for <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only unique value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value in the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the filtering option is enabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering option is enabled and show the filter bar (search box) in the pop-up; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The filter action retrieves the matched items using the <see cref=\"P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Filtering\" /> event based on the characters typed in the search textbox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the drop-down list component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for dropdown list component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the Dropdown list component is enabled; otherwise, it is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the filter textbox has no text and removes the focus.\n            </summary>\n            <value>\n            The text that is displayed when the filter text box has no text. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            This property value is updated only when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AllowFiltering\" /> is enabled.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the dropdown list. The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the DropDownList component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the DropDownList component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" Placeholder=\"Select a value\" FloatLabelType=\"FloatLabelType.Auto\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the dropdown list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Select T-shirt size\" }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as disabled, value, and more that will be applied to the dropdown list input element.\n            </summary>\n            <value>\n            The value as dictionary collection. The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both the property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the dropdown list component.\n            </summary>\n            <value>\n            The index of the selected items in the list. The default value is <c>null</c> which indicates that nothing is selected.\n            </value>\n            <exception cref=\"T:System.ArgumentOutOfRangeException\">The index was set to less than -1, or greater than or equal to the number of items on the list at the time the list is rendered.</exception>\n            <remarks>\n            Use this property to determine the index of the currently selected item in the list if the dropdown list component allows only one selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Index","Common.GloballyQualifiedTypeName":"global::System.Int32?"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the index changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Int32?>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the dropdown list has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the dropdown list has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list.\n            </summary>\n            <value>\n            The preferred height of the popup list in pixels or percentage of the dropdown list. The default value is <c>300px</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list. By default, the popup width sets based on the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the popup list in pixels or percentage of the dropdown list. The default value is <c>100%</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> is in read-only mode or not.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown list is in read-only mode; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            In read-only mode, the dropdown list popup can not be opened on click.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether to show or hide the clear button in the dropdown list. It helps to clear the selected value of a dropdown list on user intraction.\n            </summary>\n            <value>\n            <c>true</c> if show the clear button in the dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            When the clear button is clicked, <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" />, and <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Index\" /> properties are reset to null.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the virtual scrolling is enabled or not.\n            </summary>\n            <value>\n            <c>true</c> if the virtual scrolling for dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            To improve performance, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is set to <c>true</c>. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items to be fetched in the popup when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is enabled.\n            </summary>\n            <value>\n            The number of list items to be fetched in dropdown list component. The default value is <c>5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets the value of the selected item in the dropdown list component. This will be used with two-way binding.\n            </summary>\n            <value>\n            The value of the selected item in the dropdown list component. The default is <c>null</c>.\n            </value>\n            <remarks>\n            Use the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property to specify or determine the value displayed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that trigger when the value changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the dropdown list in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the location of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component in the tab order.\n            </summary>\n            <value>\n            The numeric index of the dropdown list in the tab order. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":708840878,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-762217238,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1567417286,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-118887550,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1350388856,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2037522019,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1498276805,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":567595547,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1119348055,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-261193467,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2105166667,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1475360441,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1932378558,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1483291849,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2108247759,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-792162542,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2033555607,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies a collection of events that are associated with the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <typeparam name=\"TValue\">The type of the values that are used to identify items in the ListBox.</typeparam>\n            <typeparam name=\"TItem\">The type of the items in the ListBox.</typeparam>\n            <example>\n            The below code example, showcases a events.\n            <code><![CDATA[\n            <SfListBox @ref=\"ListBoxObj\" Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxEvents TValue=\"string[]\" Created=\"created\"></ListBoxEvents>\n            </SfListBox>\n            @code{\n                SfListBox<string[],ListItem> ListBoxObj;\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public string[] Value = new string[] { \"Bugatti Chiron\" };\n                private async Task created(object args)\n                {\n                     await ListBoxObj.SelectItemsAsync(Value, true);\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is triggered before fetching data from the remote server in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is triggered after fetching data from the remote server in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is triggered when the data fetch request from the remote server fails in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDrop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DropEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that occurs before dropping the item on another <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> item.\n            </summary>\n            <remarks>\n            This event will take into effect when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowDragAndDrop\" /> property is set to <c>true</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnDrop","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DropEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeItemRenderEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that occurs before rendering every items in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeItemRenderEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ListBoxChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event that occurs when the selected value of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ListBoxChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event that fires when the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event that fires when the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised before dragging the item in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <remarks>\n            This event will take into effect when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowDragAndDrop\" /> property is set to <c>true</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DragStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Dropped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DropEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event that is raised after dropping the item on another <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> item.\n            </summary>\n            <remarks>\n            This event will take into effect when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowDragAndDrop\" /> property is set to <c>true</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Dropped","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DropEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised whenever the user entering text to filter the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> items.\n            </summary>\n            <remarks>\n            This event will take into effect when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowFiltering\" /> property is set to <c>true</c>.\n            </remarks>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised whenever the user entering text to filter the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> items.\n            </summary>\n            <remarks>\n            This event will take into effect when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowFiltering\" /> property is set to <c>true</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ListBoxItemKeyDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ListBoxKeyDownEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event that is raised when performing keydown action in a list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBoxItemKeyDown","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ListBoxKeyDownEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxEvents","Components.GenericTyped":"True"}},{"HashCode":1285780363,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies a collection of events that are associated with the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <typeparam name=\"TValue\">The type of the values that are used to identify items in the ListBox.</typeparam>\n            <typeparam name=\"TItem\">The type of the items in the ListBox.</typeparam>\n            <example>\n            The below code example, showcases a events.\n            <code><![CDATA[\n            <SfListBox @ref=\"ListBoxObj\" Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxEvents TValue=\"string[]\" Created=\"created\"></ListBoxEvents>\n            </SfListBox>\n            @code{\n                SfListBox<string[],ListItem> ListBoxObj;\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public string[] Value = new string[] { \"Bugatti Chiron\" };\n                private async Task created(object args)\n                {\n                     await ListBoxObj.SelectItemsAsync(Value, true);\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is triggered before fetching data from the remote server in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is triggered after fetching data from the remote server in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is triggered when the data fetch request from the remote server fails in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDrop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DropEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that occurs before dropping the item on another <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> item.\n            </summary>\n            <remarks>\n            This event will take into effect when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowDragAndDrop\" /> property is set to <c>true</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnDrop","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DropEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeItemRenderEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that occurs before rendering every items in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeItemRenderEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ListBoxChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event that occurs when the selected value of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ListBoxChangeEventArgs<TValue, TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event that fires when the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event that fires when the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised before dragging the item in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <remarks>\n            This event will take into effect when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowDragAndDrop\" /> property is set to <c>true</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DragStart","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Dropped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DropEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event that is raised after dropping the item on another <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> item.\n            </summary>\n            <remarks>\n            This event will take into effect when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowDragAndDrop\" /> property is set to <c>true</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Dropped","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DropEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised whenever the user entering text to filter the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> items.\n            </summary>\n            <remarks>\n            This event will take into effect when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowFiltering\" /> property is set to <c>true</c>.\n            </remarks>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised whenever the user entering text to filter the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> items.\n            </summary>\n            <remarks>\n            This event will take into effect when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowFiltering\" /> property is set to <c>true</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ListBoxItemKeyDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ListBoxKeyDownEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event that is raised when performing keydown action in a list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBoxItemKeyDown","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ListBoxKeyDownEventArgs>","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":11282943,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the fields settings such as IconCss, GroupBy, Text, and Value in a ListBox.\n            </summary>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component with fiels settings option.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the field used to group the items in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component with grouping.\n            <code><![CDATA[\n            @using Syncfusion.Blazor.DropDowns\n            <SfListBox TValue=\"string[]\" DataSource=\"@VegetableData\" TItem=\"VegetableDetail\">\n                 <ListBoxFieldSettings GroupBy = \"Category\" Text=\"Vegetable\" Value=\"Id\" />\n            </SfListBox>\n            @code {\n                public List<VegetableDetail> VegetableData = new List<VegetableDetail> {\n                   new VegetableDetail{ Vegetable = \"Cabbage\", Category = \"Leafy and Salad\", Id = \"item1\" },\n                   new VegetableDetail{ Vegetable = \"Spinach\", Category = \"Leafy and Salad\", Id = \"item2\" },\n                   new VegetableDetail{ Vegetable = \"Chickpea\", Category = \"Beans\", Id = \"item6\" },\n                   new VegetableDetail{ Vegetable = \"Green bean\", Category = \"Beans\", Id = \"item7\" },\n                   new VegetableDetail{ Vegetable = \"Garlic\", Category = \"Bulb and Stem\", Id = \"item9\" },\n                   new VegetableDetail{ Vegetable = \"Nopal\", Category = \"Bulb and Stem\", Id = \"item10\" }\n                };\n                public class VegetableDetail {\n                    public string Vegetable { get; set; }\n                    public string Category { get; set; }\n                    public string Id { get; set; }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the additional attributes to be applied to the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> container element.\n            </summary>\n            <value>\n            A collection of attributes to be added to the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> container element.\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying the <c>@attributes</c> directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a CSS class string to include an icon or image for each list item in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for each list item. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a text for mapping column from data table for each list item in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a value for mapping column from data table for each list item in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxFieldSettings"}},{"HashCode":-863334232,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the fields settings such as IconCss, GroupBy, Text, and Value in a ListBox.\n            </summary>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component with fiels settings option.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the field used to group the items in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component with grouping.\n            <code><![CDATA[\n            @using Syncfusion.Blazor.DropDowns\n            <SfListBox TValue=\"string[]\" DataSource=\"@VegetableData\" TItem=\"VegetableDetail\">\n                 <ListBoxFieldSettings GroupBy = \"Category\" Text=\"Vegetable\" Value=\"Id\" />\n            </SfListBox>\n            @code {\n                public List<VegetableDetail> VegetableData = new List<VegetableDetail> {\n                   new VegetableDetail{ Vegetable = \"Cabbage\", Category = \"Leafy and Salad\", Id = \"item1\" },\n                   new VegetableDetail{ Vegetable = \"Spinach\", Category = \"Leafy and Salad\", Id = \"item2\" },\n                   new VegetableDetail{ Vegetable = \"Chickpea\", Category = \"Beans\", Id = \"item6\" },\n                   new VegetableDetail{ Vegetable = \"Green bean\", Category = \"Beans\", Id = \"item7\" },\n                   new VegetableDetail{ Vegetable = \"Garlic\", Category = \"Bulb and Stem\", Id = \"item9\" },\n                   new VegetableDetail{ Vegetable = \"Nopal\", Category = \"Bulb and Stem\", Id = \"item10\" }\n                };\n                public class VegetableDetail {\n                    public string Vegetable { get; set; }\n                    public string Category { get; set; }\n                    public string Id { get; set; }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the additional attributes to be applied to the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> container element.\n            </summary>\n            <value>\n            A collection of attributes to be added to the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> container element.\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying the <c>@attributes</c> directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a CSS class string to include an icon or image for each list item in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for each list item. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a text for mapping column from data table for each list item in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a value for mapping column from data table for each list item in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1719744519,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the selection settings such as <c>CheckboxPosition</c>, <c>Mode</c>, <c>ShowCheckBox</c>, and <c>ShowSelectAll</c> in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component with selection settings option.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxSelectionSettings Mode=\"Syncfusion.Blazor.DropDowns.SelectionMode.Single\"></ListBoxSelectionSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxSelectionSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CheckboxPosition","TypeName":"Syncfusion.Blazor.DropDowns.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the position of a checkbox in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.CheckBoxPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value>\n            <remarks>\n            If the <c>CheckBoxPosition</c> is <c>Left</c>, the checkbox will be placed left to the content of the list item.\n            If the <c>CheckBoxPosition</c> is <c>Right</c>, the checkbox will be placed right to the content of the list item.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"CheckboxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.CheckBoxPosition"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.DropDowns.SelectionMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the mode of selection in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SelectionMode\" /> enumeration. The default value is <c>Multiple</c>.\n            </value>\n            <remarks>\n            If the <c>SelectionMode</c> is <c>Single</c>, allows single selection.\n            If the <c>SelectionMode</c> is <c>Multiple</c>, alloes multiple selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SelectionMode"}},{"Kind":"Components.Component","Name":"ShowCheckbox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the checkbox selection in <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            <c>true</c>, if the checkbox selection is enabled for <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCheckbox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the select all option in <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            <c>true</c>, if the select all checkbox option is enabled for <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property will take into effect once the <c>ShowCheckBox</c> property is <c>true</c>. \n            </remarks>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component with selection settings option.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxSelectionSettings ShowCheckBox=\"true\" ShowSelectAll=\"true\"></ListBoxSelectionSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ShowSelectAll","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxSelectionSettings"}},{"HashCode":613238182,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the selection settings such as <c>CheckboxPosition</c>, <c>Mode</c>, <c>ShowCheckBox</c>, and <c>ShowSelectAll</c> in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component with selection settings option.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxSelectionSettings Mode=\"Syncfusion.Blazor.DropDowns.SelectionMode.Single\"></ListBoxSelectionSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CheckboxPosition","TypeName":"Syncfusion.Blazor.DropDowns.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the position of a checkbox in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.CheckBoxPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value>\n            <remarks>\n            If the <c>CheckBoxPosition</c> is <c>Left</c>, the checkbox will be placed left to the content of the list item.\n            If the <c>CheckBoxPosition</c> is <c>Right</c>, the checkbox will be placed right to the content of the list item.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"CheckboxPosition","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.CheckBoxPosition"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.DropDowns.SelectionMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the mode of selection in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SelectionMode\" /> enumeration. The default value is <c>Multiple</c>.\n            </value>\n            <remarks>\n            If the <c>SelectionMode</c> is <c>Single</c>, allows single selection.\n            If the <c>SelectionMode</c> is <c>Multiple</c>, alloes multiple selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SelectionMode"}},{"Kind":"Components.Component","Name":"ShowCheckbox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the checkbox selection in <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            <c>true</c>, if the checkbox selection is enabled for <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCheckbox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the select all option in <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            <c>true</c>, if the select all checkbox option is enabled for <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property will take into effect once the <c>ShowCheckBox</c> property is <c>true</c>. \n            </remarks>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component with selection settings option.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxSelectionSettings ShowCheckBox=\"true\" ShowSelectAll=\"true\"></ListBoxSelectionSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ShowSelectAll","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxSelectionSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1495605849,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies templates like <c>ItemTemplate</c> and <c>NoRecordsTemplate</c> for list items in the listbox.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template used for the visual representation of each item in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <example>\n            The below code example, showcases a item template in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxTemplates TItem=\"ListItem\">\n                    <ItemTemplate>\n                        <div class=\"list-wrapper\">\n                           <span class=\"text\">@((context as ListItem).Text)</span>\n                       </div>\n                   </ItemTemplate>\n               </ListBoxTemplates>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template used for the visual representation of the No Record Found element in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <example>\n            The below code example, showcases a no record template in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxTemplates TItem=\"ListItem\">\n                    <NoRecordsTemplate>\n                        <div class=\"no-rec-template\">\n                           <span class=\"text\">No Records Found</span>\n                       </div>\n                   </NoRecordsTemplate>\n               </ListBoxTemplates>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxTemplates","Components.GenericTyped":"True"}},{"HashCode":-1377041011,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies templates like <c>ItemTemplate</c> and <c>NoRecordsTemplate</c> for list items in the listbox.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template used for the visual representation of each item in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <example>\n            The below code example, showcases a item template in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxTemplates TItem=\"ListItem\">\n                    <ItemTemplate>\n                        <div class=\"list-wrapper\">\n                           <span class=\"text\">@((context as ListItem).Text)</span>\n                       </div>\n                   </ItemTemplate>\n               </ListBoxTemplates>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template used for the visual representation of the No Record Found element in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <example>\n            The below code example, showcases a no record template in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxTemplates TItem=\"ListItem\">\n                    <NoRecordsTemplate>\n                        <div class=\"no-rec-template\">\n                           <span class=\"text\">No Records Found</span>\n                       </div>\n                   </NoRecordsTemplate>\n               </ListBoxTemplates>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":309846553,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template used for the visual representation of each item in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <example>\n            The below code example, showcases a item template in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxTemplates TItem=\"ListItem\">\n                    <ItemTemplate>\n                        <div class=\"list-wrapper\">\n                           <span class=\"text\">@((context as ListItem).Text)</span>\n                       </div>\n                   </ItemTemplate>\n               </ListBoxTemplates>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"ListBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":77618259,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template used for the visual representation of each item in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <example>\n            The below code example, showcases a item template in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxTemplates TItem=\"ListItem\">\n                    <ItemTemplate>\n                        <div class=\"list-wrapper\">\n                           <span class=\"text\">@((context as ListItem).Text)</span>\n                       </div>\n                   </ItemTemplate>\n               </ListBoxTemplates>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ListBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":918942899,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template used for the visual representation of the No Record Found element in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <example>\n            The below code example, showcases a no record template in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxTemplates TItem=\"ListItem\">\n                    <NoRecordsTemplate>\n                        <div class=\"no-rec-template\">\n                           <span class=\"text\">No Records Found</span>\n                       </div>\n                   </NoRecordsTemplate>\n               </ListBoxTemplates>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"ListBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2031524528,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template used for the visual representation of the No Record Found element in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <example>\n            The below code example, showcases a no record template in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxTemplates TItem=\"ListItem\">\n                    <NoRecordsTemplate>\n                        <div class=\"no-rec-template\">\n                           <span class=\"text\">No Records Found</span>\n                       </div>\n                   </NoRecordsTemplate>\n               </ListBoxTemplates>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ListBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":500843155,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the toolbar settings like toolbar items and the toolbar position in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxToolbarSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Items","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the list of toolbar items used for moving items in a same <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> or different <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            The predefined tools are 'MoveUp', 'MoveDown', 'MoveTo', 'MoveFrom', 'MoveAllTo', and 'MoveAllFrom'.\n            </value>\n            <remarks>\n            The options such as 'MoveTo', 'MoveFrom', 'MoveAllTo', and 'MoveAllFrom' are only used to transfer items between different <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </remarks>\n            <example>\n            The below code example, showcases a toolbar options in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxToolbarSettings Items=\"@items\"></ListBoxToolbarSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private string[] items = new string[] { \"MoveUp\", \"MoveDown\" };\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.DropDowns.ToolBarPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the position of toolbar in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.ToolBarPosition\" /> enumeration. The default value is <c>Right</c>.\n            </value>\n            <remarks>\n            If the <c>ToolBarPosition</c> is <c>Left</c>, the toolbar will be positioned to the left of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            If the <c>ToolBarPosition</c> is <c>Right</c>, the toolbar will be positioned to the right of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.ToolBarPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxToolbarSettings"}},{"HashCode":2087068715,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the toolbar settings like toolbar items and the toolbar position in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Items","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the list of toolbar items used for moving items in a same <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> or different <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            The predefined tools are 'MoveUp', 'MoveDown', 'MoveTo', 'MoveFrom', 'MoveAllTo', and 'MoveAllFrom'.\n            </value>\n            <remarks>\n            The options such as 'MoveTo', 'MoveFrom', 'MoveAllTo', and 'MoveAllFrom' are only used to transfer items between different <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </remarks>\n            <example>\n            The below code example, showcases a toolbar options in a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxToolbarSettings Items=\"@items\"></ListBoxToolbarSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private string[] items = new string[] { \"MoveUp\", \"MoveDown\" };\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Items","Common.GloballyQualifiedTypeName":"global::System.String[]"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.DropDowns.ToolBarPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the position of toolbar in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.ToolBarPosition\" /> enumeration. The default value is <c>Right</c>.\n            </value>\n            <remarks>\n            If the <c>ToolBarPosition</c> is <c>Left</c>, the toolbar will be positioned to the left of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            If the <c>ToolBarPosition</c> is <c>Right</c>, the toolbar will be positioned to the right of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.ToolBarPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"ListBoxToolbarSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1630852790,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The ListBox component displays a list of items and allows users to select one or more items using a checkbox or keyboard selection.\n            It includes features such as sorting, grouping, reordering, and drag-and-drop functionality for items.\n            </summary>\n            <typeparam name=\"TValue\">The type of the value returned by the selected item.</typeparam>\n            <typeparam name=\"TItem\">The type of the items in the ListBox.</typeparam>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem>vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            The ListBox component displays a list of items and allows users to select one or more items using a checkbox or keyboard selection.\n            It includes features such as sorting, grouping, reordering, and drag-and-drop functionality for items.\n            </summary>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            The ListBox component displays a list of items and allows users to select one or more items using a checkbox or keyboard selection.\n            It includes features such as sorting, grouping, reordering, and drag-and-drop functionality for items.\n            </summary>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            The ListBox component displays a list of items and allows users to select one or more items using a checkbox or keyboard selection.\n            It includes features such as sorting, grouping, reordering, and drag-and-drop functionality for items.\n            </summary>\n            <example>\n            The below code example, showcases a basic <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            The ListBox component displays a list of items and allows users to select one or more items using a checkbox or keyboard selection.\n            It includes features such as sorting, grouping, reordering, and drag-and-drop functionality for items.\n            </summary>\n            <example>\n            The below code example, showcases a ListBox component.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem>vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfListBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the child content for the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> including HTML element.\n            If the child content is not specified, <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> is rendered using <c>DataSource</c> property.\n            </summary>\n            <value>\n            The RenderFragment content. The default value is <c>null</c>.\n            </value>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets a lambda expression that identifies the bound value of <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.Value\" /> property.\n            </summary>\n            <value>\n            The lambda expression that identifies the value bound to the <c>Value</c> property.\n            </value>\n            <remarks>\n            By using this property and the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.ValueChanged\" /> event, two-way binding can be achieved instead of using @bind-Value.\n            </remarks>\n            <example>\n            The below code example, showcases a basic <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox ValueExpression=\"@(() => value )\" ValueChanged=\"@((string[] v) => value = v)\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether drag-and-drop functionality is allowed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            <c>true</c> if drag-and-drop functionality is allowed; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.Scope\" /> property is used to perform drag and drop between different <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowDragAndDrop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether filtering is allowed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            <c>true</c> if filtering is allowed; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.FilterBarPlaceholder\" /> property is used to show placeholder on the filter bar.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the class/multiple classes separated by a space for the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component. \n            </summary>\n            <value>\n            The CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. The default value is an empty string.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the control should display in Right-to-Left (RTL) direction.\n            </summary>\n            <value>\n            <c>true</c> if the control should display in RTL direction; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> is enabled to interact with it.\n            </summary>\n            <value>\n            <c>true</c> if the control is enabled; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the component's state should be persisted across postbacks.\n            </summary>\n            <value>\n            <c>true</c> if the component's state should be persisted; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.Value\" /> property is used to persist the component's state.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the placeholder text for the filter bar in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            The string value that represents the placeholder text for the filter bar in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. The default value is an empty string.\n            </value>\n            <remarks>\n            This property will take into effect once the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowFiltering\" /> property is <c>true</c>.\n            </remarks>\n            <example>\n            The below code example, showcases a filter bar place holder support in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" AllowFiltering=\"True\" FilterBarPlaceHolder=\"Enter a string to filter\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the height of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            A string value that represents the height of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. The default value is \"\".\n            If the value is not specified, then the height will be calculated based on the entire list item's height.\n            </value>\n            <remarks>\n            To add the suffix 'px' to the value if the height is fixed, for instance, '200px'.\n            To add the suffix '%' to the value if the height is responsive, for instance, '200%'.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MaximumSelectionLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the maximum length of items that can be selected in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            An integer value that represents the maximum selection length. The default value is <c>500</c>.\n            </value>\n            <remarks>\n            Based on the limitation, list selection will be prevented.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MaximumSelectionLength","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Scope","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the scope of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            A string value that represents the scope of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </value>\n            <remarks>\n            The drag and drop operation and the toolbar interactions performed based on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.Scope\" /> value.\n            The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowDragAndDrop\" /> and <see cref=\"T:Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings\" /> is used to enable drag and drop as well as toolbar interactions in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </remarks>\n            <example>\n            The below code example, showcases drag and drop support with scope property in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Scope=\"@scope\" AllowDragAndDrop=\"true\" DataSource=\"@vehicleData1\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxToolbarSettings Items=\"@items\"></ListBoxToolbarSettings>\n            </SfListBox>\n            <SfListBox Scope=\"@scope\" AllowDragAndDrop=\"true\" DataSource=\"@vehicleData2\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string scope= \"combined-list\";\n                private string[] items = new string[] { \"MoveUp\", \"MoveDown\", \"MoveTo\", \"MoveFrom\", \"MoveAllTo\", \"MoveAllFrom\" };\n                private List<ListItem> vehicleData1 = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                private List<ListItem> vehicleData2 = new List<ListItem>{\n                    new ListItem { Text = \"SSC Ultimate Aero\", ID = \"List-04\" },\n                    new ListItem { Text = \"Koenigsegg CCR\", ID = \"List-05\" },\n                    new ListItem { Text = \"McLaren F1\", ID = \"List-06\" }\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Scope","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the selected items in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            An event callback that is triggered when the value of the component changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            By using this event and the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.ValueExpression\" /> property, two-way binding can be achieved instead of using @bind-Value.\n            </remarks>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox ValueExpression=\"@(() => value )\" ValueChanged=\"@((string[] v) => value = v)\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional attributes to be applied to the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> container element.\n            </summary>\n            <value>\n            A collection of attributes to be added to the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> container element.\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying the <c>@attributes</c> directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.GenericTyped":"True"}},{"HashCode":-1787922322,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The ListBox component displays a list of items and allows users to select one or more items using a checkbox or keyboard selection.\n            It includes features such as sorting, grouping, reordering, and drag-and-drop functionality for items.\n            </summary>\n            <typeparam name=\"TValue\">The type of the value returned by the selected item.</typeparam>\n            <typeparam name=\"TItem\">The type of the items in the ListBox.</typeparam>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem>vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            The ListBox component displays a list of items and allows users to select one or more items using a checkbox or keyboard selection.\n            It includes features such as sorting, grouping, reordering, and drag-and-drop functionality for items.\n            </summary>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            The ListBox component displays a list of items and allows users to select one or more items using a checkbox or keyboard selection.\n            It includes features such as sorting, grouping, reordering, and drag-and-drop functionality for items.\n            </summary>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            The ListBox component displays a list of items and allows users to select one or more items using a checkbox or keyboard selection.\n            It includes features such as sorting, grouping, reordering, and drag-and-drop functionality for items.\n            </summary>\n            <example>\n            The below code example, showcases a basic <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            The ListBox component displays a list of items and allows users to select one or more items using a checkbox or keyboard selection.\n            It includes features such as sorting, grouping, reordering, and drag-and-drop functionality for items.\n            </summary>\n            <example>\n            The below code example, showcases a ListBox component.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem>vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfListBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the child content for the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> including HTML element.\n            If the child content is not specified, <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> is rendered using <c>DataSource</c> property.\n            </summary>\n            <value>\n            The RenderFragment content. The default value is <c>null</c>.\n            </value>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets a lambda expression that identifies the bound value of <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.Value\" /> property.\n            </summary>\n            <value>\n            The lambda expression that identifies the value bound to the <c>Value</c> property.\n            </value>\n            <remarks>\n            By using this property and the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.ValueChanged\" /> event, two-way binding can be achieved instead of using @bind-Value.\n            </remarks>\n            <example>\n            The below code example, showcases a basic <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox ValueExpression=\"@(() => value )\" ValueChanged=\"@((string[] v) => value = v)\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether drag-and-drop functionality is allowed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            <c>true</c> if drag-and-drop functionality is allowed; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.Scope\" /> property is used to perform drag and drop between different <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowDragAndDrop","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether filtering is allowed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            <c>true</c> if filtering is allowed; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.FilterBarPlaceholder\" /> property is used to show placeholder on the filter bar.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the class/multiple classes separated by a space for the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> component. \n            </summary>\n            <value>\n            The CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. The default value is an empty string.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the control should display in Right-to-Left (RTL) direction.\n            </summary>\n            <value>\n            <c>true</c> if the control should display in RTL direction; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> is enabled to interact with it.\n            </summary>\n            <value>\n            <c>true</c> if the control is enabled; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the component's state should be persisted across postbacks.\n            </summary>\n            <value>\n            <c>true</c> if the component's state should be persisted; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.Value\" /> property is used to persist the component's state.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the placeholder text for the filter bar in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            The string value that represents the placeholder text for the filter bar in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. The default value is an empty string.\n            </value>\n            <remarks>\n            This property will take into effect once the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowFiltering\" /> property is <c>true</c>.\n            </remarks>\n            <example>\n            The below code example, showcases a filter bar place holder support in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Value=\"@value\" DataSource=\"@vehicleData\" AllowFiltering=\"True\" FilterBarPlaceHolder=\"Enter a string to filter\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the height of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            A string value that represents the height of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />. The default value is \"\".\n            If the value is not specified, then the height will be calculated based on the entire list item's height.\n            </value>\n            <remarks>\n            To add the suffix 'px' to the value if the height is fixed, for instance, '200px'.\n            To add the suffix '%' to the value if the height is responsive, for instance, '200%'.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Height","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MaximumSelectionLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the maximum length of items that can be selected in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            An integer value that represents the maximum selection length. The default value is <c>500</c>.\n            </value>\n            <remarks>\n            Based on the limitation, list selection will be prevented.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MaximumSelectionLength","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Scope","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the scope of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n            <value>\n            A string value that represents the scope of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </value>\n            <remarks>\n            The drag and drop operation and the toolbar interactions performed based on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.Scope\" /> value.\n            The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.AllowDragAndDrop\" /> and <see cref=\"T:Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings\" /> is used to enable drag and drop as well as toolbar interactions in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </remarks>\n            <example>\n            The below code example, showcases drag and drop support with scope property in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox Scope=\"@scope\" AllowDragAndDrop=\"true\" DataSource=\"@vehicleData1\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n                <ListBoxToolbarSettings Items=\"@items\"></ListBoxToolbarSettings>\n            </SfListBox>\n            <SfListBox Scope=\"@scope\" AllowDragAndDrop=\"true\" DataSource=\"@vehicleData2\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string scope= \"combined-list\";\n                private string[] items = new string[] { \"MoveUp\", \"MoveDown\", \"MoveTo\", \"MoveFrom\", \"MoveAllTo\", \"MoveAllFrom\" };\n                private List<ListItem> vehicleData1 = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                private List<ListItem> vehicleData2 = new List<ListItem>{\n                    new ListItem { Text = \"SSC Ultimate Aero\", ID = \"List-04\" },\n                    new ListItem { Text = \"Koenigsegg CCR\", ID = \"List-05\" },\n                    new ListItem { Text = \"McLaren F1\", ID = \"List-06\" }\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Scope","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the selected items in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            An event callback that is triggered when the value of the component changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            By using this event and the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfListBox`2.ValueExpression\" /> property, two-way binding can be achieved instead of using @bind-Value.\n            </remarks>\n            <example>\n            The below code example, showcases a <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" />.\n            <code><![CDATA[\n            <SfListBox ValueExpression=\"@(() => value )\" ValueChanged=\"@((string[] v) => value = v)\" DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"ID\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                private string[] value= new string[] { \"List-01\"};\n                private List<ListItem> vehicleData = new List<ListItem>{\n                    new ListItem { Text = \"Hennessey Venom\", ID = \"List-01\"},\n                    new ListItem { Text = \"Bugatti Chiron\", ID = \"List-02\"},\n                    new ListItem { Text = \"Bugatti Veyron Super Sport\", ID = \"List-03\"}\n                }\n                public class ListItem\n                {\n                    public string Text { get; set; }\n                    public string ID { get; set; }\n                 }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional attributes to be applied to the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> container element.\n            </summary>\n            <value>\n            A collection of attributes to be added to the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> container element.\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying the <c>@attributes</c> directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2024734324,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the child content for the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> including HTML element.\n            If the child content is not specified, <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> is rendered using <c>DataSource</c> property.\n            </summary>\n            <value>\n            The RenderFragment content. The default value is <c>null</c>.\n            </value>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1414566558,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the child content for the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> including HTML element.\n            If the child content is not specified, <see cref=\"T:Syncfusion.Blazor.DropDowns.SfListBox`2\" /> is rendered using <c>DataSource</c> property.\n            </summary>\n            <value>\n            The RenderFragment content. The default value is <c>null</c>.\n            </value>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":355657022,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfListBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1241545495,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1666546495,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfListBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":402545435,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1222047510,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":800179427,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2085553364,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-95722049,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":824372478,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MentionFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The <c>MentionFieldSettings</c> class is a configuration class that is used to specify which fields in a data source should be used for different aspects of a mention list,\n            For example, you can use this class to specify which fields in a data source should be used for the text and value of each item in the mention list, as well as an optional field for grouping items.\n            </summary>\n            <remarks>\n            This allows the mention list to be populated with data from the specified data source, making it easier for users to select items from the list. \n            This can be useful in scenarios where users need to select items from a large or complex data set, such as selecting names from a list of contacts or selecting products from a catalog.\n            </remarks>\n            <example> \n            In this example, the <c>MentionFieldSettings</c> class is used to specify that the <c>Text</c> and <c>ID</c> fields in the data source should be used for the text and value of each item in the mention list, respectively. \n            <code><![CDATA[ \n            <SfMention TItem=\"Games\" DataSource=\"@GamesData\">\n              <ChildContent>\n                <MentionFieldSettings Value=\"ID\" Text=\"Text\"/>\n              </ChildContent>\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention>\n            @code{\n               public class Games\n               {  \n                   public string ID { get; set; }\n                   public string Text { get; set; }\n               }\n               \n               List<Games> GamesData = new List<Games> {\n                   new Games() { ID= \"Game1\", Text= \"American Football\" },\n                   new Games() { ID= \"Game2\", Text= \"Badminton\" },\n                   new Games() { ID= \"Game3\", Text= \"Basketball\" },\n                   new Games() { ID= \"Game4\", Text= \"Cricket\" },\n                   new Games() { ID= \"Game5\", Text= \"Football\" },\n                   new Games() { ID= \"Game6\", Text= \"Golf\" }\n                 };\n            }\n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MentionFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a field in the data source that should be used for grouping items in the mention list.\n            </summary>\n            <value>\n            A field in the data source that should be used for grouping items in the mention list.\n            The default value is <c>string.Empty</c>. \n            This is optional and does not have to be specified if you do not want to group items in the mention list. \n            If you do not specify a <c>GroupBy</c>, all items in the mention list will be displayed in a single, ungrouped list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class which is used to specify the field in the data source that contains the CSS class name for the icon that should be displayed for each item in the mention list.\n            </summary>\n            <value>\n            A field in data source that contains the CSS class name for the icon that should be displayed for each item in the mention list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a field that is used to specify the field in a data source that should be used as the display text for each item in the mention list.\n            </summary>\n            <value>\n            A field that is used to specify the field in a data source that should be used as the display text for each item in the mention list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a field that is used to specify the field in a data source that should be used as the value for each item in the mention list.\n            </summary>\n            <value>\n            A field that is used to specify the field in a data source that should be used as the value for each item in the mention list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MentionFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MentionFieldSettings"}},{"HashCode":-966966461,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MentionFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The <c>MentionFieldSettings</c> class is a configuration class that is used to specify which fields in a data source should be used for different aspects of a mention list,\n            For example, you can use this class to specify which fields in a data source should be used for the text and value of each item in the mention list, as well as an optional field for grouping items.\n            </summary>\n            <remarks>\n            This allows the mention list to be populated with data from the specified data source, making it easier for users to select items from the list. \n            This can be useful in scenarios where users need to select items from a large or complex data set, such as selecting names from a list of contacts or selecting products from a catalog.\n            </remarks>\n            <example> \n            In this example, the <c>MentionFieldSettings</c> class is used to specify that the <c>Text</c> and <c>ID</c> fields in the data source should be used for the text and value of each item in the mention list, respectively. \n            <code><![CDATA[ \n            <SfMention TItem=\"Games\" DataSource=\"@GamesData\">\n              <ChildContent>\n                <MentionFieldSettings Value=\"ID\" Text=\"Text\"/>\n              </ChildContent>\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention>\n            @code{\n               public class Games\n               {  \n                   public string ID { get; set; }\n                   public string Text { get; set; }\n               }\n               \n               List<Games> GamesData = new List<Games> {\n                   new Games() { ID= \"Game1\", Text= \"American Football\" },\n                   new Games() { ID= \"Game2\", Text= \"Badminton\" },\n                   new Games() { ID= \"Game3\", Text= \"Basketball\" },\n                   new Games() { ID= \"Game4\", Text= \"Cricket\" },\n                   new Games() { ID= \"Game5\", Text= \"Football\" },\n                   new Games() { ID= \"Game6\", Text= \"Golf\" }\n                 };\n            }\n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.MentionFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a field in the data source that should be used for grouping items in the mention list.\n            </summary>\n            <value>\n            A field in the data source that should be used for grouping items in the mention list.\n            The default value is <c>string.Empty</c>. \n            This is optional and does not have to be specified if you do not want to group items in the mention list. \n            If you do not specify a <c>GroupBy</c>, all items in the mention list will be displayed in a single, ungrouped list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class which is used to specify the field in the data source that contains the CSS class name for the icon that should be displayed for each item in the mention list.\n            </summary>\n            <value>\n            A field in data source that contains the CSS class name for the icon that should be displayed for each item in the mention list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a field that is used to specify the field in a data source that should be used as the display text for each item in the mention list.\n            </summary>\n            <value>\n            A field that is used to specify the field in a data source that should be used as the display text for each item in the mention list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a field that is used to specify the field in a data source that should be used as the value for each item in the mention list.\n            </summary>\n            <value>\n            A field that is used to specify the field in a data source that should be used as the value for each item in the mention list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MentionFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MentionFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1560831731,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component displays a list of suggested items from which users can select or tag one.\n            Enter the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.MentionChar\" /> in the editable element and tag the any item from the suggestion list.\n            </summary>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"Games\" DataSource=\"@GamesData\">\n              <ChildContent>\n                <MentionFieldSettings Value=\"ID\" Text=\"Text\"></MentionFieldSettings>\n              </ChildContent>\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention>\n            @code{\n               public class Games\n                 {  \n                   public string ID { get; set; }\n                   public string Text { get; set; }\n               }\n               List<Games> GamesData = new List<Games> {\n                   new Games() { ID= \"Game1\", Text= \"American Football\" },\n                   new Games() { ID= \"Game2\", Text= \"Badminton\" },\n                   new Games() { ID= \"Game3\", Text= \"Basketball\" },\n                   new Games() { ID= \"Game4\", Text= \"Cricket\" },\n                   new Games() { ID= \"Game5\", Text= \"Football\" },\n                   new Games() { ID= \"Game6\", Text= \"Golf\" }\n                 };\n            }\n            ]]></code> \n            </example>\n            <typeparam name=\"TItem\">Specifies the type of data source.</typeparam>\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component displays a list of suggested items from which users can choose or tag one.\n            The selected item inserted in target in a predefined highlight format.\n            Enter the mention character in the editable element and tag the users from the suggestion list.\n            </summary>\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component displays a list of suggested items from which users can choose or tag one.\n            Enter the mention character in the editable element and tag the users from the suggestion list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMention"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfMention<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the id of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component.\n            </summary>\n            <value> \n            It sets the unique ID for the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the target selector for displaying the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            The <c>SfMention</c> component listens to user input on the target element displays suggestions as soon as the user enters the mention character. \n            This allows users to easily select items from the list of suggestions by typing the mention character and then selecting an item from the list.\n            </summary>\n            <value>\n            An element on the page should be used as the target for the <c>SfMention</c> component, \n            so that mention component displays suggestion list opens relative to the elements cursor position.\n            </value>\n            <remarks>\n            The <c>Target</c> property is required and must be specified.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfMention DataSource=\"@SizeData\">\n            <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n            </TargetComponent>\n            </SfMention>\n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the class/multiple classes separated by a space for the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            </summary>\n            <value> \n            Accepts a CSS class string separated by space to include for <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> popup element. The default value is <c>String.Empty</c>.\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention CssClass=\"custom-mention\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n               .custom-mention .e-dropdownbase .e-list-item.e-active {\n                  color: #eec5d2;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MentionChar","TypeName":"System.Char","Documentation":"\n            <summary>\n            Gets or sets the symbol or single character which triggers the search action in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component.\n            The <c>SfMention</c> component listens to user input on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Target\" /> element displays suggestions as soon as the user enters the mention character.\n            </summary>\n            <value> \n            A character of symbol. By default, the trigger character is the <c>@</c> symbol..\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention MentionChar='#' DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention>\n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"MentionChar","Common.GloballyQualifiedTypeName":"global::System.Char"}},{"Kind":"Components.Component","Name":"ShowMentionChar","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to show the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.MentionChar\" /> along with with the text when displaying selected mention item in target.\n            </summary>\n            <value>\n            <c>true</c>, the selected mention item displayed along with the mention character. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            If <c>ShowMentionChar</c> is set to <c>true</c>, the <c>mention</c> component will display the mention character along with the text of the mentioned item. \n            For example, if the mention character is <c>@</c> and the user mentions the item \"John Doe\", the mention will be displayed as @John Doe.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowMentionChar","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the filter type that specifies the match criteria while searching for mentions. The possible values for the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.FilterType\" /> property are:\n            <list type=\"bullet\">\n            <item>\n            <term>StartsWith</term>\n            <description>lists the items if the start of the text in the item matches with the search term or input string.</description>\n            </item>\n            <item>\n            <term>EndsWith</term>\n            <description>lists the items if the end of the text in the item matches with the search term or input string.</description>\n            </item>\n            <item>\n            <term>Contains</term>\n            <description>lists the items if the item text contains the search term or input string.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.FilterType\" /> enumeration that specifies the match criteria while searching.\n            The default value is <see cref=\"F:Syncfusion.Blazor.DropDowns.FilterType.Contains\" />.\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention FilterType=\"FilterType.Contains\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"AllowSpaces","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to continue search action if user enter space after mention character while searching.\n            </summary>\n            <value> \n            <c>true</c>, the search action takes place even after a space, if the DataSource data's are matched. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            By default, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will only search for mentions when the mention character is immediately followed by a non-whitespace character (e.g. @john but not @ john). \n            However, you can change this behavior and allow the SfMention component to continue searching for mentions even if the user enters a space after the mention character by setting the <c>AllowSpaces</c> property to true.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowSpaces","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SuffixText","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the custom suffix that will be appended to the end of the mentioned item's text when it is inserted into the target editor. \n            </summary>\n            <value> \n            Accepts <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.SuffixText\" /> as string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            When a item is selected, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will automatically insert the text of the mentioned item into the target editor. \n            By default, the mention component will insert the text of the mentioned item without any additional text or characters. \n            However, you can specify a custom suffix that will be appended to the end of the mentioned item's text when it is inserted into the target editor.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfMention SuffixText=\"&nbsp;\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"SuffixText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"SuggestionCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the maximum number of items that will be displayed in the suggestion list.\n            </summary>\n            <value> \n            The maximum number of items that will be displayed in the suggestion list. The default value is <c>25</c>.\n            </value>\n            <remarks>\n            </remarks>\n            By default, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will display all of the items in the suggestions list. \n            However, you can limit the number of items that are displayed in the list by setting the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.SuggestionCount\" /> property.\n            <example> \n            <code><![CDATA[ \n            <SfMention SuggestionCount=15 DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"SuggestionCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"MinLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the minimum length of user input that is required to initiate the search action.\n            </summary>\n            <value> \n            The minimum number of characters user input that is required to initiate the search action.The default value is <c>0</c>.\n            </value>\n            <remarks>\n            By default, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will initiate a search as soon as the user begins typing in the editable element.\n            You can change this behavior by setting the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.MinLength\" /> property.\n            </remarks>\n            <example> \n            For example, if you wanted to require the user to enter at least <c>3</c> characters before a search is initiated, you could use the following code:\n            <code><![CDATA[ \n            <SfMention MinLength=3 DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"MinLength","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Highlight","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to highlight the searched characters on suggestion list items.\n            </summary>\n            <value> \n            <c>true</c>, enable the highlighting of the searched characters in the suggestions list. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Highlight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the popup's height value in pixels/number/percentage. If a number value is specified, it will be treated as pixels. \n            </summary>\n            <value> \n            Accepts <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.PopupHeight\" /> property accepts a value in pixels, number, or percentage. The default value is <c>300px</c>.\n            </value>\n            <example> \n            For example, if you wanted to set the height of the popup to 200 pixels, you could use the following code:\n            <code><![CDATA[ \n            <SfMention PopupHeight=\"200px\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the popup's width value in pixels/number/percentage. If a number value is specified, it will be treated as pixels.\n            </summary>\n            <value> \n            Accepts <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.PopupWidth\" /> property accepts a value in pixels, number, or percentage. The default value is <c>auto</c>.\n            </value>\n            <example>\n            For example, if you wanted to set the width of the popup to 250 pixels, you could use the following code:\n            <code><![CDATA[ \n            <SfMention PopupWidth=\"250px\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"SpinnerTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets a template that defines the appearance of the loading initiator in the popup. \n            This template is displayed until the data for the suggestions has been loaded.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                    <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <SpinnerTemplate>\n                    <div class=\"spinner_loader\"></div>\n                 </SpinnerTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"SpinnerTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DisplayTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets a template that defines how the selected value will be displayed in the editable component.\n            The <c>TItem\"</c> is passed as a context to the template, allowing it to access information about the suggested item, such as its <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Value\" /> and <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Text\" />.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <DisplayTemplate>\n                   <span class='name'>@@@((context as EmployeeData).FirstName)</span>\n                </DisplayTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"DisplayTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TargetComponent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the target component for displaying the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            The <c>SfMention</c> component listens to user input on the target component displays suggestions as soon as the user enters the mention character. \n            This allows users to easily select items from the list of suggestions by typing the mention character and then selecting an item from the list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> is attached to the first element of the TargetComponent.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <div id=\"mentionTarget\" ></div>\n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\"></div>\n                </TargetComponent>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"TargetComponent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Created\" /> event callback.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Destroyed\" /> event callback.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.OnActionBegin\" /> event callback. \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can prevent the action using <see cref=\"P:Syncfusion.Blazor.DropDowns.ActionBeginEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" OnActionBegin=\"@OnActionBeginHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnActionBeginHandler(ActionBeginEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.OnActionComplete\" /> event callback. \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" OnActionComplete=\"@OnActionCompleteHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnActionCompleteHandler(ActionBeginEventArgs<string> args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.OnActionFailure\" /> event callback. \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionFilteringEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Filtering\" /> event callback. \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" Filtering=\"@OnFilteringHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(MentionFilteringEventArgs args) {\n                    \n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.MentionFilteringEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Opening","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionOpeningEventArgs>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Opening\" /> event callback. \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can prevent the popup open action using <see cref=\"!:MentionOpeningEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" Opening=\"@OnOpeningHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpeningHandler(MentionOpeningEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Opening","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.MentionOpeningEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionClosingEventArgs>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Closing\" /> event callback.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can prevent the popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionClosingEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" Closing=\"@OnClosingHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnClosingHandler(MentionClosingEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Closing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.MentionClosingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Opened\" /> event callback.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Closed\" /> event callback.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionValueSelectedEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.ValueSelected\" /> event callback.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event triggers when an item in a popup is selected or when the model value is changed by user.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" ValueSelected=\"@OnValueSelectedHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnValueSelectedHandler(MentionValueSelectedEventArgs<TItem> args) {\n                    \n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.MentionValueSelectedEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionValueSelectingEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.ValueSelecting\" /> event callback.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionValueSelectingEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" ValueSelecting=\"@OnValueSelectingHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnValueSelectingHandler(MentionValueSelectingEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueSelecting","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.MentionValueSelectingEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.GenericTyped":"True"}},{"HashCode":-1129808483,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component displays a list of suggested items from which users can select or tag one.\n            Enter the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.MentionChar\" /> in the editable element and tag the any item from the suggestion list.\n            </summary>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"Games\" DataSource=\"@GamesData\">\n              <ChildContent>\n                <MentionFieldSettings Value=\"ID\" Text=\"Text\"></MentionFieldSettings>\n              </ChildContent>\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention>\n            @code{\n               public class Games\n                 {  \n                   public string ID { get; set; }\n                   public string Text { get; set; }\n               }\n               List<Games> GamesData = new List<Games> {\n                   new Games() { ID= \"Game1\", Text= \"American Football\" },\n                   new Games() { ID= \"Game2\", Text= \"Badminton\" },\n                   new Games() { ID= \"Game3\", Text= \"Basketball\" },\n                   new Games() { ID= \"Game4\", Text= \"Cricket\" },\n                   new Games() { ID= \"Game5\", Text= \"Football\" },\n                   new Games() { ID= \"Game6\", Text= \"Golf\" }\n                 };\n            }\n            ]]></code> \n            </example>\n            <typeparam name=\"TItem\">Specifies the type of data source.</typeparam>\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component displays a list of suggested items from which users can choose or tag one.\n            The selected item inserted in target in a predefined highlight format.\n            Enter the mention character in the editable element and tag the users from the suggestion list.\n            </summary>\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component displays a list of suggested items from which users can choose or tag one.\n            Enter the mention character in the editable element and tag the users from the suggestion list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfMention"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfMention<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the id of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component.\n            </summary>\n            <value> \n            It sets the unique ID for the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the target selector for displaying the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            The <c>SfMention</c> component listens to user input on the target element displays suggestions as soon as the user enters the mention character. \n            This allows users to easily select items from the list of suggestions by typing the mention character and then selecting an item from the list.\n            </summary>\n            <value>\n            An element on the page should be used as the target for the <c>SfMention</c> component, \n            so that mention component displays suggestion list opens relative to the elements cursor position.\n            </value>\n            <remarks>\n            The <c>Target</c> property is required and must be specified.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfMention DataSource=\"@SizeData\">\n            <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n            </TargetComponent>\n            </SfMention>\n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the class/multiple classes separated by a space for the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            </summary>\n            <value> \n            Accepts a CSS class string separated by space to include for <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> popup element. The default value is <c>String.Empty</c>.\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention CssClass=\"custom-mention\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n               .custom-mention .e-dropdownbase .e-list-item.e-active {\n                  color: #eec5d2;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"MentionChar","TypeName":"System.Char","Documentation":"\n            <summary>\n            Gets or sets the symbol or single character which triggers the search action in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component.\n            The <c>SfMention</c> component listens to user input on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Target\" /> element displays suggestions as soon as the user enters the mention character.\n            </summary>\n            <value> \n            A character of symbol. By default, the trigger character is the <c>@</c> symbol..\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention MentionChar='#' DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention>\n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"MentionChar","Common.GloballyQualifiedTypeName":"global::System.Char"}},{"Kind":"Components.Component","Name":"ShowMentionChar","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to show the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.MentionChar\" /> along with with the text when displaying selected mention item in target.\n            </summary>\n            <value>\n            <c>true</c>, the selected mention item displayed along with the mention character. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            If <c>ShowMentionChar</c> is set to <c>true</c>, the <c>mention</c> component will display the mention character along with the text of the mentioned item. \n            For example, if the mention character is <c>@</c> and the user mentions the item \"John Doe\", the mention will be displayed as @John Doe.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowMentionChar","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the filter type that specifies the match criteria while searching for mentions. The possible values for the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.FilterType\" /> property are:\n            <list type=\"bullet\">\n            <item>\n            <term>StartsWith</term>\n            <description>lists the items if the start of the text in the item matches with the search term or input string.</description>\n            </item>\n            <item>\n            <term>EndsWith</term>\n            <description>lists the items if the end of the text in the item matches with the search term or input string.</description>\n            </item>\n            <item>\n            <term>Contains</term>\n            <description>lists the items if the item text contains the search term or input string.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.FilterType\" /> enumeration that specifies the match criteria while searching.\n            The default value is <see cref=\"F:Syncfusion.Blazor.DropDowns.FilterType.Contains\" />.\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention FilterType=\"FilterType.Contains\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"AllowSpaces","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to continue search action if user enter space after mention character while searching.\n            </summary>\n            <value> \n            <c>true</c>, the search action takes place even after a space, if the DataSource data's are matched. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            By default, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will only search for mentions when the mention character is immediately followed by a non-whitespace character (e.g. @john but not @ john). \n            However, you can change this behavior and allow the SfMention component to continue searching for mentions even if the user enters a space after the mention character by setting the <c>AllowSpaces</c> property to true.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowSpaces","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SuffixText","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the custom suffix that will be appended to the end of the mentioned item's text when it is inserted into the target editor. \n            </summary>\n            <value> \n            Accepts <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.SuffixText\" /> as string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            When a item is selected, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will automatically insert the text of the mentioned item into the target editor. \n            By default, the mention component will insert the text of the mentioned item without any additional text or characters. \n            However, you can specify a custom suffix that will be appended to the end of the mentioned item's text when it is inserted into the target editor.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfMention SuffixText=\"&nbsp;\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"SuffixText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"SuggestionCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the maximum number of items that will be displayed in the suggestion list.\n            </summary>\n            <value> \n            The maximum number of items that will be displayed in the suggestion list. The default value is <c>25</c>.\n            </value>\n            <remarks>\n            </remarks>\n            By default, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will display all of the items in the suggestions list. \n            However, you can limit the number of items that are displayed in the list by setting the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.SuggestionCount\" /> property.\n            <example> \n            <code><![CDATA[ \n            <SfMention SuggestionCount=15 DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"SuggestionCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"MinLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the minimum length of user input that is required to initiate the search action.\n            </summary>\n            <value> \n            The minimum number of characters user input that is required to initiate the search action.The default value is <c>0</c>.\n            </value>\n            <remarks>\n            By default, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will initiate a search as soon as the user begins typing in the editable element.\n            You can change this behavior by setting the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.MinLength\" /> property.\n            </remarks>\n            <example> \n            For example, if you wanted to require the user to enter at least <c>3</c> characters before a search is initiated, you could use the following code:\n            <code><![CDATA[ \n            <SfMention MinLength=3 DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"MinLength","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Highlight","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to highlight the searched characters on suggestion list items.\n            </summary>\n            <value> \n            <c>true</c>, enable the highlighting of the searched characters in the suggestions list. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Highlight","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the popup's height value in pixels/number/percentage. If a number value is specified, it will be treated as pixels. \n            </summary>\n            <value> \n            Accepts <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.PopupHeight\" /> property accepts a value in pixels, number, or percentage. The default value is <c>300px</c>.\n            </value>\n            <example> \n            For example, if you wanted to set the height of the popup to 200 pixels, you could use the following code:\n            <code><![CDATA[ \n            <SfMention PopupHeight=\"200px\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the popup's width value in pixels/number/percentage. If a number value is specified, it will be treated as pixels.\n            </summary>\n            <value> \n            Accepts <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.PopupWidth\" /> property accepts a value in pixels, number, or percentage. The default value is <c>auto</c>.\n            </value>\n            <example>\n            For example, if you wanted to set the width of the popup to 250 pixels, you could use the following code:\n            <code><![CDATA[ \n            <SfMention PopupWidth=\"250px\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"SpinnerTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets a template that defines the appearance of the loading initiator in the popup. \n            This template is displayed until the data for the suggestions has been loaded.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                    <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <SpinnerTemplate>\n                    <div class=\"spinner_loader\"></div>\n                 </SpinnerTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"SpinnerTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DisplayTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets a template that defines how the selected value will be displayed in the editable component.\n            The <c>TItem\"</c> is passed as a context to the template, allowing it to access information about the suggested item, such as its <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Value\" /> and <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Text\" />.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <DisplayTemplate>\n                   <span class='name'>@@@((context as EmployeeData).FirstName)</span>\n                </DisplayTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"DisplayTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TargetComponent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the target component for displaying the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            The <c>SfMention</c> component listens to user input on the target component displays suggestions as soon as the user enters the mention character. \n            This allows users to easily select items from the list of suggestions by typing the mention character and then selecting an item from the list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> is attached to the first element of the TargetComponent.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <div id=\"mentionTarget\" ></div>\n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\"></div>\n                </TargetComponent>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"TargetComponent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Created\" /> event callback.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Destroyed\" /> event callback.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.OnActionBegin\" /> event callback. \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can prevent the action using <see cref=\"P:Syncfusion.Blazor.DropDowns.ActionBeginEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" OnActionBegin=\"@OnActionBeginHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnActionBeginHandler(ActionBeginEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.OnActionComplete\" /> event callback. \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" OnActionComplete=\"@OnActionCompleteHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnActionCompleteHandler(ActionBeginEventArgs<string> args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.OnActionFailure\" /> event callback. \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionFilteringEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Filtering\" /> event callback. \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" Filtering=\"@OnFilteringHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(MentionFilteringEventArgs args) {\n                    \n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.MentionFilteringEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Opening","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionOpeningEventArgs>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Opening\" /> event callback. \n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can prevent the popup open action using <see cref=\"!:MentionOpeningEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" Opening=\"@OnOpeningHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpeningHandler(MentionOpeningEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Opening","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.MentionOpeningEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionClosingEventArgs>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Closing\" /> event callback.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can prevent the popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionClosingEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" Closing=\"@OnClosingHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnClosingHandler(MentionClosingEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Closing","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.MentionClosingEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Opened\" /> event callback.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Closed\" /> event callback.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionValueSelectedEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.ValueSelected\" /> event callback.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            This event triggers when an item in a popup is selected or when the model value is changed by user.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" ValueSelected=\"@OnValueSelectedHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnValueSelectedHandler(MentionValueSelectedEventArgs<TItem> args) {\n                    \n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.MentionValueSelectedEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionValueSelectingEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.ValueSelecting\" /> event callback.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n            <remarks>\n            You can prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionValueSelectingEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" ValueSelecting=\"@OnValueSelectingHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnValueSelectingHandler(MentionValueSelectingEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueSelecting","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.MentionValueSelectingEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1110805407,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1609059516,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":925010117,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.SpinnerTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a template that defines the appearance of the loading initiator in the popup. \n            This template is displayed until the data for the suggestions has been loaded.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                    <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <SpinnerTemplate>\n                    <div class=\"spinner_loader\"></div>\n                 </SpinnerTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinnerTemplate","ParentTag":"SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.SpinnerTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1614343212,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.SpinnerTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a template that defines the appearance of the loading initiator in the popup. \n            This template is displayed until the data for the suggestions has been loaded.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                    <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <SpinnerTemplate>\n                    <div class=\"spinner_loader\"></div>\n                 </SpinnerTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinnerTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.SpinnerTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":715889323,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.DisplayTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a template that defines how the selected value will be displayed in the editable component.\n            The <c>TItem\"</c> is passed as a context to the template, allowing it to access information about the suggested item, such as its <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Value\" /> and <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Text\" />.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <DisplayTemplate>\n                   <span class='name'>@@@((context as EmployeeData).FirstName)</span>\n                </DisplayTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DisplayTemplate","ParentTag":"SfMention"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'DisplayTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.DisplayTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2057535205,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.DisplayTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a template that defines how the selected value will be displayed in the editable component.\n            The <c>TItem\"</c> is passed as a context to the template, allowing it to access information about the suggested item, such as its <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Value\" /> and <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Text\" />.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <DisplayTemplate>\n                   <span class='name'>@@@((context as EmployeeData).FirstName)</span>\n                </DisplayTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DisplayTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'DisplayTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.DisplayTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1883598401,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.TargetComponent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the target component for displaying the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            The <c>SfMention</c> component listens to user input on the target component displays suggestions as soon as the user enters the mention character. \n            This allows users to easily select items from the list of suggestions by typing the mention character and then selecting an item from the list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> is attached to the first element of the TargetComponent.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <div id=\"mentionTarget\" ></div>\n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\"></div>\n                </TargetComponent>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TargetComponent","ParentTag":"SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.TargetComponent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":188992504,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.TargetComponent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the target component for displaying the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            The <c>SfMention</c> component listens to user input on the target component displays suggestions as soon as the user enters the mention character. \n            This allows users to easily select items from the list of suggestions by typing the mention character and then selecting an item from the list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> is attached to the first element of the TargetComponent.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <div id=\"mentionTarget\" ></div>\n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\"></div>\n                </TargetComponent>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TargetComponent","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.TargetComponent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-894620349,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfMention"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1759559477,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-711334134,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfMention"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-224683490,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":655448901,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-906938255,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1891196881,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1657580993,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMention","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1266896271,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Represents the event handlers for a MultiSelect Dropdown component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of MultiSelectEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MultiSelectEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before fetching data from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after data is fetched suction from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data fetch request fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup before opens.\n            </summary>\n            <remarks>\n            Prevent the dropdown popup open action using <see cref=\"P:Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMultiSelect TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <MultiSelectEvents TValue=\"string\" TItem=\"string\" OnOpen=\"@OnOpenHandler\"/>\n            </SfMultiSelect>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpenHandler(BeforeOpenEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.Value\" /> property changed.\n            </summary>\n            <remarks>\n            This event triggers when an item in a popup is selected or when the model value is changed by the user.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMultiSelect TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <MultiSelectEvents TValue=\"string\" TItem=\"string\" ValueChange=\"@OnChange\"/>\n            </SfMultiSelect>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnChange(MultiSelectChangeEventArgs<string> args) {\n                    var NewValue = args.Value;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChipSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChipSelectedEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when a chip is selected in the MultiSelect component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfMultiSelect TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <MultiSelectEvents TValue=\"string\" TItem=\"string\" ChipSelected=\"@OnChipSelected\" />\n            </SfMultiSelect>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnChipSelected(ChipSelectedEventArgs<string> args) {\n                    var NewValue = args.ChipData;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ChipSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChipSelectedEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the dropdown popup is closed.\n            </summary>\n            <remarks>\n            Prevent the dropdown popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMultiSelect TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <MultiSelectEvents TValue=\"string\" TItem=\"string\" OnClose=\"@OnCloseHandler\"/>\n            </SfMultiSelect>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnCloseHandler(PopupEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when custom values (not present in the data source) are selected in the MultiSelect Dropdown component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfMultiSelect TValue=\"int\" TItem=\"Countries\" DataSource=\"@CountryList\">\n               <MultiSelectEvents TValue=\"int\" TItem=\"Countries\" CustomValueSpecifier=\"@customValue\"/>\n               <MultiSelectFieldSettings Text=\"Name\" Value=\"Code\"/>\n            </SfMultiSelect>\n            @code{\n                public class Countries {\n                    public string Name { get; set; }\n                    public int Code { get; set; }\n                }\n                private List<Countries> CountryList = new List<Countries>() {\n                    new Countries(){ Code= 101, Name= \"Australia\" },\n                    new Countries(){ Code= 102, Name= \"Canada\" }\n                 }\n                private void customValue(CustomValueEventArgs<Countries> args) {\n                    args.NewData = new Countries() { Code = 103, Name = args.Text };\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.CustomValueEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked on typing a character in the MultiSelect Dropdown search box.\n            </summary>\n            <remarks>\n            Prevent the default filter action and make your query enable the <see cref=\"P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.PreventDefaultAction\" /> event argument, and pass the modified data source and query in the <see cref=\"M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.FilterAsync(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)\" /> method.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMultiSelect @ref=\"MultiSelectObj\" TItem=\"string\" TValue=\"string\" AllowFiltering=\"true\" DataSource=\"@MyList\">\n                <MultiSelectEvents TValue=\"string\" TItem=\"string\" Filtering=\"@OnFilteringHandler\" />\n            </SfMultiSelect>\n            @code{\n                SfMultiSelect<string, string> MultiSelectObj { get; set; }\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(FilteringEventArgs args) {\n                    args.PreventDefaultAction = true;\n                    var query = new Query().Where(new WhereFilter() { Field = \"Text\", Operator = \"contains\", value = args.Text, IgnoreCase = true });\n                    await MultiSelectObj.FilterAsync(MyList, query);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the dropdown popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueRemoved","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the selected value has been removed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueRemoved","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnValueRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the selected value is removed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueRemove","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when an item is selected from the dropdown popup by the user either with a mouse tap or with a keyboard navigation.\n            </summary>\n            <remarks>\n            You can prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMultiSelect TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <MultiSelectEvents TValue=\"string\" TItem=\"string\" OnValueSelect=\"@OnSelectHandler\" />\n            </SfMultiSelect>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnSelectHandler(SelectEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"SelectedAll","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectAllEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the select all process is completed in the MultiSelect Dropdown component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedAll","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectAllEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after all items have been cleared using the clear icon in the MultiSelect Dropdown component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChipTag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.TaggingEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before setting the selected item as a chip in the MultiSelect Dropdown component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChipTag","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.TaggingEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectEvents","Components.GenericTyped":"True"}},{"HashCode":-1531208158,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Represents the event handlers for a MultiSelect Dropdown component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of MultiSelectEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.MultiSelectEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before fetching data from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after data is fetched suction from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data fetch request fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Exception>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup before opens.\n            </summary>\n            <remarks>\n            Prevent the dropdown popup open action using <see cref=\"P:Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMultiSelect TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <MultiSelectEvents TValue=\"string\" TItem=\"string\" OnOpen=\"@OnOpenHandler\"/>\n            </SfMultiSelect>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpenHandler(BeforeOpenEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.Value\" /> property changed.\n            </summary>\n            <remarks>\n            This event triggers when an item in a popup is selected or when the model value is changed by the user.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMultiSelect TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <MultiSelectEvents TValue=\"string\" TItem=\"string\" ValueChange=\"@OnChange\"/>\n            </SfMultiSelect>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnChange(MultiSelectChangeEventArgs<string> args) {\n                    var NewValue = args.Value;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<TValue>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChipSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChipSelectedEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when a chip is selected in the MultiSelect component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfMultiSelect TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <MultiSelectEvents TValue=\"string\" TItem=\"string\" ChipSelected=\"@OnChipSelected\" />\n            </SfMultiSelect>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnChipSelected(ChipSelectedEventArgs<string> args) {\n                    var NewValue = args.ChipData;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ChipSelected","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ChipSelectedEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the dropdown popup is closed.\n            </summary>\n            <remarks>\n            Prevent the dropdown popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMultiSelect TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <MultiSelectEvents TValue=\"string\" TItem=\"string\" OnClose=\"@OnCloseHandler\"/>\n            </SfMultiSelect>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnCloseHandler(PopupEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when custom values (not present in the data source) are selected in the MultiSelect Dropdown component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfMultiSelect TValue=\"int\" TItem=\"Countries\" DataSource=\"@CountryList\">\n               <MultiSelectEvents TValue=\"int\" TItem=\"Countries\" CustomValueSpecifier=\"@customValue\"/>\n               <MultiSelectFieldSettings Text=\"Name\" Value=\"Code\"/>\n            </SfMultiSelect>\n            @code{\n                public class Countries {\n                    public string Name { get; set; }\n                    public int Code { get; set; }\n                }\n                private List<Countries> CountryList = new List<Countries>() {\n                    new Countries(){ Code= 101, Name= \"Australia\" },\n                    new Countries(){ Code= 102, Name= \"Canada\" }\n                 }\n                private void customValue(CustomValueEventArgs<Countries> args) {\n                    args.NewData = new Countries() { Code = 103, Name = args.Text };\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.CustomValueEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked on typing a character in the MultiSelect Dropdown search box.\n            </summary>\n            <remarks>\n            Prevent the default filter action and make your query enable the <see cref=\"P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.PreventDefaultAction\" /> event argument, and pass the modified data source and query in the <see cref=\"M:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.FilterAsync(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)\" /> method.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMultiSelect @ref=\"MultiSelectObj\" TItem=\"string\" TValue=\"string\" AllowFiltering=\"true\" DataSource=\"@MyList\">\n                <MultiSelectEvents TValue=\"string\" TItem=\"string\" Filtering=\"@OnFilteringHandler\" />\n            </SfMultiSelect>\n            @code{\n                SfMultiSelect<string, string> MultiSelectObj { get; set; }\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(FilteringEventArgs args) {\n                    args.PreventDefaultAction = true;\n                    var query = new Query().Where(new WhereFilter() { Field = \"Text\", Operator = \"contains\", value = args.Text, IgnoreCase = true });\n                    await MultiSelectObj.FilterAsync(MyList, query);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::System.Object>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.PopupEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the dropdown popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueRemoved","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the selected value has been removed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueRemoved","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnValueRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the selected value is removed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueRemove","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when an item is selected from the dropdown popup by the user either with a mouse tap or with a keyboard navigation.\n            </summary>\n            <remarks>\n            You can prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMultiSelect TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <MultiSelectEvents TValue=\"string\" TItem=\"string\" OnValueSelect=\"@OnSelectHandler\" />\n            </SfMultiSelect>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnSelectHandler(SelectEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"SelectedAll","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectAllEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the select all process is completed in the MultiSelect Dropdown component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedAll","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.SelectAllEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after all items have been cleared using the clear icon in the MultiSelect Dropdown component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChipTag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.TaggingEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before setting the selected item as a chip in the MultiSelect Dropdown component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChipTag","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.TaggingEventArgs<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectEvents","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-220765295,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MultiSelectFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the field's name to group the MultiSelect Dropdown items.\n            </summary>\n            <value>\n            The name of the field to group.\n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the CSS class(es) for the icon displayed for each list item in the MultiSelect Dropdown popup.\n            </summary>\n            <value>\n            The CSS class(es) name for the icon.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the text displayed for each list item in the MultiSelect Dropdown popup.\n            </summary>\n            <value>\n            The column name used as the text displayed for each list item.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the value for each list item in the MultiSelect Dropdown popup.\n            </summary>\n            <value>\n            The name of the column to map as the value for each list item.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectFieldSettings"}},{"HashCode":-79736606,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the field's name to group the MultiSelect Dropdown items.\n            </summary>\n            <value>\n            The name of the field to group.\n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupBy","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the CSS class(es) for the icon displayed for each list item in the MultiSelect Dropdown popup.\n            </summary>\n            <value>\n            The CSS class(es) name for the icon.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the text displayed for each list item in the MultiSelect Dropdown popup.\n            </summary>\n            <value>\n            The column name used as the text displayed for each list item.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the column name used as the value for each list item in the MultiSelect Dropdown popup.\n            </summary>\n            <value>\n            The name of the column to map as the value for each list item.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"global::System.String"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1028035697,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfMultiSelect.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the identifier of the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the MultiSelect Dropdown component is enabled.\n            </summary>\n            <value>\n            <c>true</c> if the MultiSelect Dropdown component is enabled; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the component's state should be persisted between page reloads.\n            </summary>\n            <value>\n            <c>true</c> if persistence is enabled; otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowCustomValue","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the MultiSelect Dropdown component allows entering custom values.\n            </summary>\n            <value>\n            <c>true</c> if custom values are allowed; otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowCustomValue","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether virtualization is enabled for the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c> if virtualization is enabled; otherwise, <c>false</c>..\n            </value>\n            <remarks>\n            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering an entire load of huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items to be fetched in the popup based on the ItemsCount when <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.EnableVirtualization\" /> is enabled.\n            </summary>\n            <value>\n            An integer value representing the number of items to be fetched. The default value is <c>5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether filtering is allowed in the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c> if filtering is allowed; otherwise, <c>false</c>.\n            </value>\n            <remarks>\n            If the searching character does not match, the <c>NoRecordsTemplate</c> property value will be shown.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableChangeOnBlur","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the value change should occur on blur for the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c> if value change occurs on blur; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableChangeOnBlur","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableCloseOnSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the dropdown should close automatically after selecting an item in the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown should close on select; otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableCloseOnSelect","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMultiSelect`2\" /> component.\n            </summary>\n            <value>\n             Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DelimiterChar","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the delimiter character used to separate selected items in the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            The delimiter character used for item separation. The default value is \",\".\n            </value>\n        ","Metadata":{"Common.PropertyName":"DelimiterChar","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableGroupCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the group checkbox is enabled in the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c> if the group checkbox is enabled; otherwise, <c>false</c>.\n            </value>\n            <remarks>\n            This property allows you to render checkbox for group headers and to select all the grouped items at once.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableGroupCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled for the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled. Otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableSelectionOrder","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the selection order is enabled in the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c>, if the selection order can be enabled. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableSelectionOrder","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the placeholder text displayed in the filter bar of the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            The placeholder text for the filter bar.\n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the type of floating label to be displayed in the MultiSelect Dropdown component.\n            </summary>\n            <value>\n             Possible values are:\n            <c>Never</c>: Never floats the label in the MultiSelect when the placeholder is available.\n            <c>Always</c>: The floating label always floats above the MultiSelect.\n            <c>Auto</c>: The floating label floats above the MultiSelect after focusing it or when entering the value in it.\n            </value>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"HideSelectedItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the selected item should be hidden in the popup list of the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c> if the selected item should be hidden; otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"HideSelectedItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the HTML attributes to be applied to the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            The HTML attributes as a dictionary.\n            </value>\n            <remarks>\n            If you configured both the property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n            <value>\n            A dictionary of additional input attributes for the root element of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"MaximumSelectionLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the maximum number of items that can be selected in the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            An integer value representing the maximum number of items that can be selected in the list. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MaximumSelectionLength","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.DropDowns.VisualMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the visual mode of the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            The visual mode of the MultiSelect Dropdown. The default value is <see cref=\"F:Syncfusion.Blazor.DropDowns.VisualMode.Default\" />.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.VisualMode"}},{"Kind":"Components.Component","Name":"OpenOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the dropdown should open when the MultiSelect component is clicked.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown should open on click; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OpenOnClick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the placeholder text to be displayed in the MultiSelect input when no items are selected.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the dropdown popup in the MultiSelect component.\n            </summary>\n            <value>\n            Accepts the string value. The default value is <c>300px</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the dropdown popup in the MultiSelect component.\n            </summary>\n            <value>\n            Accepts the string value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the MultiSelect component is in read-only mode.\n            </summary>\n            <value>\n            <c>true</c> if the MultiSelect component is read-only; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SelectAllText","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text to be displayed for the \"Select All\" option in the MultiSelect component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"SelectAllText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the MultiSelect Dropdown should display a clear button to clear the selected values.\n            </summary>\n            <value>\n            <c>true</c> if the clear button should be shown; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowDropDownIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the dropdown icon should be shown in the MultiSelect component.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown icon should be shown; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowDropDownIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <c>Select All</c> option should be shown in the MultiSelect component for the <see cref=\"F:Syncfusion.Blazor.DropDowns.VisualMode.CheckBox\" /> mode.\n            </summary>\n            <value>\n            <c>true</c>, if the select all option should be shown. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowSelectAll","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the selected list item which maps the data `Text` field in the component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"UnSelectAllText","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text to be displayed for the <c>Unselect All</c> option in the MultiSelect component for the <see cref=\"F:Syncfusion.Blazor.DropDowns.VisualMode.CheckBox\" /> mode.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"UnSelectAllText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets the value of the selected item in the MultiSelect Dropdown component. This will be used with two-way binding.\n            </summary>\n            <value>\n            The current value of the multi select component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that trigger when the value changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template to be rendered as the footer of the dropdown popup in the MultiSelect component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template to be rendered as the header of the dropdown popup in the MultiSelect component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the MultiSelect component.\n            </summary>\n            <value>\n            Accepts the string value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the tab index of the MultiSelect component.\n            </summary>\n            <value>\n            The tab index of the MultiSelect component. The default value is 0.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnKeyUp","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnKeyUp","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.GenericTyped":"True"}},{"HashCode":-1431686483,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfMultiSelect.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the identifier of the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the MultiSelect Dropdown component is enabled.\n            </summary>\n            <value>\n            <c>true</c> if the MultiSelect Dropdown component is enabled; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the component's state should be persisted between page reloads.\n            </summary>\n            <value>\n            <c>true</c> if persistence is enabled; otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Common.GloballyQualifiedTypeName":"global::System.Linq.Expressions.Expression<global::System.Func<TValue>>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowCustomValue","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the MultiSelect Dropdown component allows entering custom values.\n            </summary>\n            <value>\n            <c>true</c> if custom values are allowed; otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowCustomValue","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether virtualization is enabled for the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c> if virtualization is enabled; otherwise, <c>false</c>..\n            </value>\n            <remarks>\n            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering an entire load of huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items to be fetched in the popup based on the ItemsCount when <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMultiSelect`2.EnableVirtualization\" /> is enabled.\n            </summary>\n            <value>\n            An integer value representing the number of items to be fetched. The default value is <c>5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether filtering is allowed in the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c> if filtering is allowed; otherwise, <c>false</c>.\n            </value>\n            <remarks>\n            If the searching character does not match, the <c>NoRecordsTemplate</c> property value will be shown.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableChangeOnBlur","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the value change should occur on blur for the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c> if value change occurs on blur; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableChangeOnBlur","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableCloseOnSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the dropdown should close automatically after selecting an item in the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown should close on select; otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableCloseOnSelect","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMultiSelect`2\" /> component.\n            </summary>\n            <value>\n             Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"DelimiterChar","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the delimiter character used to separate selected items in the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            The delimiter character used for item separation. The default value is \",\".\n            </value>\n        ","Metadata":{"Common.PropertyName":"DelimiterChar","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"EnableGroupCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the group checkbox is enabled in the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c> if the group checkbox is enabled; otherwise, <c>false</c>.\n            </value>\n            <remarks>\n            This property allows you to render checkbox for group headers and to select all the grouped items at once.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableGroupCheckBox","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled for the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction can be enabled. Otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"EnableSelectionOrder","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the selection order is enabled in the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c>, if the selection order can be enabled. Otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableSelectionOrder","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the placeholder text displayed in the filter bar of the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            The placeholder text for the filter bar.\n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the type of floating label to be displayed in the MultiSelect Dropdown component.\n            </summary>\n            <value>\n             Possible values are:\n            <c>Never</c>: Never floats the label in the MultiSelect when the placeholder is available.\n            <c>Always</c>: The floating label always floats above the MultiSelect.\n            <c>Auto</c>: The floating label floats above the MultiSelect after focusing it or when entering the value in it.\n            </value>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Inputs.FloatLabelType"}},{"Kind":"Components.Component","Name":"HideSelectedItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the selected item should be hidden in the popup list of the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            <c>true</c> if the selected item should be hidden; otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"HideSelectedItem","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the HTML attributes to be applied to the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            The HTML attributes as a dictionary.\n            </value>\n            <remarks>\n            If you configured both the property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n            <value>\n            A dictionary of additional input attributes for the root element of the component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"InputAttributes","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object>"}},{"Kind":"Components.Component","Name":"MaximumSelectionLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the maximum number of items that can be selected in the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            An integer value representing the maximum number of items that can be selected in the list. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MaximumSelectionLength","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.DropDowns.VisualMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the visual mode of the MultiSelect Dropdown component.\n            </summary>\n            <value>\n            The visual mode of the MultiSelect Dropdown. The default value is <see cref=\"F:Syncfusion.Blazor.DropDowns.VisualMode.Default\" />.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Mode","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.VisualMode"}},{"Kind":"Components.Component","Name":"OpenOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the dropdown should open when the MultiSelect component is clicked.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown should open on click; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OpenOnClick","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the placeholder text to be displayed in the MultiSelect input when no items are selected.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the dropdown popup in the MultiSelect component.\n            </summary>\n            <value>\n            Accepts the string value. The default value is <c>300px</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"PopupHeight","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the dropdown popup in the MultiSelect component.\n            </summary>\n            <value>\n            Accepts the string value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"PopupWidth","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the MultiSelect component is in read-only mode.\n            </summary>\n            <value>\n            <c>true</c> if the MultiSelect component is read-only; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Readonly","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"SelectAllText","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text to be displayed for the \"Select All\" option in the MultiSelect component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"SelectAllText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the MultiSelect Dropdown should display a clear button to clear the selected values.\n            </summary>\n            <value>\n            <c>true</c> if the clear button should be shown; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowDropDownIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the dropdown icon should be shown in the MultiSelect component.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown icon should be shown; otherwise, <c>false</c>. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowDropDownIcon","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ShowSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <c>Select All</c> option should be shown in the MultiSelect component for the <see cref=\"F:Syncfusion.Blazor.DropDowns.VisualMode.CheckBox\" /> mode.\n            </summary>\n            <value>\n            <c>true</c>, if the select all option should be shown. Otherwise, <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowSelectAll","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the selected list item which maps the data `Text` field in the component.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Text","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"UnSelectAllText","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text to be displayed for the <c>Unselect All</c> option in the MultiSelect component for the <see cref=\"F:Syncfusion.Blazor.DropDowns.VisualMode.CheckBox\" /> mode.\n            </summary>\n            <value>\n            Accepts the string value.\n            </value>\n        ","Metadata":{"Common.PropertyName":"UnSelectAllText","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets the value of the selected item in the MultiSelect Dropdown component. This will be used with two-way binding.\n            </summary>\n            <value>\n            The current value of the multi select component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that trigger when the value changes.\n            </summary>\n            <value>\n            An event callback function.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<TValue>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template to be rendered as the footer of the dropdown popup in the MultiSelect component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template to be rendered as the header of the dropdown popup in the MultiSelect component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the MultiSelect component.\n            </summary>\n            <value>\n            Accepts the string value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the tab index of the MultiSelect component.\n            </summary>\n            <value>\n            The tab index of the MultiSelect component. The default value is 0.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex","Common.GloballyQualifiedTypeName":"global::System.Int32"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnKeyUp","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnKeyUp","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.ChangeEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":691257747,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":809356619,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ChildContent","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1195076252,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>\n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-150214941,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>\n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1163012160,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template to be rendered as the footer of the dropdown popup in the MultiSelect component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>\n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1954115528,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template to be rendered as the footer of the dropdown popup in the MultiSelect component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>\n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1605448566,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template to be rendered as the header of the dropdown popup in the MultiSelect component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>\n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2085802038,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template to be rendered as the header of the dropdown popup in the MultiSelect component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>\n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-461071062,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":859555318,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":399949534,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1070072116,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1410555400,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1494992161,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-709209295,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":421730452,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-496822123,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The MulitSelect has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of MultiSelectTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.GenericTyped":"True"}},{"HashCode":475757414,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The MulitSelect has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of MultiSelectTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":591616057,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-708470086,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ValueTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":784089824,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-408175013,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2002150598,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":731775124,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":308737000,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1689190774,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1672001142,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-689360791,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":127237202,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1916116226,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-643451208,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":764799482,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"MultiSelectTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-769036998,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns._Imports","AssemblyName":"Syncfusion.Blazor.DropDowns","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns._Imports","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"_Imports"}},{"HashCode":111903163,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns._Imports","AssemblyName":"Syncfusion.Blazor.DropDowns","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns._Imports","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"_Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1926322831,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDowns has been provided with several options to customize each list item, group title, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of DropDownsTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.GenericTyped":"True"}},{"HashCode":1949758154,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDowns has been provided with several options to customize each list item, group title, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of DropDownsTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-286621266,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-50226319,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.FooterTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":987004464,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-981848882,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.HeaderTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":781102830,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-140686512,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2064857008,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1471719295,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-508725909,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-770161259,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1806863117,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1455001967,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"DropDownsTemplates","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-293315247,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecord"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"IsFailure","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            IsActionFaiure set to true, then the action failure template is show in popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFailure","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LocaleKey","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the no record locale key for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LocaleKey","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FailureLocaleKey","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the action failure locale key for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FailureLocaleKey","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LocaleValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the no record locale value for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LocaleValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FailureLocaleValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the action failure locale value for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FailureLocaleValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.GenericTyped":"True"}},{"HashCode":854406315,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"IsFailure","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            IsActionFaiure set to true, then the action failure template is show in popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFailure","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"LocaleKey","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the no record locale key for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LocaleKey","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FailureLocaleKey","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the action failure locale key for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FailureLocaleKey","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"LocaleValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the no record locale value for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LocaleValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"FailureLocaleValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the action failure locale value for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FailureLocaleValue","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1162293968,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"NoRecord"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1792814421,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1667441573,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"NoRecord"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1434278718,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":649042924,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"NoRecord"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-367125292,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1946985591,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"NoRecord"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1718115799,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"NoRecord","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1953180775,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Virtualization"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"VirtualScrollSettings","TypeName":"Syncfusion.Blazor.DropDowns.VirtualScrollProperties<TItem>","Documentation":"\n            <summary>\n            Gets or sets the settings for the Virtualization component\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"VirtualScrollSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.VirtualScrollProperties<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnListClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.VirtualListActions<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the mouse <see cref=\"T:Microsoft.AspNetCore.Components.EventCallback\">EventCallBack</see> for the list item.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnListClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.VirtualListActions<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"Virtualization","Components.GenericTyped":"True"}},{"HashCode":-1445656520,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.Internal.Virtualization"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"VirtualScrollSettings","TypeName":"Syncfusion.Blazor.DropDowns.VirtualScrollProperties<TItem>","Documentation":"\n            <summary>\n            Gets or sets the settings for the Virtualization component\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"VirtualScrollSettings","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.VirtualScrollProperties<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnListClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.VirtualListActions<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the mouse <see cref=\"T:Microsoft.AspNetCore.Components.EventCallback\">EventCallBack</see> for the list item.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnListClick","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Syncfusion.Blazor.DropDowns.VirtualListActions<TItem>>","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<TItem>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<TItem>","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.Data.Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType","Common.GloballyQualifiedTypeName":"global::Syncfusion.Blazor.DropDowns.FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex","Common.GloballyQualifiedTypeName":"global::System.Double"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"Virtualization","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1324079827,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Virtualization"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"Virtualization","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":428891171,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.Virtualization"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.ItemTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"Virtualization","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1355700396,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Virtualization"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"Virtualization","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1739604573,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.Virtualization"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.GroupTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"Virtualization","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1391715585,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Virtualization"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"Virtualization","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1325411167,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.Virtualization"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.NoRecordsTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"Virtualization","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1820192569,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Virtualization"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"Virtualization","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1953129175,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.Virtualization"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.Virtualization<TItem>.ActionFailureTemplate","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns.Internal","Common.TypeNameIdentifier":"Virtualization","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-570326213,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that provides a cascading value to all descendant components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CascadingValue"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            The value to be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n             <summary>\n             Optionally gives a name to the provided value. Descendant components\n             will be able to receive the value by specifying this name.\n            \n             If no name is specified, then descendant components will receive the\n             value based the type of value they are requesting.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\n            performance optimization that allows the framework to skip setting up\n            change notifications. Set this flag only if you will not change\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"CascadingValue","Components.GenericTyped":"True"}},{"HashCode":-1427256128,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that provides a cascading value to all descendant components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.CascadingValue"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            The value to be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Common.GloballyQualifiedTypeName":"TValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n             <summary>\n             Optionally gives a name to the provided value. Descendant components\n             will be able to receive the value by specifying this name.\n            \n             If no name is specified, then descendant components will receive the\n             value based the type of value they are requesting.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"Name","Common.GloballyQualifiedTypeName":"global::System.String"}},{"Kind":"Components.Component","Name":"IsFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\n            performance optimization that allows the framework to skip setting up\n            change notifications. Set this flag only if you will not change\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFixed","Common.GloballyQualifiedTypeName":"global::System.Boolean"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"CascadingValue","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2019176430,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CascadingValue"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"CascadingValue","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-99784322,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.CascadingValue"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"CascadingValue","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1963668115,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.DynamicComponent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that renders another component dynamically according to its\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DynamicComponent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"System.Type","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the type of the component to be rendered. The supplied type must\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Parameters","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a dictionary of parameters to be passed to the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Parameters","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.DynamicComponent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"DynamicComponent"}},{"HashCode":-2015505674,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.DynamicComponent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that renders another component dynamically according to its\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.DynamicComponent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"System.Type","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the type of the component to be rendered. The supplied type must\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type","Common.GloballyQualifiedTypeName":"global::System.Type"}},{"Kind":"Components.Component","Name":"Parameters","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a dictionary of parameters to be passed to the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Parameters","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.DynamicComponent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"DynamicComponent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2014705676,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.LayoutView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified content inside the specified layout and any further\n            nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LayoutView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Layout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of the layout in which to display the content.\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Layout","Common.GloballyQualifiedTypeName":"global::System.Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"LayoutView"}},{"HashCode":-644325477,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.LayoutView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified content inside the specified layout and any further\n            nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.LayoutView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Layout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of the layout in which to display the content.\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Layout","Common.GloballyQualifiedTypeName":"global::System.Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"LayoutView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2070786262,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"LayoutView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"LayoutView","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1063252289,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.LayoutView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"LayoutView","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-295287261,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.RouteView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified page component, rendering it inside its layout\n            and any further nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DefaultLayout","Common.GloballyQualifiedTypeName":"global::System.Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.RouteView","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"RouteView"}},{"HashCode":929523394,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.RouteView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified page component, rendering it inside its layout\n            and any further nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.RouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DefaultLayout","Common.GloballyQualifiedTypeName":"global::System.Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.RouteView","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"RouteView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":24364686,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.Router","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that supplies route data corresponding to the current navigation state.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Router"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AppAssembly","TypeName":"System.Reflection.Assembly","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the assembly that should be searched for components matching the URI.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AppAssembly","Common.GloballyQualifiedTypeName":"global::System.Reflection.Assembly"}},{"Kind":"Components.Component","Name":"AdditionalAssemblies","TypeName":"System.Collections.Generic.IEnumerable<System.Reflection.Assembly>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional assemblies that should be searched for components\n            that can match URIs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAssemblies","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Reflection.Assembly>"}},{"Kind":"Components.Component","Name":"NotFound","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotFound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Found","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Found","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.RouteData>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Navigating","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigating","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnNavigateAsync","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>","Documentation":"\n            <summary>\n            Gets or sets a handler that should be called before navigating to a new page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNavigateAsync","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.NavigationContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PreferExactMatches","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\n            over wildcards.\n            <para>This property is obsolete and configuring it does nothing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PreferExactMatches","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router"}},{"HashCode":-868917091,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.Router","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that supplies route data corresponding to the current navigation state.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.Router"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AppAssembly","TypeName":"System.Reflection.Assembly","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the assembly that should be searched for components matching the URI.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AppAssembly","Common.GloballyQualifiedTypeName":"global::System.Reflection.Assembly"}},{"Kind":"Components.Component","Name":"AdditionalAssemblies","TypeName":"System.Collections.Generic.IEnumerable<System.Reflection.Assembly>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional assemblies that should be searched for components\n            that can match URIs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAssemblies","Common.GloballyQualifiedTypeName":"global::System.Collections.Generic.IEnumerable<global::System.Reflection.Assembly>"}},{"Kind":"Components.Component","Name":"NotFound","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotFound","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Found","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Found","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment<global::Microsoft.AspNetCore.Components.RouteData>","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Navigating","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigating","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.RenderFragment","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnNavigateAsync","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>","Documentation":"\n            <summary>\n            Gets or sets a handler that should be called before navigating to a new page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNavigateAsync","Common.GloballyQualifiedTypeName":"global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Routing.NavigationContext>","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PreferExactMatches","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\n            over wildcards.\n            <para>This property is obsolete and configuring it does nothing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PreferExactMatches","Common.GloballyQualifiedTypeName":"global::System.Boolean"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":395977800,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotFound","ParentTag":"Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1303430697,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotFound","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1702540883,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Found","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Found","ParentTag":"Router"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Found' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Found","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-210369553,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Found","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Found","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Found' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Found","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1969075404,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Navigating","ParentTag":"Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1966357993,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Navigating","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Routing","Common.TypeNameIdentifier":"Router","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-412348275,"Kind":"Components.EventHandler","Name":"onfocus","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocus","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocus:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocus:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocus"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocus' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocus' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1183441731,"Kind":"Components.EventHandler","Name":"onblur","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onblur","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onblur:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onblur:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onblur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onblur"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onblur' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onblur' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1244533523,"Kind":"Components.EventHandler","Name":"onfocusin","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocusin","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusin:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusin:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocusin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocusin"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusin' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocusin' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1943172950,"Kind":"Components.EventHandler","Name":"onfocusout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocusout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocusout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocusout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocusout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1669379088,"Kind":"Components.EventHandler","Name":"onmouseover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":206835795,"Kind":"Components.EventHandler","Name":"onmouseout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":810640233,"Kind":"Components.EventHandler","Name":"onmouseleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":388130126,"Kind":"Components.EventHandler","Name":"onmouseenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1703164961,"Kind":"Components.EventHandler","Name":"onmousemove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousemove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousemove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousemove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousemove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousemove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousemove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1539717881,"Kind":"Components.EventHandler","Name":"onmousedown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousedown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousedown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousedown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousedown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousedown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousedown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousedown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":2037212429,"Kind":"Components.EventHandler","Name":"onmouseup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1076801267,"Kind":"Components.EventHandler","Name":"onclick","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onclick","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onclick:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onclick:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onclick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onclick"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onclick' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onclick' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":884794329,"Kind":"Components.EventHandler","Name":"ondblclick","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondblclick","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondblclick:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondblclick:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondblclick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondblclick"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondblclick' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondblclick' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1538615901,"Kind":"Components.EventHandler","Name":"onwheel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onwheel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwheel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwheel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onwheel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>","Documentation":"Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onwheel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwheel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onwheel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.WheelEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-383152099,"Kind":"Components.EventHandler","Name":"onmousewheel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousewheel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousewheel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousewheel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousewheel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>","Documentation":"Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousewheel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousewheel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousewheel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.WheelEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":583382718,"Kind":"Components.EventHandler","Name":"oncontextmenu","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncontextmenu","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncontextmenu:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncontextmenu:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncontextmenu","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncontextmenu"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncontextmenu' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncontextmenu' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1496118296,"Kind":"Components.EventHandler","Name":"ondrag","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondrag","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrag:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrag:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondrag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondrag"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrag' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondrag' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1892667192,"Kind":"Components.EventHandler","Name":"ondragend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-695808398,"Kind":"Components.EventHandler","Name":"ondragenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":881656464,"Kind":"Components.EventHandler","Name":"ondragleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1675311030,"Kind":"Components.EventHandler","Name":"ondragover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1441981659,"Kind":"Components.EventHandler","Name":"ondragstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1321031139,"Kind":"Components.EventHandler","Name":"ondrop","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondrop","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrop:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrop:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondrop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondrop"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrop' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondrop' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":797422111,"Kind":"Components.EventHandler","Name":"onkeydown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeydown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeydown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeydown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeydown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeydown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeydown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeydown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-765211634,"Kind":"Components.EventHandler","Name":"onkeyup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeyup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeyup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeyup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeyup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeyup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeyup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeyup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1685080129,"Kind":"Components.EventHandler","Name":"onkeypress","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeypress","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeypress:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeypress:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeypress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeypress"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeypress' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeypress' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":700369429,"Kind":"Components.EventHandler","Name":"onchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.ChangeEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-144114499,"Kind":"Components.EventHandler","Name":"oninput","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oninput","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninput:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninput:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oninput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oninput"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninput' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oninput' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.ChangeEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-6567171,"Kind":"Components.EventHandler","Name":"oninvalid","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oninvalid","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninvalid:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninvalid:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oninvalid","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oninvalid"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninvalid' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oninvalid' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1160189933,"Kind":"Components.EventHandler","Name":"onreset","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onreset","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreset:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreset:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onreset","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onreset"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreset' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onreset' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-253871031,"Kind":"Components.EventHandler","Name":"onselect","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselect","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselect:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselect:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselect"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselect' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselect' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1693382503,"Kind":"Components.EventHandler","Name":"onselectstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselectstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselectstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselectstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselectstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1399289399,"Kind":"Components.EventHandler","Name":"onselectionchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselectionchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectionchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectionchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselectionchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselectionchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectionchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselectionchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1257688159,"Kind":"Components.EventHandler","Name":"onsubmit","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onsubmit","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsubmit:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsubmit:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onsubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onsubmit"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsubmit' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onsubmit' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":526616602,"Kind":"Components.EventHandler","Name":"onbeforecopy","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforecopy","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecopy:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecopy:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforecopy","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforecopy"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecopy' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforecopy' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-704514247,"Kind":"Components.EventHandler","Name":"onbeforecut","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforecut","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecut:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecut:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforecut","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforecut"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecut' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforecut' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1301262964,"Kind":"Components.EventHandler","Name":"onbeforepaste","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforepaste","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforepaste:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforepaste:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforepaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforepaste"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforepaste' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforepaste' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-943806315,"Kind":"Components.EventHandler","Name":"oncopy","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncopy","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncopy:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncopy:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncopy","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncopy"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncopy' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncopy' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1024736527,"Kind":"Components.EventHandler","Name":"oncut","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncut","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncut:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncut:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncut","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncut"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncut' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncut' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1564030866,"Kind":"Components.EventHandler","Name":"onpaste","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpaste","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpaste:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpaste:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpaste"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpaste' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpaste' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-245678027,"Kind":"Components.EventHandler","Name":"ontouchcancel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchcancel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchcancel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchcancel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchcancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchcancel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchcancel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchcancel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1303133076,"Kind":"Components.EventHandler","Name":"ontouchend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1167672914,"Kind":"Components.EventHandler","Name":"ontouchmove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchmove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchmove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchmove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchmove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchmove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchmove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchmove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1716506156,"Kind":"Components.EventHandler","Name":"ontouchstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1776231308,"Kind":"Components.EventHandler","Name":"ontouchenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-760395158,"Kind":"Components.EventHandler","Name":"ontouchleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":448925539,"Kind":"Components.EventHandler","Name":"ongotpointercapture","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ongotpointercapture","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ongotpointercapture"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ongotpointercapture' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ongotpointercapture' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1828352982,"Kind":"Components.EventHandler","Name":"onlostpointercapture","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onlostpointercapture","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onlostpointercapture"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onlostpointercapture' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onlostpointercapture' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-824984604,"Kind":"Components.EventHandler","Name":"onpointercancel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointercancel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointercancel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointercancel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointercancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointercancel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointercancel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointercancel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":512689634,"Kind":"Components.EventHandler","Name":"onpointerdown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerdown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerdown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerdown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerdown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerdown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerdown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerdown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-131639322,"Kind":"Components.EventHandler","Name":"onpointerenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-2081055617,"Kind":"Components.EventHandler","Name":"onpointerleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":671343776,"Kind":"Components.EventHandler","Name":"onpointermove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointermove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointermove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointermove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointermove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointermove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointermove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointermove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-906399437,"Kind":"Components.EventHandler","Name":"onpointerout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1673358071,"Kind":"Components.EventHandler","Name":"onpointerover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1883012605,"Kind":"Components.EventHandler","Name":"onpointerup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-445196629,"Kind":"Components.EventHandler","Name":"oncanplay","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncanplay","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplay:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplay:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncanplay","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncanplay"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplay' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncanplay' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1072288228,"Kind":"Components.EventHandler","Name":"oncanplaythrough","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncanplaythrough","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncanplaythrough"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplaythrough' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncanplaythrough' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":429038913,"Kind":"Components.EventHandler","Name":"oncuechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncuechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncuechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncuechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncuechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncuechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncuechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncuechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-857605877,"Kind":"Components.EventHandler","Name":"ondurationchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondurationchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondurationchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondurationchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondurationchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondurationchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondurationchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondurationchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1023041156,"Kind":"Components.EventHandler","Name":"onemptied","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onemptied","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onemptied:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onemptied:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onemptied","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onemptied"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onemptied' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onemptied' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-2113325282,"Kind":"Components.EventHandler","Name":"onpause","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpause","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpause:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpause:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpause","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpause"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpause' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpause' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1171829661,"Kind":"Components.EventHandler","Name":"onplay","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onplay","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplay:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplay:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onplay","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onplay"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplay' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onplay' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1924423103,"Kind":"Components.EventHandler","Name":"onplaying","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onplaying","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplaying:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplaying:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onplaying","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onplaying"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplaying' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onplaying' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":251218392,"Kind":"Components.EventHandler","Name":"onratechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onratechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onratechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onratechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onratechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onratechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onratechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onratechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1200360301,"Kind":"Components.EventHandler","Name":"onseeked","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onseeked","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeked:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeked:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onseeked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onseeked"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeked' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onseeked' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":870409781,"Kind":"Components.EventHandler","Name":"onseeking","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onseeking","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeking:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeking:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onseeking","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onseeking"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeking' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onseeking' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":2005397906,"Kind":"Components.EventHandler","Name":"onstalled","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onstalled","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstalled:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstalled:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onstalled","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onstalled"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstalled' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onstalled' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":148340652,"Kind":"Components.EventHandler","Name":"onstop","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onstop","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstop:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstop:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onstop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onstop"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstop' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onstop' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":17598829,"Kind":"Components.EventHandler","Name":"onsuspend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onsuspend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsuspend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsuspend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onsuspend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onsuspend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsuspend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onsuspend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1960382636,"Kind":"Components.EventHandler","Name":"ontimeupdate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontimeupdate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeupdate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeupdate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontimeupdate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontimeupdate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeupdate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontimeupdate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-901598092,"Kind":"Components.EventHandler","Name":"onvolumechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onvolumechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onvolumechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onvolumechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onvolumechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onvolumechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onvolumechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onvolumechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1685471538,"Kind":"Components.EventHandler","Name":"onwaiting","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onwaiting","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwaiting:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwaiting:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onwaiting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onwaiting"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwaiting' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onwaiting' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-623329157,"Kind":"Components.EventHandler","Name":"onloadstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-516077056,"Kind":"Components.EventHandler","Name":"ontimeout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontimeout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontimeout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontimeout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontimeout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":861748868,"Kind":"Components.EventHandler","Name":"onabort","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onabort","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onabort:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onabort:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onabort","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onabort"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onabort' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onabort' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1292834145,"Kind":"Components.EventHandler","Name":"onload","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onload","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onload:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onload:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onload","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onload"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onload' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onload' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-491267811,"Kind":"Components.EventHandler","Name":"onloadend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1274141778,"Kind":"Components.EventHandler","Name":"onprogress","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onprogress","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onprogress:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onprogress:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onprogress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onprogress"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onprogress' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onprogress' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1470710021,"Kind":"Components.EventHandler","Name":"onerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ErrorEventArgs>","Documentation":"Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ErrorEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":2097203272,"Kind":"Components.EventHandler","Name":"onactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1860614855,"Kind":"Components.EventHandler","Name":"onbeforeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-944834360,"Kind":"Components.EventHandler","Name":"onbeforedeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforedeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforedeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforedeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforedeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":985382823,"Kind":"Components.EventHandler","Name":"ondeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1227747450,"Kind":"Components.EventHandler","Name":"onended","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onended","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onended:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onended:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onended","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onended"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onended' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onended' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1608024556,"Kind":"Components.EventHandler","Name":"onfullscreenchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfullscreenchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfullscreenchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfullscreenchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1492855282,"Kind":"Components.EventHandler","Name":"onfullscreenerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfullscreenerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfullscreenerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfullscreenerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":561974861,"Kind":"Components.EventHandler","Name":"onloadeddata","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadeddata","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadeddata:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadeddata:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadeddata","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadeddata"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadeddata' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadeddata' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":143882370,"Kind":"Components.EventHandler","Name":"onloadedmetadata","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadedmetadata","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadedmetadata"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadedmetadata' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadedmetadata' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":807609890,"Kind":"Components.EventHandler","Name":"onpointerlockchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerlockchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerlockchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerlockchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":322499480,"Kind":"Components.EventHandler","Name":"onpointerlockerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerlockerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerlockerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerlockerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1310773309,"Kind":"Components.EventHandler","Name":"onreadystatechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onreadystatechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreadystatechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreadystatechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onreadystatechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onreadystatechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreadystatechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onreadystatechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":1337217167,"Kind":"Components.EventHandler","Name":"onscroll","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onscroll","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onscroll:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onscroll:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onscroll","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onscroll"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onscroll' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onscroll' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-1918318624,"Kind":"Components.EventHandler","Name":"ontoggle","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontoggle","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontoggle:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontoggle:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontoggle","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontoggle"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontoggle' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontoggle' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"EventHandlers"}},{"HashCode":-666102522,"Kind":"Components.Splat","Name":"Attributes","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Merges a collection of attributes into the current element or component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@attributes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Splat","Name":"@attributes","TypeName":"System.Object","Documentation":"Merges a collection of attributes into the current element or component.","Metadata":{"Common.PropertyName":"Attributes","Common.DirectiveAttribute":"True"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Splat","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Attributes"}},{"HashCode":-145164111,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;a&gt; elements.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"a","Attributes":[{"Name":"asp-action"}]},{"TagName":"a","Attributes":[{"Name":"asp-controller"}]},{"TagName":"a","Attributes":[{"Name":"asp-area"}]},{"TagName":"a","Attributes":[{"Name":"asp-page"}]},{"TagName":"a","Attributes":[{"Name":"asp-page-handler"}]},{"TagName":"a","Attributes":[{"Name":"asp-fragment"}]},{"TagName":"a","Attributes":[{"Name":"asp-host"}]},{"TagName":"a","Attributes":[{"Name":"asp-protocol"}]},{"TagName":"a","Attributes":[{"Name":"asp-route"}]},{"TagName":"a","Attributes":[{"Name":"asp-all-route-data"}]},{"TagName":"a","Attributes":[{"Name":"asp-route-","NameComparison":1}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-action","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the action method.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Action"}},{"Kind":"ITagHelper","Name":"asp-controller","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the controller.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Controller"}},{"Kind":"ITagHelper","Name":"asp-area","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the area.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Area"}},{"Kind":"ITagHelper","Name":"asp-page","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the page.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />\n            is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Page"}},{"Kind":"ITagHelper","Name":"asp-page-handler","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the page handler.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Route\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />\n            is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PageHandler"}},{"Kind":"ITagHelper","Name":"asp-protocol","TypeName":"System.String","Documentation":"\n            <summary>\n            The protocol for the URL, such as \"http\" or \"https\".\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Protocol"}},{"Kind":"ITagHelper","Name":"asp-host","TypeName":"System.String","Documentation":"\n            <summary>\n            The host name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Host"}},{"Kind":"ITagHelper","Name":"asp-fragment","TypeName":"System.String","Documentation":"\n            <summary>\n            The URL fragment name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Fragment"}},{"Kind":"ITagHelper","Name":"asp-route","TypeName":"System.String","Documentation":"\n            <summary>\n            Name of the route.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if one of <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Action\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Controller\" />, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Area\" />\n            or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper.Page\" /> is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Route"}},{"Kind":"ITagHelper","Name":"asp-all-route-data","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","IndexerNamePrefix":"asp-route-","IndexerTypeName":"System.String","Documentation":"\n            <summary>\n            Additional parameters for the route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteValues"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"AnchorTagHelper"}},{"HashCode":-2017601555,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> implementation targeting &lt;cache&gt; elements.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"cache"}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"priority","TypeName":"Microsoft.Extensions.Caching.Memory.CacheItemPriority?","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"T:Microsoft.Extensions.Caching.Memory.CacheItemPriority\" /> policy for the cache entry.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Priority"}},{"Kind":"ITagHelper","Name":"vary-by","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a <see cref=\"T:System.String\" /> to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryBy"}},{"Kind":"ITagHelper","Name":"vary-by-header","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByHeader"}},{"Kind":"ITagHelper","Name":"vary-by-query","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of query parameters to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByQuery"}},{"Kind":"ITagHelper","Name":"vary-by-route","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByRoute"}},{"Kind":"ITagHelper","Name":"vary-by-cookie","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of cookie names to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByCookie"}},{"Kind":"ITagHelper","Name":"vary-by-user","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in\n            <see cref=\"P:Microsoft.AspNetCore.Http.HttpContext.User\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByUser"}},{"Kind":"ITagHelper","Name":"vary-by-culture","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by request culture.\n            <para>\n            Setting this to <c>true</c> would result in the result to be varied by <see cref=\"P:System.Globalization.CultureInfo.CurrentCulture\" />\n            and <see cref=\"P:System.Globalization.CultureInfo.CurrentUICulture\" />.\n            </para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByCulture"}},{"Kind":"ITagHelper","Name":"expires-on","TypeName":"System.DateTimeOffset?","Documentation":"\n            <summary>\n            Gets or sets the exact <see cref=\"T:System.DateTimeOffset\" /> the cache entry should be evicted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpiresOn"}},{"Kind":"ITagHelper","Name":"expires-after","TypeName":"System.TimeSpan?","Documentation":"\n            <summary>\n            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpiresAfter"}},{"Kind":"ITagHelper","Name":"expires-sliding","TypeName":"System.TimeSpan?","Documentation":"\n            <summary>\n            Gets or sets the duration from last access that the cache entry should be evicted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpiresSliding"}},{"Kind":"ITagHelper","Name":"enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value which determines if the tag helper is enabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.CacheTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"CacheTagHelper"}},{"HashCode":-1000842291,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            A <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> that renders a Razor component.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"component","TagStructure":2,"Attributes":[{"Name":"type"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"params","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","IndexerNamePrefix":"param-","IndexerTypeName":"System.Object","Documentation":"\n            <summary>\n            Gets or sets values for component parameters.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Parameters"}},{"Kind":"ITagHelper","Name":"type","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the component type. This value is required.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ComponentType"}},{"Kind":"ITagHelper","Name":"render-mode","TypeName":"Microsoft.AspNetCore.Mvc.Rendering.RenderMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.RenderMode\" />\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RenderMode"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ComponentTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"ComponentTagHelper"}},{"HashCode":4232840,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> implementation targeting &lt;distributed-cache&gt; elements.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"distributed-cache","Attributes":[{"Name":"name"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a unique name to discriminate cached entries.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"ITagHelper","Name":"vary-by","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a <see cref=\"T:System.String\" /> to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryBy"}},{"Kind":"ITagHelper","Name":"vary-by-header","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of HTTP request headers to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByHeader"}},{"Kind":"ITagHelper","Name":"vary-by-query","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of query parameters to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByQuery"}},{"Kind":"ITagHelper","Name":"vary-by-route","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of route data parameters to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByRoute"}},{"Kind":"ITagHelper","Name":"vary-by-cookie","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a comma-delimited set of cookie names to vary the cached result by.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByCookie"}},{"Kind":"ITagHelper","Name":"vary-by-user","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by the Identity for the logged in\n            <see cref=\"P:Microsoft.AspNetCore.Http.HttpContext.User\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByUser"}},{"Kind":"ITagHelper","Name":"vary-by-culture","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that determines if the cached result is to be varied by request culture.\n            <para>\n            Setting this to <c>true</c> would result in the result to be varied by <see cref=\"P:System.Globalization.CultureInfo.CurrentCulture\" />\n            and <see cref=\"P:System.Globalization.CultureInfo.CurrentUICulture\" />.\n            </para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VaryByCulture"}},{"Kind":"ITagHelper","Name":"expires-on","TypeName":"System.DateTimeOffset?","Documentation":"\n            <summary>\n            Gets or sets the exact <see cref=\"T:System.DateTimeOffset\" /> the cache entry should be evicted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpiresOn"}},{"Kind":"ITagHelper","Name":"expires-after","TypeName":"System.TimeSpan?","Documentation":"\n            <summary>\n            Gets or sets the duration, from the time the cache entry was added, when it should be evicted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpiresAfter"}},{"Kind":"ITagHelper","Name":"expires-sliding","TypeName":"System.TimeSpan?","Documentation":"\n            <summary>\n            Gets or sets the duration from last access that the cache entry should be evicted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpiresSliding"}},{"Kind":"ITagHelper","Name":"enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value which determines if the tag helper is enabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.DistributedCacheTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"DistributedCacheTagHelper"}},{"HashCode":841944332,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;environment&gt; elements that conditionally renders\n            content based on the current value of <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            If the environment is not listed in the specified <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Names\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Include\" />,\n            or if it is in <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" />, the content will not be rendered.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"environment"}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"names","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of environment names in which the content should be rendered.\n            If the current environment is also in the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" /> list, the content will not be rendered.\n            </summary>\n            <remarks>\n            The specified environment names are compared case insensitively to the current value of\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Names"}},{"Kind":"ITagHelper","Name":"include","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of environment names in which the content should be rendered.\n            If the current environment is also in the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper.Exclude\" /> list, the content will not be rendered.\n            </summary>\n            <remarks>\n            The specified environment names are compared case insensitively to the current value of\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Include"}},{"Kind":"ITagHelper","Name":"exclude","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of environment names in which the content will not be rendered.\n            </summary>\n            <remarks>\n            The specified environment names are compared case insensitively to the current value of\n            <see cref=\"P:Microsoft.AspNetCore.Hosting.IHostingEnvironment.EnvironmentName\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Exclude"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"EnvironmentTagHelper"}},{"HashCode":-1374845942,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;button&gt; elements and &lt;input&gt; elements with\n            their <c>type</c> attribute set to <c>image</c> or <c>submit</c>.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"button","Attributes":[{"Name":"asp-action"}]},{"TagName":"button","Attributes":[{"Name":"asp-controller"}]},{"TagName":"button","Attributes":[{"Name":"asp-area"}]},{"TagName":"button","Attributes":[{"Name":"asp-page"}]},{"TagName":"button","Attributes":[{"Name":"asp-page-handler"}]},{"TagName":"button","Attributes":[{"Name":"asp-fragment"}]},{"TagName":"button","Attributes":[{"Name":"asp-route"}]},{"TagName":"button","Attributes":[{"Name":"asp-all-route-data"}]},{"TagName":"button","Attributes":[{"Name":"asp-route-","NameComparison":1}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-action"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-controller"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-area"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-page"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-page-handler"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-fragment"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-route"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-all-route-data"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"image","ValueComparison":1},{"Name":"asp-route-","NameComparison":1}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-action"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-controller"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-area"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-page"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-page-handler"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-fragment"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-route"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-all-route-data"}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"type","Value":"submit","ValueComparison":1},{"Name":"asp-route-","NameComparison":1}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-action","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the action method.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Action"}},{"Kind":"ITagHelper","Name":"asp-controller","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the controller.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Controller"}},{"Kind":"ITagHelper","Name":"asp-area","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the area.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Area"}},{"Kind":"ITagHelper","Name":"asp-page","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Page"}},{"Kind":"ITagHelper","Name":"asp-page-handler","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the page handler.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageHandler"}},{"Kind":"ITagHelper","Name":"asp-fragment","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the URL fragment.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Fragment"}},{"Kind":"ITagHelper","Name":"asp-route","TypeName":"System.String","Documentation":"\n            <summary>\n            Name of the route.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Action\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper.Controller\" /> is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Route"}},{"Kind":"ITagHelper","Name":"asp-all-route-data","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","IndexerNamePrefix":"asp-route-","IndexerTypeName":"System.String","Documentation":"\n            <summary>\n            Additional parameters for the route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteValues"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.FormActionTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"FormActionTagHelper"}},{"HashCode":-127896823,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;form&gt; elements.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"form"}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-action","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the action method.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Action"}},{"Kind":"ITagHelper","Name":"asp-controller","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the controller.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Controller"}},{"Kind":"ITagHelper","Name":"asp-area","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the area.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Area"}},{"Kind":"ITagHelper","Name":"asp-page","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Page"}},{"Kind":"ITagHelper","Name":"asp-page-handler","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the page handler.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageHandler"}},{"Kind":"ITagHelper","Name":"asp-antiforgery","TypeName":"System.Boolean?","Documentation":"\n            <summary>\n            Whether the antiforgery token should be generated.\n            </summary>\n            <value>Defaults to <c>false</c> if user provides an <c>action</c> attribute\n            or if the <c>method</c> is <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.FormMethod.Get\" />; <c>true</c> otherwise.</value>\n        ","Metadata":{"Common.PropertyName":"Antiforgery"}},{"Kind":"ITagHelper","Name":"asp-fragment","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the URL fragment.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Fragment"}},{"Kind":"ITagHelper","Name":"asp-route","TypeName":"System.String","Documentation":"\n            <summary>\n            Name of the route.\n            </summary>\n            <remarks>\n            Must be <c>null</c> if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Action\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper.Controller\" /> is non-<c>null</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Route"}},{"Kind":"ITagHelper","Name":"asp-all-route-data","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","IndexerNamePrefix":"asp-route-","IndexerTypeName":"System.String","Documentation":"\n            <summary>\n            Additional parameters for the route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteValues"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"FormTagHelper"}},{"HashCode":-1290579374,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;img&gt; elements that supports file versioning.\n            </summary>\n            <remarks>\n            The tag helper won't process for cases with just the 'src' attribute.\n            </remarks>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"img","TagStructure":2,"Attributes":[{"Name":"asp-append-version"},{"Name":"src"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"src","TypeName":"System.String","Documentation":"\n            <summary>\n            Source of the image.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Src"}},{"Kind":"ITagHelper","Name":"asp-append-version","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Value indicating if file version should be appended to the src urls.\n            </summary>\n            <remarks>\n            If <c>true</c> then a query string \"v\" with the encoded content of the file is added.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AppendVersion"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ImageTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"ImageTagHelper"}},{"HashCode":300777857,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;input&gt; elements with an <c>asp-for</c> attribute.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"asp-for"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For"}},{"Kind":"ITagHelper","Name":"asp-format","TypeName":"System.String","Documentation":"\n            <summary>\n            The format string (see <see href=\"https://msdn.microsoft.com/en-us/library/txafckwd.aspx\" />) used to format the\n            <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\" /> result. Sets the generated \"value\" attribute to that formatted string.\n            </summary>\n            <remarks>\n            Not used if the provided (see <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" />) or calculated \"type\" attribute value is\n            <c>checkbox</c>, <c>password</c>, or <c>radio</c>. That is, <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> is used when calling\n            <see cref=\"M:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator.GenerateTextBox(Microsoft.AspNetCore.Mvc.Rendering.ViewContext,Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExplorer,System.String,System.Object,System.String,System.Object)\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"ITagHelper","Name":"type","TypeName":"System.String","Documentation":"\n            <summary>\n            The type of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine the <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.IHtmlGenerator\" />\n            helper to call and the default <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> value. A default <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.Format\" /> is not calculated\n            if the provided (see <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" />) or calculated \"type\" attribute value is <c>checkbox</c>,\n            <c>hidden</c>, <c>password</c>, or <c>radio</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputTypeName"}},{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.For\" /> is\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"ITagHelper","Name":"value","TypeName":"System.String","Documentation":"\n            <summary>\n            The value of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine the generated \"checked\" attribute\n            if <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper.InputTypeName\" /> is \"radio\". Must not be <c>null</c> in that case.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"InputTagHelper"}},{"HashCode":-555015231,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;label&gt; elements with an <c>asp-for</c> attribute.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"label","Attributes":[{"Name":"asp-for"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"LabelTagHelper"}},{"HashCode":-195469401,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;link&gt; elements that supports fallback href paths.\n            </summary>\n            <remarks>\n            The tag helper won't process for cases with just the 'href' attribute.\n            </remarks>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-href-include"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-href-exclude"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-href"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-href-include"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-href-exclude"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-test-class"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-test-property"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-fallback-test-value"}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"asp-append-version"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"href","TypeName":"System.String","Documentation":"\n            <summary>\n            Address of the linked resource.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Href"}},{"Kind":"ITagHelper","Name":"asp-href-include","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to load.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HrefInclude"}},{"Kind":"ITagHelper","Name":"asp-href-exclude","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to exclude from loading.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.HrefInclude\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HrefExclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-href","TypeName":"System.String","Documentation":"\n            <summary>\n            The URL of a CSS stylesheet to fallback to in the case the primary one fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackHref"}},{"Kind":"ITagHelper","Name":"asp-suppress-fallback-integrity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Boolean value that determines if an integrity hash will be compared with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SuppressFallbackIntegrity"}},{"Kind":"ITagHelper","Name":"asp-append-version","TypeName":"System.Boolean?","Documentation":"\n            <summary>\n            Value indicating if file version should be appended to the href urls.\n            </summary>\n            <remarks>\n            If <c>true</c> then a query string \"v\" with the encoded content of the file is added.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AppendVersion"}},{"Kind":"ITagHelper","Name":"asp-fallback-href-include","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to fallback to in the case the primary\n            one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackHrefInclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-href-exclude","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of CSS stylesheets to exclude from the fallback list, in\n            the case the primary one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackHrefExclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-test-class","TypeName":"System.String","Documentation":"\n            <summary>\n            The class name defined in the stylesheet to use for the fallback test.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\" />,\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackTestClass"}},{"Kind":"ITagHelper","Name":"asp-fallback-test-property","TypeName":"System.String","Documentation":"\n            <summary>\n            The CSS property name to use for the fallback test.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestValue\" />,\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackTestProperty"}},{"Kind":"ITagHelper","Name":"asp-fallback-test-value","TypeName":"System.String","Documentation":"\n            <summary>\n            The CSS property value to use for the fallback test.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestClass\" /> and <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackTestProperty\" />,\n            and either <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHref\" /> or <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper.FallbackHrefInclude\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackTestValue"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.LinkTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"LinkTagHelper"}},{"HashCode":1192023020,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;option&gt; elements.\n            </summary>\n            <remarks>\n            This <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> works in conjunction with <see cref=\"T:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper\" />. It reads elements\n            content but does not modify that content. The only modification it makes is to add a <c>selected</c> attribute\n            in some cases.\n            </remarks>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"option"}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"value","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies a value for the &lt;option&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"OptionTagHelper"}},{"HashCode":327896149,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            Renders a partial view.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"partial","TagStructure":2,"Attributes":[{"Name":"name"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"\n            <summary>\n            The name or path of the partial view that is rendered to the response.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"ITagHelper","Name":"for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"\n            <summary>\n            An expression to be evaluated against the current model. Cannot be used together with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Model\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For"}},{"Kind":"ITagHelper","Name":"model","TypeName":"System.Object","Documentation":"\n            <summary>\n            The model to pass into the partial view. Cannot be used together with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.For\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model"}},{"Kind":"ITagHelper","Name":"optional","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When optional, executing the tag helper will no-op if the view cannot be located.\n            Otherwise will throw stating the view could not be found.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Optional"}},{"Kind":"ITagHelper","Name":"fallback-name","TypeName":"System.String","Documentation":"\n            <summary>\n            View to lookup if the view specified by <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper.Name\" /> cannot be located.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackName"}},{"Kind":"ITagHelper","Name":"view-data","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary","IndexerNamePrefix":"view-data-","IndexerTypeName":"System.Object","Documentation":"\n            <summary>\n            A <see cref=\"T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary\" /> to pass into the partial view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ViewData"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"PartialTagHelper"}},{"HashCode":676814577,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            A <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.TagHelper\" /> that saves the state of Razor components rendered on the page up to that point.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"persist-component-state","TagStructure":2}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"persist-mode","TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.PersistenceMode?","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper.PersistenceMode\" /> for the state to persist.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PersistenceMode"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.PersistComponentStateTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"PersistComponentStateTagHelper"}},{"HashCode":962839027,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;script&gt; elements that supports fallback src paths.\n            </summary>\n            <remarks>\n            The tag helper won't process for cases with just the 'src' attribute.\n            </remarks>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"script","Attributes":[{"Name":"asp-src-include"}]},{"TagName":"script","Attributes":[{"Name":"asp-src-exclude"}]},{"TagName":"script","Attributes":[{"Name":"asp-fallback-src"}]},{"TagName":"script","Attributes":[{"Name":"asp-fallback-src-include"}]},{"TagName":"script","Attributes":[{"Name":"asp-fallback-src-exclude"}]},{"TagName":"script","Attributes":[{"Name":"asp-fallback-test"}]},{"TagName":"script","Attributes":[{"Name":"asp-append-version"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"src","TypeName":"System.String","Documentation":"\n            <summary>\n            Address of the external script to use.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Src"}},{"Kind":"ITagHelper","Name":"asp-src-include","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to load.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SrcInclude"}},{"Kind":"ITagHelper","Name":"asp-src-exclude","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to exclude from loading.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.SrcInclude\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SrcExclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-src","TypeName":"System.String","Documentation":"\n            <summary>\n            The URL of a Script tag to fallback to in the case the primary one fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackSrc"}},{"Kind":"ITagHelper","Name":"asp-suppress-fallback-integrity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Boolean value that determines if an integrity hash will be compared with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrc\" /> value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SuppressFallbackIntegrity"}},{"Kind":"ITagHelper","Name":"asp-append-version","TypeName":"System.Boolean?","Documentation":"\n            <summary>\n            Value indicating if file version should be appended to src urls.\n            </summary>\n            <remarks>\n            A query string \"v\" with the encoded content of the file is added.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AppendVersion"}},{"Kind":"ITagHelper","Name":"asp-fallback-src-include","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to fallback to in the case the\n            primary one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackSrcInclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-src-exclude","TypeName":"System.String","Documentation":"\n            <summary>\n            A comma separated list of globbed file patterns of JavaScript scripts to exclude from the fallback list, in\n            the case the primary one fails.\n            The glob patterns are assessed relative to the application's 'webroot' setting.\n            Must be used in conjunction with <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper.FallbackSrcInclude\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackSrcExclude"}},{"Kind":"ITagHelper","Name":"asp-fallback-test","TypeName":"System.String","Documentation":"\n            <summary>\n            The script method defined in the primary script to use for the fallback test.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FallbackTestExpression"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ScriptTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"ScriptTagHelper"}},{"HashCode":-1304496591,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;select&gt; elements with <c>asp-for</c> and/or\n            <c>asp-items</c> attribute(s).\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"select","Attributes":[{"Name":"asp-for"}]},{"TagName":"select","Attributes":[{"Name":"asp-items"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For"}},{"Kind":"ITagHelper","Name":"asp-items","TypeName":"System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>","Documentation":"\n            <summary>\n            A collection of <see cref=\"T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem\" /> objects used to populate the &lt;select&gt; element with\n            &lt;optgroup&gt; and &lt;option&gt; elements.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper.For\" /> is\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Name"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"SelectTagHelper"}},{"HashCode":-1556932047,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting &lt;textarea&gt; elements with an <c>asp-for</c> attribute.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"textarea","Attributes":[{"Name":"asp-for"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"\n            <summary>\n            An expression to be evaluated against the current model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For"}},{"Kind":"ITagHelper","Name":"name","TypeName":"System.String","Documentation":"\n            <summary>\n            The name of the &lt;input&gt; element.\n            </summary>\n            <remarks>\n            Passed through to the generated HTML in all cases. Also used to determine whether <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper.For\" /> is\n            valid with an empty <see cref=\"P:Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression.Name\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Name"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.TextAreaTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"TextAreaTagHelper"}},{"HashCode":-1067790191,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting any HTML element with an <c>asp-validation-for</c>\n            attribute.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"span","Attributes":[{"Name":"asp-validation-for"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-validation-for","TypeName":"Microsoft.AspNetCore.Mvc.ViewFeatures.ModelExpression","Documentation":"\n            <summary>\n            Gets an expression to be evaluated against the current model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"ValidationMessageTagHelper"}},{"HashCode":-1744300995,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.TagHelpers","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting any HTML element with an <c>asp-validation-summary</c>\n            attribute.\n            </summary>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"div","Attributes":[{"Name":"asp-validation-summary"}]}],"BoundAttributes":[{"Kind":"ITagHelper","Name":"asp-validation-summary","TypeName":"Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary","IsEnum":true,"Documentation":"\n            <summary>\n            If <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.All\" /> or <see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.ModelOnly\" />, appends a validation\n            summary. Otherwise (<see cref=\"F:Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.None\" />, the default), this tag helper does nothing.\n            </summary>\n            <exception cref=\"T:System.ArgumentException\">\n            Thrown if setter is called with an undefined <see cref=\"P:Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper.ValidationSummary\" /> value e.g.\n            <c>(ValidationSummary)23</c>.\n            </exception>\n        ","Metadata":{"Common.PropertyName":"ValidationSummary"}}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.TagHelpers","Common.TypeNameIdentifier":"ValidationSummaryTagHelper"}},{"HashCode":-1460206721,"Kind":"ITagHelper","Name":"Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper","AssemblyName":"Microsoft.AspNetCore.Mvc.Razor","Documentation":"\n            <summary>\n            <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" /> implementation targeting elements containing attributes with URL expected values.\n            </summary>\n            <remarks>Resolves URLs starting with '~/' (relative to the application's 'webroot' setting) that are not\n            targeted by other <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" />s. Runs prior to other <see cref=\"T:Microsoft.AspNetCore.Razor.TagHelpers.ITagHelper\" />s to ensure\n            application-relative URLs are resolved.</remarks>\n        ","CaseSensitive":false,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"itemid","Value":"~/","ValueComparison":2}]},{"TagName":"a","Attributes":[{"Name":"href","Value":"~/","ValueComparison":2}]},{"TagName":"applet","Attributes":[{"Name":"archive","Value":"~/","ValueComparison":2}]},{"TagName":"area","TagStructure":2,"Attributes":[{"Name":"href","Value":"~/","ValueComparison":2}]},{"TagName":"audio","Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"base","TagStructure":2,"Attributes":[{"Name":"href","Value":"~/","ValueComparison":2}]},{"TagName":"blockquote","Attributes":[{"Name":"cite","Value":"~/","ValueComparison":2}]},{"TagName":"button","Attributes":[{"Name":"formaction","Value":"~/","ValueComparison":2}]},{"TagName":"del","Attributes":[{"Name":"cite","Value":"~/","ValueComparison":2}]},{"TagName":"embed","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"form","Attributes":[{"Name":"action","Value":"~/","ValueComparison":2}]},{"TagName":"html","Attributes":[{"Name":"manifest","Value":"~/","ValueComparison":2}]},{"TagName":"iframe","Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"img","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"img","TagStructure":2,"Attributes":[{"Name":"srcset","Value":"~/","ValueComparison":2}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"input","TagStructure":2,"Attributes":[{"Name":"formaction","Value":"~/","ValueComparison":2}]},{"TagName":"ins","Attributes":[{"Name":"cite","Value":"~/","ValueComparison":2}]},{"TagName":"link","TagStructure":2,"Attributes":[{"Name":"href","Value":"~/","ValueComparison":2}]},{"TagName":"menuitem","Attributes":[{"Name":"icon","Value":"~/","ValueComparison":2}]},{"TagName":"object","Attributes":[{"Name":"archive","Value":"~/","ValueComparison":2}]},{"TagName":"object","Attributes":[{"Name":"data","Value":"~/","ValueComparison":2}]},{"TagName":"q","Attributes":[{"Name":"cite","Value":"~/","ValueComparison":2}]},{"TagName":"script","Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"source","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"source","TagStructure":2,"Attributes":[{"Name":"srcset","Value":"~/","ValueComparison":2}]},{"TagName":"track","TagStructure":2,"Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"video","Attributes":[{"Name":"src","Value":"~/","ValueComparison":2}]},{"TagName":"video","Attributes":[{"Name":"poster","Value":"~/","ValueComparison":2}]}],"Metadata":{"Runtime.Name":"ITagHelper","Common.TypeName":"Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper","Common.TypeNamespace":"Microsoft.AspNetCore.Mvc.Razor.TagHelpers","Common.TypeNameIdentifier":"UrlResolutionTagHelper"}},{"HashCode":-1487122310,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@bind-","NameComparison":1,"Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-...","TypeName":"System.Collections.Generic.Dictionary<string, object>","IndexerNamePrefix":"@bind-","IndexerTypeName":"System.Object","Documentation":"Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the corresponding bind attribute. For example: <code>@bind-value:format=\"...\"</code> will apply a format string to the value specified in <code>@bind-value=\"...\"</code>. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-...' attribute.","Metadata":{"Common.PropertyName":"Event"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.Fallback":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Bind","Common.TypeNamespace":"Microsoft.AspNetCore.Components","Common.TypeNameIdentifier":"Bind"}},{"HashCode":1147187751,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":559463477,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"@bind-value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":1622794753,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"checkbox","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"checkbox","ValueComparison":1},{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_checked"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_checked"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-checked","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"checked","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"checkbox","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-652071802,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"text","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"text","ValueComparison":1},{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"text","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":261116556,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"number","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"number","ValueComparison":1},{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"number","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":499151024,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"number","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"number","ValueComparison":1},{"Name":"@bind-value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"number","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-883651903,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"date","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"date","ValueComparison":1},{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-dd","Components.Bind.TypeAttribute":"date","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-2097379632,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"date","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"date","ValueComparison":1},{"Name":"@bind-value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-dd","Components.Bind.TypeAttribute":"date","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":1007845740,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"datetime-local","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"datetime-local","ValueComparison":1},{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-ddTHH:mm:ss","Components.Bind.TypeAttribute":"datetime-local","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-625138988,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"datetime-local","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"datetime-local","ValueComparison":1},{"Name":"@bind-value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-ddTHH:mm:ss","Components.Bind.TypeAttribute":"datetime-local","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":806266141,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"month","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"month","ValueComparison":1},{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM","Components.Bind.TypeAttribute":"month","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":1357195673,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"month","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"month","ValueComparison":1},{"Name":"@bind-value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM","Components.Bind.TypeAttribute":"month","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-452568861,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"time","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"time","ValueComparison":1},{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"HH:mm:ss","Components.Bind.TypeAttribute":"time","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":1131320995,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"time","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"input","Attributes":[{"Name":"type","Value":"time","ValueComparison":1},{"Name":"@bind-value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"HH:mm:ss","Components.Bind.TypeAttribute":"time","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":1024954613,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"select","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"select","Attributes":[{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":1162736253,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"textarea","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"textarea","Attributes":[{"Name":"@bind:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}},{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Web","Common.TypeNameIdentifier":"BindAttributes"}},{"HashCode":-916514201,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfColorPicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfColorPicker","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfColorPicker"}},{"HashCode":159076464,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfColorPicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Inputs.SfColorPicker","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfColorPicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-767110193,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMaskedTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfMaskedTextBox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfMaskedTextBox"}},{"HashCode":1750952799,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfMaskedTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-934841125,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NumericTextBoxEvents","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"NumericTextBoxEvents","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"NumericTextBoxEvents"}},{"HashCode":1772380910,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"NumericTextBoxEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1581014442,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfNumericTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfNumericTextBox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfNumericTextBox"}},{"HashCode":-1986309132,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfNumericTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Inputs.SfNumericTextBox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfNumericTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-747871882,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfRating","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfRating","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfRating","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Double>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfRating"}},{"HashCode":-732031408,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfRating","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfRating","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Inputs.SfRating","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Double>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfRating","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":370516986,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSlider","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfSlider","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSlider"}},{"HashCode":589469073,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfSlider","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Inputs.SfSlider","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfSlider","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":111581802,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfTextBox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfTextBox"}},{"HashCode":747206168,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Inputs.SfTextBox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfTextBox","Common.TypeNamespace":"Syncfusion.Blazor.Inputs","Common.TypeNameIdentifier":"SfTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-448246422,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfInputBase","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfInputBase","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"SfInputBase"}},{"HashCode":644228768,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","Common.TypeNamespace":"Syncfusion.Blazor.Inputs.Internal","Common.TypeNameIdentifier":"SfInputBase","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-535491811,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputCheckbox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"InputCheckbox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputCheckbox"}},{"HashCode":1884683335,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputCheckbox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1413158779,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputDate","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"InputDate","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputDate"}},{"HashCode":-434904083,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputDate","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Microsoft.AspNetCore.Components.Forms.InputDate","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputDate","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1343397716,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputNumber","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"InputNumber","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputNumber"}},{"HashCode":1598337077,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputNumber","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Microsoft.AspNetCore.Components.Forms.InputNumber","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputNumber","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-965874919,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadioGroup","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"InputRadioGroup","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup"}},{"HashCode":-799976979,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputRadioGroup","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1432855956,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"InputSelect","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect"}},{"HashCode":-1373758094,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Microsoft.AspNetCore.Components.Forms.InputSelect","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputSelect","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-369432729,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputText","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"InputText","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputText"}},{"HashCode":-1713884350,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputText","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Microsoft.AspNetCore.Components.Forms.InputText","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputText","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":949592492,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputTextArea","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"InputTextArea","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputTextArea"}},{"HashCode":-1089685072,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Common.TypeNamespace":"Microsoft.AspNetCore.Components.Forms","Common.TypeNameIdentifier":"InputTextArea","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":646585147,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Spinner.SfSpinner","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSpinner","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfSpinner","Attributes":[{"Name":"@bind-Visible:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Visible:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SfSpinner"}},{"HashCode":-1596980052,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Spinner.SfSpinner","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.SfSpinner","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Spinner.SfSpinner","Attributes":[{"Name":"@bind-Visible:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Visible:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner","Common.TypeNamespace":"Syncfusion.Blazor.Spinner","Common.TypeNameIdentifier":"SfSpinner","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":953524482,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ButtonGroupButton","Attributes":[{"Name":"@bind-Selected","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"ButtonGroupButton","Attributes":[{"Name":"@bind-Selected:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Selected:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Selected"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Selected","Components.Bind.ChangeAttribute":"SelectedChanged","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ButtonGroupButton"}},{"HashCode":1933052074,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","Attributes":[{"Name":"@bind-Selected","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","Attributes":[{"Name":"@bind-Selected:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Selected:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Selected"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Selected","Components.Bind.ChangeAttribute":"SelectedChanged","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","Common.TypeNamespace":"Syncfusion.Blazor.SplitButtons","Common.TypeNameIdentifier":"ButtonGroupButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":211126990,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCheckBox","Attributes":[{"Name":"@bind-Indeterminate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfCheckBox","Attributes":[{"Name":"@bind-Indeterminate:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Indeterminate:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Indeterminate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Indeterminate"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Indeterminate","Components.Bind.ChangeAttribute":"IndeterminateChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox"}},{"HashCode":-1686724594,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCheckBox","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfCheckBox","Attributes":[{"Name":"@bind-Checked:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Checked:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox"}},{"HashCode":-1966976941,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfCheckBox","Attributes":[{"Name":"@bind-Indeterminate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Buttons.SfCheckBox","Attributes":[{"Name":"@bind-Indeterminate:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Indeterminate:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Indeterminate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Indeterminate"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Indeterminate","Components.Bind.ChangeAttribute":"IndeterminateChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":966039640,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfCheckBox","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Buttons.SfCheckBox","Attributes":[{"Name":"@bind-Checked:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Checked:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfCheckBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1774217490,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfChip","Attributes":[{"Name":"@bind-SelectedChips","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfChip","Attributes":[{"Name":"@bind-SelectedChips:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-SelectedChips:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedChips","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedChips"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedChips","Components.Bind.ChangeAttribute":"SelectedChipsChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip"}},{"HashCode":774205308,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfChip","Attributes":[{"Name":"@bind-SelectedChips","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Buttons.SfChip","Attributes":[{"Name":"@bind-SelectedChips:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-SelectedChips:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedChips","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedChips"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedChips","Components.Bind.ChangeAttribute":"SelectedChipsChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfChip","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":74557082,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfRadioButton","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfRadioButton","Attributes":[{"Name":"@bind-Checked:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Checked:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton"}},{"HashCode":1114498870,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfRadioButton","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Buttons.SfRadioButton","Attributes":[{"Name":"@bind-Checked:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Checked:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfRadioButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2056008231,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSpeedDial","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfSpeedDial","Attributes":[{"Name":"@bind-Visible:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Visible:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial"}},{"HashCode":1390971983,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Attributes":[{"Name":"@bind-Visible:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Visible:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSpeedDial","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-303260696,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSwitch","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfSwitch","Attributes":[{"Name":"@bind-Checked:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Checked:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch"}},{"HashCode":-1130828344,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfSwitch","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Buttons.SfSwitch","Attributes":[{"Name":"@bind-Checked:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Checked:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Common.TypeNamespace":"Syncfusion.Blazor.Buttons","Common.TypeNameIdentifier":"SfSwitch","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1164011717,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.SfMediaQuery","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"Binds the provided expression to the 'ActiveBreakpoint' property and a change event delegate to the 'ActiveBreakpointChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMediaQuery","Attributes":[{"Name":"@bind-ActiveBreakpoint","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfMediaQuery","Attributes":[{"Name":"@bind-ActiveBreakpoint:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-ActiveBreakpoint:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ActiveBreakpoint","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'ActiveBreakpoint' property and a change event delegate to the 'ActiveBreakpointChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ActiveBreakpoint"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ActiveBreakpoint","Components.Bind.ChangeAttribute":"ActiveBreakpointChanged","Common.TypeName":"Syncfusion.Blazor.SfMediaQuery","Common.TypeNamespace":"Syncfusion.Blazor","Common.TypeNameIdentifier":"SfMediaQuery"}},{"HashCode":983543769,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.SfMediaQuery","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"Binds the provided expression to the 'ActiveBreakpoint' property and a change event delegate to the 'ActiveBreakpointChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SfMediaQuery","Attributes":[{"Name":"@bind-ActiveBreakpoint","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.SfMediaQuery","Attributes":[{"Name":"@bind-ActiveBreakpoint:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-ActiveBreakpoint:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ActiveBreakpoint","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'ActiveBreakpoint' property and a change event delegate to the 'ActiveBreakpointChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ActiveBreakpoint"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ActiveBreakpoint","Components.Bind.ChangeAttribute":"ActiveBreakpointChanged","Common.TypeName":"Syncfusion.Blazor.SfMediaQuery","Common.TypeNamespace":"Syncfusion.Blazor","Common.TypeNameIdentifier":"SfMediaQuery","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2146838374,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Notifications.SfMessage","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMessage","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfMessage","Attributes":[{"Name":"@bind-Visible:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Visible:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Notifications.SfMessage","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfMessage"}},{"HashCode":935831603,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Notifications.SfMessage","AssemblyName":"Syncfusion.Blazor.Notifications","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Notifications.SfMessage","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Notifications.SfMessage","Attributes":[{"Name":"@bind-Visible:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Visible:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Notifications.SfMessage","Common.TypeNamespace":"Syncfusion.Blazor.Notifications","Common.TypeNameIdentifier":"SfMessage","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-214997669,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.CalendarBase<T>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBase","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"CalendarBase","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<T>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"CalendarBase"}},{"HashCode":1642026326,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.CalendarBase<T>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.CalendarBase","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Calendars.CalendarBase","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<T>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarBase<T>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"CalendarBase","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-14810463,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Values' property and a change event delegate to the 'ValuesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCalendar","Attributes":[{"Name":"@bind-Values","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfCalendar","Attributes":[{"Name":"@bind-Values:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Values:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Values","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"Binds the provided expression to the 'Values' property and a change event delegate to the 'ValuesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Values"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Values","Components.Bind.ChangeAttribute":"ValuesChanged","Components.Bind.ExpressionAttribute":"ValuesExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar"}},{"HashCode":-617120691,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCalendar","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfCalendar","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar"}},{"HashCode":1223180754,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Values' property and a change event delegate to the 'ValuesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfCalendar","Attributes":[{"Name":"@bind-Values","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Calendars.SfCalendar","Attributes":[{"Name":"@bind-Values:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Values:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Values","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"Binds the provided expression to the 'Values' property and a change event delegate to the 'ValuesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Values"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Values","Components.Bind.ChangeAttribute":"ValuesChanged","Components.Bind.ExpressionAttribute":"ValuesExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1494268097,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfCalendar","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Calendars.SfCalendar","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfCalendar","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1461777155,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDatePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfDatePicker","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDatePicker"}},{"HashCode":573119617,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDatePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Calendars.SfDatePicker","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDatePicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1015772114,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'EndDate' property and a change event delegate to the 'EndDateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateRangePicker","Attributes":[{"Name":"@bind-EndDate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfDateRangePicker","Attributes":[{"Name":"@bind-EndDate:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-EndDate:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-EndDate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'EndDate' property and a change event delegate to the 'EndDateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"EndDate"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"EndDate","Components.Bind.ChangeAttribute":"EndDateChanged","Components.Bind.ExpressionAttribute":"EndDateExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker"}},{"HashCode":251690504,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'StartDate' property and a change event delegate to the 'StartDateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateRangePicker","Attributes":[{"Name":"@bind-StartDate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfDateRangePicker","Attributes":[{"Name":"@bind-StartDate:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-StartDate:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-StartDate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'StartDate' property and a change event delegate to the 'StartDateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"StartDate"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"StartDate","Components.Bind.ChangeAttribute":"StartDateChanged","Components.Bind.ExpressionAttribute":"StartDateExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker"}},{"HashCode":-1426997543,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'EndDate' property and a change event delegate to the 'EndDateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateRangePicker","Attributes":[{"Name":"@bind-EndDate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Calendars.SfDateRangePicker","Attributes":[{"Name":"@bind-EndDate:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-EndDate:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-EndDate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'EndDate' property and a change event delegate to the 'EndDateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"EndDate"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"EndDate","Components.Bind.ChangeAttribute":"EndDateChanged","Components.Bind.ExpressionAttribute":"EndDateExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-584979524,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'StartDate' property and a change event delegate to the 'StartDateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateRangePicker","Attributes":[{"Name":"@bind-StartDate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Calendars.SfDateRangePicker","Attributes":[{"Name":"@bind-StartDate:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-StartDate:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-StartDate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'StartDate' property and a change event delegate to the 'StartDateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"StartDate"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"StartDate","Components.Bind.ChangeAttribute":"StartDateChanged","Components.Bind.ExpressionAttribute":"StartDateExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateRangePicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-412340679,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateTimePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfDateTimePicker","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateTimePicker"}},{"HashCode":1076229796,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateTimePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Calendars.SfDateTimePicker","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfDateTimePicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-311708792,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTimePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfTimePicker","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfTimePicker"}},{"HashCode":230819052,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfTimePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Calendars.SfTimePicker","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars","Common.TypeNameIdentifier":"SfTimePicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1400481501,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'MultiValues' property and a change event delegate to the 'MultiValuesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBaseRender","Attributes":[{"Name":"@bind-MultiValues","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"CalendarBaseRender","Attributes":[{"Name":"@bind-MultiValues:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-MultiValues:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-MultiValues","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"Binds the provided expression to the 'MultiValues' property and a change event delegate to the 'MultiValuesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"MultiValues"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"MultiValues","Components.Bind.ChangeAttribute":"MultiValuesChanged","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarBaseRender"}},{"HashCode":-1694302982,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBaseRender","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"CalendarBaseRender","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarBaseRender"}},{"HashCode":-1564846123,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'MultiValues' property and a change event delegate to the 'MultiValuesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender","Attributes":[{"Name":"@bind-MultiValues","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender","Attributes":[{"Name":"@bind-MultiValues:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-MultiValues:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-MultiValues","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"Binds the provided expression to the 'MultiValues' property and a change event delegate to the 'MultiValuesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"MultiValues"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"MultiValues","Components.Bind.ChangeAttribute":"MultiValuesChanged","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarBaseRender","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":832142066,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarBaseRender","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":818454103,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarDayCell","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"CalendarDayCell","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarDayCell"}},{"HashCode":2114536318,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarDayCell","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":140288278,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarTableHeader","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"CalendarTableHeader","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarTableHeader"}},{"HashCode":-605899180,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","Common.TypeNamespace":"Syncfusion.Blazor.Calendars.Internal","Common.TypeNameIdentifier":"CalendarTableHeader","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1805655830,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Popups.SfDialog","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDialog","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfDialog","Attributes":[{"Name":"@bind-Visible:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Visible:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialog"}},{"HashCode":-2045459781,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Popups.SfDialog","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.SfDialog","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.Popups.SfDialog","Attributes":[{"Name":"@bind-Visible:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Visible:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog","Common.TypeNamespace":"Syncfusion.Blazor.Popups","Common.TypeNameIdentifier":"SfDialog","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-221079638,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfAutoComplete","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfAutoComplete","Attributes":[{"Name":"@bind-Index:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Index:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete"}},{"HashCode":-728351313,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfAutoComplete","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfAutoComplete","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete"}},{"HashCode":-136458073,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfAutoComplete","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.DropDowns.SfAutoComplete","Attributes":[{"Name":"@bind-Index:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Index:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-649711334,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfAutoComplete","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.DropDowns.SfAutoComplete","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfAutoComplete","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-48285489,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfComboBox","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfComboBox","Attributes":[{"Name":"@bind-Index:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Index:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox"}},{"HashCode":2113678351,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfComboBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfComboBox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox"}},{"HashCode":199776444,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfComboBox","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.DropDowns.SfComboBox","Attributes":[{"Name":"@bind-Index:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Index:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1705943450,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfComboBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.DropDowns.SfComboBox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfComboBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":904311423,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownList","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfDropDownList","Attributes":[{"Name":"@bind-Index:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Index:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList"}},{"HashCode":168932104,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownList","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfDropDownList","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList"}},{"HashCode":-954826049,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfDropDownList","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.DropDowns.SfDropDownList","Attributes":[{"Name":"@bind-Index:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Index:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1338918824,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfDropDownList","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.DropDowns.SfDropDownList","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfDropDownList","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2024851311,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfListBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfListBox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox"}},{"HashCode":-1945967588,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfListBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.DropDowns.SfListBox","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfListBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1383295508,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMultiSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"SfMultiSelect","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect"}},{"HashCode":-1421619158,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfMultiSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"Syncfusion.Blazor.DropDowns.SfMultiSelect","Attributes":[{"Name":"@bind-Value:get","Metadata":{"Common.DirectiveAttribute":"True"}},{"Name":"@bind-Value:set","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"},"BoundAttributeParameters":[{"Name":"get","TypeName":"System.Object","Documentation":"Specifies the expression to use for binding the value to the attribute.","Metadata":{"Common.PropertyName":"Get","Components.Bind.AlternativeNotation":"True"}},{"Name":"set","TypeName":"System.Delegate","Documentation":"Specifies the expression to use for updating the bound value when a new value is available.","Metadata":{"Common.PropertyName":"Set"}},{"Name":"after","TypeName":"System.Delegate","Documentation":"Specifies an action to run after the new value has been set.","Metadata":{"Common.PropertyName":"After"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","Common.TypeNamespace":"Syncfusion.Blazor.DropDowns","Common.TypeNameIdentifier":"SfMultiSelect","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":957713645,"Kind":"Components.Ref","Name":"Ref","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Populates the specified field or property with a reference to the element or component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ref","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Ref","Name":"@ref","TypeName":"System.Object","Documentation":"Populates the specified field or property with a reference to the element or component.","Metadata":{"Common.PropertyName":"Ref","Common.DirectiveAttribute":"True"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Ref","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Ref"}},{"HashCode":-1148481321,"Kind":"Components.Key","Name":"Key","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@key","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Key","Name":"@key","TypeName":"System.Object","Documentation":"Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.","Metadata":{"Common.PropertyName":"Key","Common.DirectiveAttribute":"True"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Key","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Key"}}],"CSharpLanguageVersion":1100},"RootNamespace":"BroadwayShows.Blazor","Documents":[{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Shared\\NavMenu.razor","TargetPath":"Shared\\NavMenu.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\Error.cshtml","TargetPath":"Pages\\Error.cshtml","FileKind":"mvc"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\Login.cshtml","TargetPath":"Pages\\Login.cshtml","FileKind":"mvc"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\App.razor","TargetPath":"App.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\Ticket.razor","TargetPath":"Pages\\Ticket.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\Logout.cshtml","TargetPath":"Pages\\Logout.cshtml","FileKind":"mvc"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\Admin\\Remove\\RemoveTicketSales.razor","TargetPath":"Pages\\Admin\\Remove\\RemoveTicketSales.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\Admin\\Search\\SearchCastCrew.razor","TargetPath":"Pages\\Admin\\Search\\SearchCastCrew.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\Admin\\RemoveAttributes.razor","TargetPath":"Pages\\Admin\\RemoveAttributes.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\Admin\\Update\\UpdateTicketSales.razor","TargetPath":"Pages\\Admin\\Update\\UpdateTicketSales.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\Index.razor","TargetPath":"Pages\\Index.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\Admin\\Admin.razor","TargetPath":"Pages\\Admin\\Admin.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\SearchShows.razor","TargetPath":"Pages\\SearchShows.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\_Host.cshtml","TargetPath":"Pages\\_Host.cshtml","FileKind":"mvc"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\About.razor","TargetPath":"Pages\\About.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\Search.razor","TargetPath":"Pages\\Search.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\SearchResults.razor","TargetPath":"Pages\\SearchResults.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Shared\\MainLayout.razor","TargetPath":"Shared\\MainLayout.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Shared\\AccessControl.razor","TargetPath":"Shared\\AccessControl.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\_Imports.razor","TargetPath":"_Imports.razor","FileKind":"componentImport"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\Admin\\UpdateAttributes.razor","TargetPath":"Pages\\Admin\\UpdateAttributes.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\Admin\\SearchAttributes.razor","TargetPath":"Pages\\Admin\\SearchAttributes.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\ProcessPayment.razor","TargetPath":"Pages\\ProcessPayment.razor","FileKind":"component"},{"FilePath":"C:\\Users\\brand\\OneDrive\\Documents\\GitHub\\BroadwayShows-CEN4090L\\BroadwayShows.Blazor\\Pages\\Admin\\AddAttributes.razor","TargetPath":"Pages\\Admin\\AddAttributes.razor","FileKind":"component"}],"SerializationFormat":"0.3"}