// <auto-generated />
using System;
using BroadwayShows.Library.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BroadwayShows.Library.Migrations
{
    [DbContext(typeof(BroadwayShowsContext))]
    [Migration("20231205043822_AdjustedReleaseDate")]
    partial class AdjustedReleaseDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BroadwayShows.Library.Models.CastCrew", b =>
                {
                    b.Property<int>("SSN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SSN"));

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShowId")
                        .HasColumnType("int");

                    b.Property<int>("TheaterId")
                        .HasColumnType("int");

                    b.Property<int>("WorkingPositionID")
                        .HasColumnType("int");

                    b.HasKey("SSN");

                    b.HasIndex("ShowId");

                    b.HasIndex("TheaterId");

                    b.HasIndex("WorkingPositionID");

                    b.ToTable("CastCrews");
                });

            modelBuilder.Entity("BroadwayShows.Library.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BroadwayShows.Library.Models.Shows", b =>
                {
                    b.Property<int>("ShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowId"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ShowId");

                    b.HasIndex("GenreId");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("BroadwayShows.Library.Models.Theater", b =>
                {
                    b.Property<int>("TheaterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TheaterId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.HasKey("TheaterId");

                    b.ToTable("Theaters");
                });

            modelBuilder.Entity("BroadwayShows.Library.Models.TicketSales", b =>
                {
                    b.Property<int>("TicketNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketNumber"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfTickets")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ShowId")
                        .HasColumnType("int");

                    b.Property<int>("TheaterId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("TicketNumber");

                    b.HasIndex("ShowId");

                    b.HasIndex("TheaterId");

                    b.ToTable("TicketSales");
                });

            modelBuilder.Entity("BroadwayShows.Library.Models.WorkingPosition", b =>
                {
                    b.Property<int>("WorkingPositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkingPositionID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkingPositionID");

                    b.ToTable("WorkingPositions");
                });

            modelBuilder.Entity("BroadwayShows.Library.Models.CastCrew", b =>
                {
                    b.HasOne("BroadwayShows.Library.Models.Shows", "Show")
                        .WithMany("CastCrews")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BroadwayShows.Library.Models.Theater", "Theater")
                        .WithMany("CastCrews")
                        .HasForeignKey("TheaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BroadwayShows.Library.Models.WorkingPosition", "WorkingPosition")
                        .WithMany("CastCrews")
                        .HasForeignKey("WorkingPositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");

                    b.Navigation("Theater");

                    b.Navigation("WorkingPosition");
                });

            modelBuilder.Entity("BroadwayShows.Library.Models.Shows", b =>
                {
                    b.HasOne("BroadwayShows.Library.Models.Genre", "Genre")
                        .WithMany("Shows")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BroadwayShows.Library.Models.TicketSales", b =>
                {
                    b.HasOne("BroadwayShows.Library.Models.Shows", "Show")
                        .WithMany("TicketSales")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BroadwayShows.Library.Models.Theater", "Theater")
                        .WithMany("TicketSales")
                        .HasForeignKey("TheaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");

                    b.Navigation("Theater");
                });

            modelBuilder.Entity("BroadwayShows.Library.Models.Genre", b =>
                {
                    b.Navigation("Shows");
                });

            modelBuilder.Entity("BroadwayShows.Library.Models.Shows", b =>
                {
                    b.Navigation("CastCrews");

                    b.Navigation("TicketSales");
                });

            modelBuilder.Entity("BroadwayShows.Library.Models.Theater", b =>
                {
                    b.Navigation("CastCrews");

                    b.Navigation("TicketSales");
                });

            modelBuilder.Entity("BroadwayShows.Library.Models.WorkingPosition", b =>
                {
                    b.Navigation("CastCrews");
                });
#pragma warning restore 612, 618
        }
    }
}
