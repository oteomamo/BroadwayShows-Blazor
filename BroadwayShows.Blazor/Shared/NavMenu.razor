@using System.Security.Claims;
@using BroadwayShows.Blazor.Account;
@inject AuthenticationStateProvider AuthenticationState


<nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom box-shadow">
    <div class="container d-flex justify-content-between">
        <!-- Title in the middle -->
        <div class="flex-grow-1 text-center">
            <a class="navbar-brand d-inline-block w-100" href="">Broadway Shows</a>
        </div>

        <!-- Buttons on the right -->
        <div class="ml-auto">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/" Match="NavLinkMatch.All"><span class="oi oi-home" aria-hidden="true"></span> Home</NavLink>
                </li>
                <ul class="nav navbar-nav navbar-right">
                    @if (IsAuthenticated)
                    {
                        <li><img src="@UserProfile.ProfileImage" alt="@UserProfile.Name" /></li>
                        <li><a href="/Account/Profile">Hello @UserProfile.Name!</a></li>
                        <li><a id="qsLogoutBtn" href="/Account/Logout">Logout</a></li>
                    }
                    else
                    {
                        <li><a id="qsLoginBtn" href="/Account/Login">Login</a></li>
                    }
                </ul>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/about" Match="NavLinkMatch.All"><span class=" oi oi-info" aria-hidden="true"></span> About</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All"><span class="oi oi-envelope-closed" aria-hidden="true"></span> Contact</NavLink>
                </li>
            </ul>
        </div>
    </div>
</nav>



@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}


@code {
    private bool IsAuthenticated { get; set; }
    private UserProfile UserProfile { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = await GetUser();
        IsAuthenticated = user.Identity.IsAuthenticated;

        // TODO: Fetch UserProfile data from an API or some other means.
        UserProfile = new UserProfile
            {
                Name = user.Identity.Name,
                EmailAddress = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value,
                ProfileImage = user.Claims.FirstOrDefault(c => c.Type == "picture")?.Value
            };
    }

    private async Task<ClaimsPrincipal> GetUser()
    {
        var authState = await AuthenticationState.GetAuthenticationStateAsync();
        return authState.User;
    }
}