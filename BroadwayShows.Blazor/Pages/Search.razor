@page "/search"
@* @using BroadwayShows.Library.Services
@inject ShowsService ShowsService
@inject TheaterService TheaterService
@inject TicketSalesService TicketSalesService
@inject CastCrewService CastCrewService
@inject NavigationManager NavigationManager

@inject TicketDataService TicketDataService


<div class="container mt-5">

    <h3 class="mb-4">Search for a Show</h3>

    <!-- Row for Show selection -->
    <div class="row mb-3">
        <div class="col">
            <label for="showSelection">Search a Show:</label>
            <select id="showSelection" class="form-control" @bind="selectedShowName" @bind:event="oninput" @onchange="UpdateTheatersBasedOnShow">
                <option value="all">All Shows</option>
                @if (shows != null)
                {
                    foreach (var show in shows)
                    {
                        <option value="@show.Name">@show.Name</option>
                    }
                }
                else
                {
                    <option>Loading show names...</option>
                }
            </select>

        </div>
    </div>


    <div class="row mb-3">
        <div class="col">
            <label for="theaterSelection">Select Theater:</label>
            <select id="theaterSelection" class="form-control" @bind="selectedTheaterName" @bind:event="oninput" @onchange="UpdateTimesBasedOnSelection">
                <option value="all">All Theaters</option>
                @if (theaters != null)
                {
                    foreach (var theater in theaters)
                    {
                        <option value="@theater">@theater</option>
                    }
                }
                else
                {
                    <option>Loading theater names...</option>
                }
            </select>
        </div>
    </div>



    <div class="row mb-3">
        <div class="col">
            <label for="startDate">From:</label>
            <input type="date" id="startDate" class="form-control" @bind="startDate" @bind:event="oninput" @onchange="UpdateTimesBasedOnSelection">
        </div>
        <div class="col">
            <label for="endDate">Till:</label>
            <input type="date" id="endDate" class="form-control" @bind="endDate" @bind:event="oninput" @onchange="UpdateTimesBasedOnSelection">
        </div>
    </div>

    <div class="row mb-3">
        <div class="col">
            <label for="timeSelection">Select Time:</label>
            <select id="timeSelection" class="form-control" @bind="selectedTime" @bind:event="oninput" @onchange="UpdateAvailableTickets">
                @if (availableTimes != null && availableTimes.Any())
                {
                    foreach (var time in availableTimes)
                    {
                        <option value="@time">@time.ToString("hh\\:mm")</option>
                    }
                }
                else
                {
                    <option>No available times</option>
                }
            </select>
        </div>
    </div>


    <!-- Row for Number of tickets selection
     <div class="row mb-3">
        <div class="col">
            <label for="ticketsCount">Nr of tickets:</label>
            <select id="ticketsCount" class="form-control" @bind="ticketCount" @bind:event="oninput">
                @foreach (var ticketOption in ticketOptions)
                {
                    <option value="@ticketOption">@ticketOption</option>
                }
            </select>

        </div>
    </div>  -->

    <div class="row mb-3">
        <div class="col">
            <label for="ticketsCount">Nr of tickets:</label>
            <input id="ticketsCount" class="form-control" type="number" min="1" max="@maxTickets" @bind="ticketCount" @bind:event="oninput">
        </div>
    </div>



    <div class="row mb-3">
        <div class="col">
            <button class="btn btn-primary" @onclick="BuyTickets" disabled="@isProcessing">Buy Tickets</button>
        </div>
    </div>
</div>

<div class="container mt-5">
    @if (!string.IsNullOrEmpty(feedbackMessage))
    {
        <div class="alert alert-success">
            @feedbackMessage
        </div>
    }
</div>


@code {
    private string selectedShowName = "all"; 
    private List<string> theaters;
    private List<(string Name, string Image)> shows;


    private string selectedTheaterName = "all";
    private DateOnly startDate;// = new DateOnly(DateOnly.Now.Year, DateOnly.Now.Month, DateOnly.Now.Day);
    private DateOnly endDate;
    private string selectedTime = "";
    private List<TimeSpan> availableTimes;
    private string feedbackMessage = ""; 

    private List<int> ticketOptions = new List<int> { 1 };
    private int maxTickets = 100; 

    private bool isProcessing = false;
    private TicketPurchaseData ticketPurchaseData;




    protected override async Task OnInitializedAsync()
    {
        theaters = await TheaterService.GetAllTheaterNamesAsync();
        shows = await ShowsService.GetShowNamesAndImagesAsync();
    }

    private async Task UpdateTheatersBasedOnShow()
    {
        if (selectedShowName == "all")
        {
            theaters = await TheaterService.GetAllTheaterNamesAsync();
        }
        else
        {
            theaters = await ShowsService.GetTheatersForShowNameAsync(selectedShowName);
        }
        StateHasChanged(); 
    }


    private async Task UpdateTimesBasedOnSelection()
    {
        var allAvailableTimes = new List<TimeSpan>();

        // // If a specific show is selected or "All Shows"
        // if (startDate != default(DateOnly) && endDate != default(DateOnly))
        // {
            var showList = (selectedShowName == "all") ? shows.Select(s => s.Name).ToList() : new List<string> { selectedShowName };

            foreach (var show in showList)
            {
                List<string> theaterListForShow;

                if (selectedTheaterName == "all")
                {
                    theaterListForShow = await ShowsService.GetTheatersForShowNameAsync(show);
                }
                else
                {
                    theaterListForShow = new List<string> { selectedTheaterName };
                }

                foreach (var theaterName in theaterListForShow)
                {
                    int? theaterId = await TheaterService.GetTheaterIdByName(theaterName);
                    if (theaterId.HasValue)
                    {
                        var times = await TicketSalesService.GetAvailableTimesForTheaterInDateRange(theaterId.Value, startDate, endDate);
                        allAvailableTimes.AddRange(times);
                    }
                }
            //}

            availableTimes = allAvailableTimes.Distinct().OrderBy(t => t).ToList();
        }

        StateHasChanged();

        await UpdateAvailableTickets();
    }

    private void ValidateTicketCount()
    {
        if (ticketCount > maxTickets)
        {
            ticketCount = maxTickets;

        }
    }
    private int _ticketCount = 1;
    public int ticketCount
    {
        get
        {
            return _ticketCount;
        }
        set
        {
            _ticketCount = (value > maxTickets) ? maxTickets : value;
        }
    }


    private async Task UpdateAvailableTickets()
    {
        if (!string.IsNullOrEmpty(selectedTime) && DateOnly.TryParse(selectedTime, out DateOnly parsedTime))
        {
            var timeSlot = parsedTime.Day;

            int? nullableTheaterId = await TheaterService.GetTheaterIdByName(selectedTheaterName);

            if (!nullableTheaterId.HasValue)
            {
                return;
            }

            int theaterId = nullableTheaterId.Value;

            maxTickets = await TicketSalesService.GetAvailableTicketsForTimeSlot(theaterId, startDate, timeSlot);
        }
        else
        {
            maxTickets = 1; 
        }

        StateHasChanged();
    }




    private async void BuyTickets()
    {
        if (string.IsNullOrEmpty(selectedTime))
        {
            feedbackMessage = "Please select a Time.";
            return;
        }

        int? nullableTheaterId = await TheaterService.GetTheaterIdByName(selectedTheaterName);

        if (!nullableTheaterId.HasValue)
        {
            feedbackMessage = "Theater not found!";
            return; 
        }

        int theaterId = nullableTheaterId.Value;

        DateOnly? exactDate = await TicketSalesService.GetExactDateForSelectedTime(theaterId, TimeSpan.Parse(selectedTime), ticketCount);

        if (!exactDate.HasValue)
        {
            feedbackMessage = "Sorry, we couldn't find a date that matches your criteria.";
            return; 
        }


        feedbackMessage = "";  

        if (string.IsNullOrEmpty(feedbackMessage))  
        {
            ticketPurchaseData = new TicketPurchaseData
                {
                    ShowName = selectedShowName,
                    TheaterName = selectedTheaterName,
                    PurchaseDate = exactDate.Value,
                    Time = selectedTime,
                    NumberOfTickets = ticketCount
                };

            TicketDataService.CurrentPurchaseData = ticketPurchaseData;
            NavigationManager.NavigateTo("/ProcessPayment");

        }
        else
        {
            StateHasChanged();  
        }
    }




}
 *@